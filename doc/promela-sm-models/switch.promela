/*
  Error free. Stats w/o fairness:

Safety
------
State-vector 44 byte, depth reached 44, errors: 0
      136 states, stored
       10 states, matched

non-progress
------------
State-vector 60 byte, depth reached 88, errors: 0
      271 states, stored (406 visited)
      310 states, matched

acceptance
----------
State-vector 60 byte, depth reached 88, errors: 0
      242 states, stored (348 visited)
      221 states, matched
*/

#define idx_unknown -1

#define idx_state_BothOff 0
#define idx_state_LampOff 1
#define idx_state_LightOn 2
#define idx_state_WallOff 3

mtype = { event_LampSwitch, event_WallSwitch, event_Dummy }

typedef event {mtype evId};

chan _stateMachineChannel = [1] of {event};
bool _stateMachineReady = false;
bool _isLightOn = false;

inline send_event(evt)
{
    local event evtSend;
    evtSend.evId = evt;
    _stateMachineChannel!evtSend;
}
    

proctype Switch()
{
    xr _stateMachineChannel; 
    local event evtRecv; 
    local short currentState = idx_unknown; 


/* state idx_state_BothOff[*/

entry_BothOff: //0
    /* execute on entry BothOff actions */
    _stateMachineReady = true;
    currentState = idx_state_BothOff;

end_Switch: // invalid end state (at depth 32)
body_BothOff:
    _stateMachineChannel?evtRecv; 
    printf("MSC: > event %e in state %d\n", evtRecv.evId, currentState); 
    if
    :: (evtRecv.evId == event_LampSwitch) -> 
        /* execute on exit state BothOff then transition actions*/
        goto entry_WallOff;

    :: (evtRecv.evId == event_WallSwitch) -> 
        /* on exit BothOff & transition actions */
        goto entry_LampOff;
    fi

/*]state idx_state_BothOff*/


/* state idx_state_LampOff[*/

entry_LampOff: //1
    currentState = idx_state_LampOff;

body_LampOff:
    _stateMachineChannel?evtRecv; 
    printf("MSC: > event %e in state %d\n", evtRecv.evId, currentState); 
    if
    :: (evtRecv.evId == event_LampSwitch) -> 
        goto entry_LightOn;

    :: (evtRecv.evId == event_WallSwitch) -> 
        goto entry_BothOff;
    fi

/*]state idx_state_LampOff*/


/* state idx_state_LightOn[*/

entry_LightOn: //2
    currentState = idx_state_LightOn;
    _isLightOn = true;

body_LightOn:
    _stateMachineChannel?evtRecv; 
    printf("MSC: > event %e in state %d\n", evtRecv.evId, currentState); 
    if
    :: (evtRecv.evId == event_LampSwitch) -> 
        _isLightOn = false;
        goto entry_LampOff;

    :: (evtRecv.evId == event_WallSwitch) -> 
        _isLightOn = false;
        goto entry_WallOff;
    fi

/*]state idx_state_LightOn*/


/* state idx_state_WallOff[*/

entry_WallOff: //3
    currentState = idx_state_WallOff;

body_WallOff:
    _stateMachineChannel?evtRecv; 
    printf("MSC: > event %e in state %d\n", evtRecv.evId, currentState); 
    if
    :: (evtRecv.evId == event_LampSwitch) -> 
        goto entry_BothOff;

    :: (evtRecv.evId == event_WallSwitch) -> 
        goto entry_LightOn;
    fi

/*]state idx_state_WallOff*/

} // Switch


proctype TestEnvironment() provided (_stateMachineReady)
{
    assert(Switch:currentState == idx_state_BothOff);
    
    if
    :: true -> 
       send_event(event_WallSwitch); 
       send_event(event_LampSwitch); //assert(_isLightOn == true); // error because race condition
    :: true -> 
       send_event(event_LampSwitch); 
       send_event(event_WallSwitch); //assert(_isLightOn == true); // idem
    fi
    (_isLightOn == true);
    assert(Switch:currentState == idx_state_LightOn);
    
    if
    :: true -> 
       send_event(event_LampSwitch);
       send_event(event_WallSwitch);
    :: true -> 
       send_event(event_WallSwitch);
       send_event(event_LampSwitch);
    fi
    (_isLightOn == false);
    (Switch:currentState == idx_state_BothOff);
} // TestEnvironment


init {
    atomic {
        run Switch(); 
        run TestEnvironment(); 
    }
    //(_nr_pr == 1); 
}


ltl { always/*[]*/ eventually/*<>*/
    (             (Switch:currentState == idx_state_BothOff && _isLightOn == false) 
    implies/*->*/ (Switch:currentState == idx_state_LightOn && _isLightOn == true) 
    implies/*->*/ (Switch:currentState == idx_state_BothOff && _isLightOn == false)
)}

