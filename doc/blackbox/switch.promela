/*
 *
 */
 
c_decl {
\#include "bindings.hpp"
}

bool isLigtOn = false;

proctype TestEnvironment()
{
    bool flippedWall = false;
    
    c_code {initialize();}
    
    if
    :: flippedWall = false/*flip lamp*/; c_code {flip_lamp_switch();}
    :: flippedWall = true; c_code {flip_wall_switch();}
    fi
    c_code {now.isLigtOn = is_light_on();}; assert(isLigtOn == false);
    
    if
    :: ( flippedWall == false ) -> c_code {flip_wall_switch();}
    :: ( flippedWall == true )  -> c_code {flip_lamp_switch();}
    fi
    c_code {now.isLigtOn = is_light_on();}; assert(isLigtOn == true);
    
    if
    :: flippedWall = false/*flip lamp*/; c_code {flip_lamp_switch();}
    :: flippedWall = true; c_code {flip_wall_switch();}
    fi
    c_code {now.isLigtOn = is_light_on();}; assert(isLigtOn == false);
    
    //if
    //:: ( flippedWall == false ) -> c_code {flip_wall_switch();}
    //:: ( flippedWall == true )  -> c_code {flip_lamp_switch();}
    //fi
    //c_code {now.isLigtOn = is_light_on();}; assert(isLigtOn == false);
    
    c_code {terminate();} 
} // TestEnvironment


init {
    atomic {
        run TestEnvironment(); 
    }
    (_nr_pr == 1); 
}


// ltl claims: run with spin -ltl xyz or spin -noclaim 

