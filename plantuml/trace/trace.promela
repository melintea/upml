/*
  (no)trace tests
*/

#define S1 1
#define S2 2
#define S3 3

mtype = { ack, nak, err, next, accept };

typedef event {mtype evId; short fromState; short toState};
chan qid = [3] of {event}; 

proctype p() {
    qid!ack(S1,0);
    qid!nak(S2,1);
} //p

proctype q() {
    local event evtRecv;
    qid?evtRecv;
    qid?evtRecv;
} //q

trace {
    do
    //:: qid!ack; qid!nak; //ok
    //:: qid!ack(S1,_); qid!nak(S2,1); // ok

    :: qid!nak(S2,1); qid!ack(S1,_); // ko: order is important
    //:: qid!accept; qid!ack; qid!nak; //error
    //:: qid!ack(S1,3); qid!nak(S2,1); // error
    //:: qid!ack,S1,3; qid!nak,S2,1; // error
    //:: qid!ack(S3); qid!nak(S2); // error
    od
}

init {
    atomic {
        run p();
        run q();
    }
    //(_nr_pr == 1);
} // init

