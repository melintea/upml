/*
./upml --in ../plantuml/sip/sip.plantuml --backend tla --out ../plantuml/sip/sip.tla 
*/
/*
   Generated by UPML v0.03
   Tue Jul  9 13:01:18 2024


    (F:'';L:1;C:1)
    machine sip {
        (F:'';L:3;C:1)
        -- r3 {
            (F:'';L:19;C:1)
            state Alice final:0;initial:0 {
                (F:'';L:20;C:3)
                -- r20 {
                    (F:'';L:0;C:0)
                    state AEstablished final:0;initial:0 {
                        (F:'';L:28;C:3) AEstablished --> Aterminated Hangup[]/ (t28)
                        (F:'';L:27;C:3) AEstablished:entry: send,event:ACK,to,state:Bob, (a27)
                    }
                    (F:'';L:0;C:0)
                    state AIdle final:0;initial:1 {
                        (F:'';L:21;C:3) AIdle --> AInitiated Dial[]/ (t21)
                    }
                    (F:'';L:0;C:0)
                    state AInitiated final:0;initial:0 {
                        (F:'';L:24;C:3) AInitiated --> AInitiated 1xx[]/ (t24)
                        (F:'';L:25;C:3) AInitiated --> AEstablished 2xx[]/ (t25)
                        (F:'';L:23;C:3) AInitiated:entry: send,event:INVITE,to,state:Bob, (a23)
                        (F:'';L:34;C:3) AInitiated:precondition: (,currentState:Alice,!=,state:BIdle,), (a34)
                        (F:'';L:35;C:3) AInitiated:postcondition: (,currentState:Alice,!=,state:BInitiated,), (a35)
                        (F:'';L:36;C:3) AInitiated:invariant: (,currentState:Alice,!=,state:Bterminated,), (a36)
                    }
                    (F:'';L:0;C:0)
                    state Aterminated final:1;initial:0 {
                        (F:'';L:30;C:3) Aterminated:entry: send,event:BYE,to,state:Bob, (a30)
                    }
                }
            }
            (F:'';L:41;C:1)
            state Bob final:0;initial:0 {
                (F:'';L:42;C:3)
                -- r42 {
                    (F:'';L:0;C:0)
                    state BEstablished final:0;initial:0 {
                        (F:'';L:49;C:3) BEstablished --> BEstablished ACK[]/ (t49)
                        (F:'';L:50;C:3) BEstablished --> Bterminated BYE[]/ (t50)
                        (F:'';L:48;C:3) BEstablished:entry: send,event:2xx,to,state:Alice, (a48)
                    }
                    (F:'';L:0;C:0)
                    state BIdle final:0;initial:1 {
                        (F:'';L:43;C:3) BIdle --> BInitiated INVITE[]/ (t43)
                    }
                    (F:'';L:0;C:0)
                    state BInitiated final:0;initial:0 {
                        (F:'';L:46;C:3) BInitiated --> BEstablished Pickup[]/ (t46)
                        (F:'';L:45;C:3) BInitiated:entry: send,event:1xx,to,state:Alice, (a45)
                        (F:'';L:55;C:3) BInitiated:precondition: (,currentState:Bob,!=,state:AIdle,), (a55)
                        (F:'';L:56;C:3) BInitiated:postcondition: (,currentState:Bob,!=,state:AInitiated,), (a56)
                        (F:'';L:57;C:3) BInitiated:invariant: (,currentState:Bob,!=,state:Aterminated,), (a57)
                    }
                    (F:'';L:0;C:0)
                    state Bterminated final:1;initial:0 {
                    }
                }
            }
            (F:'';L:3;C:1)
            state ClosedSystemEnvironment final:0;initial:0 {
                (F:'';L:4;C:1)
                -- r4 {
                    (F:'';L:0;C:0)
                    state AliceDial final:0;initial:1 {
                        (F:'';L:6;C:1) AliceDial --> BobPickup NullEvent[currentState:Alice,==,state:AIdle,]/send,event:Dial,to,state:Alice, (t6)
                        noInboundEvents,
                    }
                    (F:'';L:0;C:0)
                    state AliceHangup final:0;initial:0 {
                        (F:'';L:12;C:1) AliceHangup --> CallEnded NullEvent[currentState:Alice,==,state:AEstablished,]/send,event:Hangup,to,state:Alice, (t12)
                        noInboundEvents,
                    }
                    (F:'';L:0;C:0)
                    state BobPickup final:0;initial:0 {
                        (F:'';L:9;C:1) BobPickup --> AliceHangup NullEvent[currentState:Bob,==,state:BInitiated,]/send,event:Pickup,to,state:Bob, (t9)
                        noInboundEvents,
                    }
                    (F:'';L:0;C:0)
                    state CallEnded final:1;initial:0 {
                        noInboundEvents,
                    }
                }
            }
        }
    } sip

*/

---- MODULE sip ----------------------------------------------------

EXTENDS TLC, Integers, Sequences

idx_Unknown == -1

idx_state_AEstablished == 1
idx_state_AIdle == 2
idx_state_AInitiated == 3
idx_state_Alice == 4
idx_state_AliceDial == 5
idx_state_AliceHangup == 6
idx_state_Aterminated == 7
idx_state_BEstablished == 8
idx_state_BIdle == 9
idx_state_BInitiated == 10
idx_state_Bob == 11
idx_state_BobPickup == 12
idx_state_Bterminated == 13
idx_state_CallEnded == 14
idx_state_ClosedSystemEnvironment == 15

idx_region_r20 == 1
idx_region_r3 == 2
idx_region_r4 == 3
idx_region_r42 == 4

idx_event_1xx == 10
idx_event_2xx == 11
idx_event_ACK == 12
idx_event_BYE == 13
idx_event_Dial == 5
idx_event_Hangup == 6
idx_event_INVITE == 14
idx_event_NullEvent == 8
idx_event_Pickup == 9

(**********************************************************************

--algorithm sip {

variables

     channels = << <<>>, <<>>, <<>>, <<>> >>;


macro send_event(channel, evtId, fromState, toState) {
    print <<"P:", fromState, "o->", evtId, channel, " > P:", toState>>;
    channels[channel] := Append(@, evtId);
}
macro recv_event(evtId, channel, inState) {
    await Len(channels[channel]) > 0;
    evtId := Head(channels[channel]);
    print <<"P:", channel, inState, "<-i", evtId>>;
    channels[channel] := Tail(@);
}

    

fair+ process (region_r3 \in {idx_region_r3}) \* sip
variables
    evtRecv = idx_Unknown; 
    initialState = idx_Unknown; 
    finalState = idx_Unknown; 
    currentState = initialState; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body_idx_region_r3: skip;

\* state idx_state_Alice[

entry_Alice: skip;
    currentState := newState;
    noChannel := TRUE;

body_Alice: skip;
    if ( noChannel = FALSE ) {
        R1:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_Alice


\* state idx_state_Bob[

entry_Bob: skip;
    currentState := newState;
    noChannel := TRUE;

body_Bob: skip;
    if ( noChannel = FALSE ) {
        R2:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_Bob


\* state idx_state_ClosedSystemEnvironment[

entry_ClosedSystemEnvironment: skip;
    currentState := newState;
    noChannel := TRUE;

body_ClosedSystemEnvironment: skip;
    if ( noChannel = FALSE ) {
        R3:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_ClosedSystemEnvironment

} \* region_r3 sip


fair+ process (region_r20 \in {idx_region_r20}) \* Alice
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_AIdle; 
    finalState = idx_state_Aterminated; 
    currentState = initialState; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body_idx_region_r20: skip;

\* state idx_state_AIdle[

entry_AIdle: skip;
    currentState := newState;

body_AIdle: skip;
loop_AIdle: skip;
    if ( noChannel = FALSE ) {
        R4:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_AIdle[ 
    T5:
    \* either {
            \*     (F:'';L:21;C:3) AIdle --> AInitiated Dial[]/ (t21)

            await (evtRecv = idx_event_Dial);
            
            newState := idx_state_AInitiated; 
            goto entry_AInitiated;

    \* }; \* either
    \*]transitions idx_state_AIdle

\*]state idx_state_AIdle


\* state idx_state_AEstablished[

entry_AEstablished: skip;
    currentState := newState;
    \*     (F:'';L:27;C:3) AEstablished:entry: send,event:ACK,to,state:Bob, (a27)

    S6:send_event(idx_region_r42, idx_event_ACK, idx_state_AEstablished, idx_state_Bob); 


body_AEstablished: skip;
    if ( noChannel = FALSE ) {
        R7:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_AEstablished[ 
    T8:
    \* either {
            \*     (F:'';L:28;C:3) AEstablished --> Aterminated Hangup[]/ (t28)

            await (evtRecv = idx_event_Hangup);
            
            newState := idx_state_Aterminated; 
            goto entry_Aterminated;

    \* }; \* either
    \*]transitions idx_state_AEstablished

\*]state idx_state_AEstablished


\* state idx_state_AInitiated[

entry_AInitiated: skip;
    currentState := newState;
        \*     (F:'';L:34;C:3) AInitiated:precondition: (,currentState:Alice,!=,state:BIdle,), (a34)
        \* assert((currentState ~=idx_state_BIdle));

    \*     (F:'';L:23;C:3) AInitiated:entry: send,event:INVITE,to,state:Bob, (a23)

    S9:send_event(idx_region_r42, idx_event_INVITE, idx_state_AInitiated, idx_state_Bob); 


body_AInitiated: skip;
    if ( noChannel = FALSE ) {
        R10:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_AInitiated[ 
    T11:
    either {
            \*     (F:'';L:24;C:3) AInitiated --> AInitiated 1xx[]/ (t24)

            await (evtRecv = idx_event_1xx);
            
        \*     (F:'';L:35;C:3) AInitiated:postcondition: (,currentState:Alice,!=,state:BInitiated,), (a35)
        \* assert((currentState ~=idx_state_BInitiated));

            newState := idx_state_AInitiated; 
            goto body_AInitiated;

    } or {
            \*     (F:'';L:25;C:3) AInitiated --> AEstablished 2xx[]/ (t25)

            await (evtRecv = idx_event_2xx);
            
        \*     (F:'';L:35;C:3) AInitiated:postcondition: (,currentState:Alice,!=,state:BInitiated,), (a35)
        \* assert((currentState ~=idx_state_BInitiated));

            newState := idx_state_AEstablished; 
            goto entry_AEstablished;

    }; \* either
    \*]transitions idx_state_AInitiated

        \*     (F:'';L:35;C:3) AInitiated:postcondition: (,currentState:Alice,!=,state:BInitiated,), (a35)
        \* assert((currentState ~=idx_state_BInitiated));

        \*     (F:'';L:35;C:3) AInitiated:postcondition: (,currentState:Alice,!=,state:BInitiated,), (a35)
        \* assert((currentState ~=idx_state_BInitiated));

\*]state idx_state_AInitiated


\* state idx_state_Aterminated[

entry_Aterminated: skip;
    currentState := newState;
    noChannel := TRUE;
    \*     (F:'';L:30;C:3) Aterminated:entry: send,event:BYE,to,state:Bob, (a30)

    S12:send_event(idx_region_r42, idx_event_BYE, idx_state_Aterminated, idx_state_Bob); 


body_Aterminated: skip;
loop_Aterminated: skip;
    if ( noChannel = FALSE ) {
end_Aterminated: skip;
        R13:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_Aterminated

} \* region_r20 Alice


fair+ process (region_r42 \in {idx_region_r42}) \* Bob
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_BIdle; 
    finalState = idx_state_Bterminated; 
    currentState = initialState; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body_idx_region_r42: skip;

\* state idx_state_BIdle[

entry_BIdle: skip;
    currentState := newState;

body_BIdle: skip;
loop_BIdle: skip;
    if ( noChannel = FALSE ) {
        R14:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_BIdle[ 
    T15:
    \* either {
            \*     (F:'';L:43;C:3) BIdle --> BInitiated INVITE[]/ (t43)

            await (evtRecv = idx_event_INVITE);
            
            newState := idx_state_BInitiated; 
            goto entry_BInitiated;

    \* }; \* either
    \*]transitions idx_state_BIdle

\*]state idx_state_BIdle


\* state idx_state_BEstablished[

entry_BEstablished: skip;
    currentState := newState;
    \*     (F:'';L:48;C:3) BEstablished:entry: send,event:2xx,to,state:Alice, (a48)

    S16:send_event(idx_region_r20, idx_event_2xx, idx_state_BEstablished, idx_state_Alice); 


body_BEstablished: skip;
    if ( noChannel = FALSE ) {
        R17:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_BEstablished[ 
    T18:
    either {
            \*     (F:'';L:49;C:3) BEstablished --> BEstablished ACK[]/ (t49)

            await (evtRecv = idx_event_ACK);
            
            newState := idx_state_BEstablished; 
            goto body_BEstablished;

    } or {
            \*     (F:'';L:50;C:3) BEstablished --> Bterminated BYE[]/ (t50)

            await (evtRecv = idx_event_BYE);
            
            newState := idx_state_Bterminated; 
            goto entry_Bterminated;

    }; \* either
    \*]transitions idx_state_BEstablished

\*]state idx_state_BEstablished


\* state idx_state_BInitiated[

entry_BInitiated: skip;
    currentState := newState;
        \*     (F:'';L:55;C:3) BInitiated:precondition: (,currentState:Bob,!=,state:AIdle,), (a55)
        \* assert((currentState ~=idx_state_AIdle));

    \*     (F:'';L:45;C:3) BInitiated:entry: send,event:1xx,to,state:Alice, (a45)

    S19:send_event(idx_region_r20, idx_event_1xx, idx_state_BInitiated, idx_state_Alice); 


body_BInitiated: skip;
    if ( noChannel = FALSE ) {
        R20:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_BInitiated[ 
    T21:
    \* either {
            \*     (F:'';L:46;C:3) BInitiated --> BEstablished Pickup[]/ (t46)

            await (evtRecv = idx_event_Pickup);
            
        \*     (F:'';L:56;C:3) BInitiated:postcondition: (,currentState:Bob,!=,state:AInitiated,), (a56)
        \* assert((currentState ~=idx_state_AInitiated));

            newState := idx_state_BEstablished; 
            goto entry_BEstablished;

    \* }; \* either
    \*]transitions idx_state_BInitiated

        \*     (F:'';L:56;C:3) BInitiated:postcondition: (,currentState:Bob,!=,state:AInitiated,), (a56)
        \* assert((currentState ~=idx_state_AInitiated));

        \*     (F:'';L:56;C:3) BInitiated:postcondition: (,currentState:Bob,!=,state:AInitiated,), (a56)
        \* assert((currentState ~=idx_state_AInitiated));

\*]state idx_state_BInitiated


\* state idx_state_Bterminated[

entry_Bterminated: skip;
    currentState := newState;
    noChannel := TRUE;

body_Bterminated: skip;
loop_Bterminated: skip;
    if ( noChannel = FALSE ) {
end_Bterminated: skip;
        R22:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_Bterminated

} \* region_r42 Bob


fair+ process (region_r4 \in {idx_region_r4}) \* ClosedSystemEnvironment
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_AliceDial; 
    finalState = idx_state_CallEnded; 
    currentState = initialState; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body_idx_region_r4: skip;

\* state idx_state_AliceDial[

entry_AliceDial: skip;
    currentState := newState;
    noChannel := TRUE;

body_AliceDial: skip;
loop_AliceDial: skip;
    if ( noChannel = FALSE ) {
        R23:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_AliceDial[ 
    T24:
    \* either {
            \*     (F:'';L:6;C:1) AliceDial --> BobPickup NullEvent[currentState:Alice,==,state:AIdle,]/send,event:Dial,to,state:Alice, (t6)

            await (evtRecv = idx_event_NullEvent /\ currentState =idx_state_AIdle);
            S25:send_event(idx_region_r20, idx_event_Dial, idx_state_AliceDial, idx_state_Alice); 

            newState := idx_state_BobPickup; 
            goto entry_BobPickup;

    \* }; \* either
    \*]transitions idx_state_AliceDial

\*]state idx_state_AliceDial


\* state idx_state_AliceHangup[

entry_AliceHangup: skip;
    currentState := newState;
    noChannel := TRUE;

body_AliceHangup: skip;
    if ( noChannel = FALSE ) {
        R26:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_AliceHangup[ 
    T27:
    \* either {
            \*     (F:'';L:12;C:1) AliceHangup --> CallEnded NullEvent[currentState:Alice,==,state:AEstablished,]/send,event:Hangup,to,state:Alice, (t12)

            await (evtRecv = idx_event_NullEvent /\ currentState =idx_state_AEstablished);
            S28:send_event(idx_region_r20, idx_event_Hangup, idx_state_AliceHangup, idx_state_Alice); 

            newState := idx_state_CallEnded; 
            goto entry_CallEnded;

    \* }; \* either
    \*]transitions idx_state_AliceHangup

\*]state idx_state_AliceHangup


\* state idx_state_BobPickup[

entry_BobPickup: skip;
    currentState := newState;
    noChannel := TRUE;

body_BobPickup: skip;
    if ( noChannel = FALSE ) {
        R29:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_BobPickup[ 
    T30:
    \* either {
            \*     (F:'';L:9;C:1) BobPickup --> AliceHangup NullEvent[currentState:Bob,==,state:BInitiated,]/send,event:Pickup,to,state:Bob, (t9)

            await (evtRecv = idx_event_NullEvent /\ currentState =idx_state_BInitiated);
            S31:send_event(idx_region_r42, idx_event_Pickup, idx_state_BobPickup, idx_state_Bob); 

            newState := idx_state_AliceHangup; 
            goto entry_AliceHangup;

    \* }; \* either
    \*]transitions idx_state_BobPickup

\*]state idx_state_BobPickup


\* state idx_state_CallEnded[

entry_CallEnded: skip;
    currentState := newState;
    noChannel := TRUE;

body_CallEnded: skip;
loop_CallEnded: skip;
    if ( noChannel = FALSE ) {
end_CallEnded: skip;
        R32:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_CallEnded

} \* region_r4 ClosedSystemEnvironment


} \* algorithm sip

**********************************************************************)
\* BEGIN TRANSLATION (chksum(pcal) = "c15837c0" /\ chksum(tla) = "fcc53742")
\* Process variable evtRecv of process region_r3 at line 159 col 5 changed to evtRecv_
\* Process variable initialState of process region_r3 at line 160 col 5 changed to initialState_
\* Process variable finalState of process region_r3 at line 161 col 5 changed to finalState_
\* Process variable currentState of process region_r3 at line 162 col 5 changed to currentState_
\* Process variable newState of process region_r3 at line 163 col 5 changed to newState_
\* Process variable noChannel of process region_r3 at line 164 col 5 changed to noChannel_
\* Process variable evtRecv of process region_r20 at line 223 col 5 changed to evtRecv_r
\* Process variable initialState of process region_r20 at line 224 col 5 changed to initialState_r
\* Process variable finalState of process region_r20 at line 225 col 5 changed to finalState_r
\* Process variable currentState of process region_r20 at line 226 col 5 changed to currentState_r
\* Process variable newState of process region_r20 at line 227 col 5 changed to newState_r
\* Process variable noChannel of process region_r20 at line 228 col 5 changed to noChannel_r
\* Process variable evtRecv of process region_r42 at line 378 col 5 changed to evtRecv_re
\* Process variable initialState of process region_r42 at line 379 col 5 changed to initialState_re
\* Process variable finalState of process region_r42 at line 380 col 5 changed to finalState_re
\* Process variable currentState of process region_r42 at line 381 col 5 changed to currentState_re
\* Process variable newState of process region_r42 at line 382 col 5 changed to newState_re
\* Process variable noChannel of process region_r42 at line 383 col 5 changed to noChannel_re
VARIABLES channels, pc, evtRecv_, initialState_, finalState_, currentState_, 
          newState_, noChannel_, evtRecv_r, initialState_r, finalState_r, 
          currentState_r, newState_r, noChannel_r, evtRecv_re, 
          initialState_re, finalState_re, currentState_re, newState_re, 
          noChannel_re, evtRecv, initialState, finalState, currentState, 
          newState, noChannel

vars == << channels, pc, evtRecv_, initialState_, finalState_, currentState_, 
           newState_, noChannel_, evtRecv_r, initialState_r, finalState_r, 
           currentState_r, newState_r, noChannel_r, evtRecv_re, 
           initialState_re, finalState_re, currentState_re, newState_re, 
           noChannel_re, evtRecv, initialState, finalState, currentState, 
           newState, noChannel >>

ProcSet == ({idx_region_r3}) \cup ({idx_region_r20}) \cup ({idx_region_r42}) \cup ({idx_region_r4})

Init == (* Global variables *)
        /\ channels = << <<>>, <<>>, <<>>, <<>> >>
        (* Process region_r3 *)
        /\ evtRecv_ = [self \in {idx_region_r3} |-> idx_Unknown]
        /\ initialState_ = [self \in {idx_region_r3} |-> idx_Unknown]
        /\ finalState_ = [self \in {idx_region_r3} |-> idx_Unknown]
        /\ currentState_ = [self \in {idx_region_r3} |-> initialState_[self]]
        /\ newState_ = [self \in {idx_region_r3} |-> initialState_[self]]
        /\ noChannel_ = [self \in {idx_region_r3} |-> FALSE]
        (* Process region_r20 *)
        /\ evtRecv_r = [self \in {idx_region_r20} |-> idx_Unknown]
        /\ initialState_r = [self \in {idx_region_r20} |-> idx_state_AIdle]
        /\ finalState_r = [self \in {idx_region_r20} |-> idx_state_Aterminated]
        /\ currentState_r = [self \in {idx_region_r20} |-> initialState_r[self]]
        /\ newState_r = [self \in {idx_region_r20} |-> initialState_r[self]]
        /\ noChannel_r = [self \in {idx_region_r20} |-> FALSE]
        (* Process region_r42 *)
        /\ evtRecv_re = [self \in {idx_region_r42} |-> idx_Unknown]
        /\ initialState_re = [self \in {idx_region_r42} |-> idx_state_BIdle]
        /\ finalState_re = [self \in {idx_region_r42} |-> idx_state_Bterminated]
        /\ currentState_re = [self \in {idx_region_r42} |-> initialState_re[self]]
        /\ newState_re = [self \in {idx_region_r42} |-> initialState_re[self]]
        /\ noChannel_re = [self \in {idx_region_r42} |-> FALSE]
        (* Process region_r4 *)
        /\ evtRecv = [self \in {idx_region_r4} |-> idx_Unknown]
        /\ initialState = [self \in {idx_region_r4} |-> idx_state_AliceDial]
        /\ finalState = [self \in {idx_region_r4} |-> idx_state_CallEnded]
        /\ currentState = [self \in {idx_region_r4} |-> initialState[self]]
        /\ newState = [self \in {idx_region_r4} |-> initialState[self]]
        /\ noChannel = [self \in {idx_region_r4} |-> FALSE]
        /\ pc = [self \in ProcSet |-> CASE self \in {idx_region_r3} -> "proc_body_idx_region_r3"
                                        [] self \in {idx_region_r20} -> "proc_body_idx_region_r20"
                                        [] self \in {idx_region_r42} -> "proc_body_idx_region_r42"
                                        [] self \in {idx_region_r4} -> "proc_body_idx_region_r4"]

proc_body_idx_region_r3(self) == /\ pc[self] = "proc_body_idx_region_r3"
                                 /\ TRUE
                                 /\ pc' = [pc EXCEPT ![self] = "entry_Alice"]
                                 /\ UNCHANGED << channels, evtRecv_, 
                                                 initialState_, finalState_, 
                                                 currentState_, newState_, 
                                                 noChannel_, evtRecv_r, 
                                                 initialState_r, finalState_r, 
                                                 currentState_r, newState_r, 
                                                 noChannel_r, evtRecv_re, 
                                                 initialState_re, 
                                                 finalState_re, 
                                                 currentState_re, newState_re, 
                                                 noChannel_re, evtRecv, 
                                                 initialState, finalState, 
                                                 currentState, newState, 
                                                 noChannel >>

entry_Alice(self) == /\ pc[self] = "entry_Alice"
                     /\ TRUE
                     /\ currentState_' = [currentState_ EXCEPT ![self] = newState_[self]]
                     /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                     /\ pc' = [pc EXCEPT ![self] = "body_Alice"]
                     /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                     finalState_, newState_, evtRecv_r, 
                                     initialState_r, finalState_r, 
                                     currentState_r, newState_r, noChannel_r, 
                                     evtRecv_re, initialState_re, 
                                     finalState_re, currentState_re, 
                                     newState_re, noChannel_re, evtRecv, 
                                     initialState, finalState, currentState, 
                                     newState, noChannel >>

body_Alice(self) == /\ pc[self] = "body_Alice"
                    /\ TRUE
                    /\ IF noChannel_[self] = FALSE
                          THEN /\ pc' = [pc EXCEPT ![self] = "R1"]
                               /\ UNCHANGED evtRecv_
                          ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = idx_event_NullEvent]
                               /\ pc' = [pc EXCEPT ![self] = "entry_Bob"]
                    /\ UNCHANGED << channels, initialState_, finalState_, 
                                    currentState_, newState_, noChannel_, 
                                    evtRecv_r, initialState_r, finalState_r, 
                                    currentState_r, newState_r, noChannel_r, 
                                    evtRecv_re, initialState_re, finalState_re, 
                                    currentState_re, newState_re, noChannel_re, 
                                    evtRecv, initialState, finalState, 
                                    currentState, newState, noChannel >>

R1(self) == /\ pc[self] = "R1"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState_[self], "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "entry_Bob"]
            /\ UNCHANGED << initialState_, finalState_, currentState_, 
                            newState_, noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, currentState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, currentState_re, newState_re, 
                            noChannel_re, evtRecv, initialState, finalState, 
                            currentState, newState, noChannel >>

entry_Bob(self) == /\ pc[self] = "entry_Bob"
                   /\ TRUE
                   /\ currentState_' = [currentState_ EXCEPT ![self] = newState_[self]]
                   /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                   /\ pc' = [pc EXCEPT ![self] = "body_Bob"]
                   /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                   finalState_, newState_, evtRecv_r, 
                                   initialState_r, finalState_r, 
                                   currentState_r, newState_r, noChannel_r, 
                                   evtRecv_re, initialState_re, finalState_re, 
                                   currentState_re, newState_re, noChannel_re, 
                                   evtRecv, initialState, finalState, 
                                   currentState, newState, noChannel >>

body_Bob(self) == /\ pc[self] = "body_Bob"
                  /\ TRUE
                  /\ IF noChannel_[self] = FALSE
                        THEN /\ pc' = [pc EXCEPT ![self] = "R2"]
                             /\ UNCHANGED evtRecv_
                        ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = idx_event_NullEvent]
                             /\ pc' = [pc EXCEPT ![self] = "entry_ClosedSystemEnvironment"]
                  /\ UNCHANGED << channels, initialState_, finalState_, 
                                  currentState_, newState_, noChannel_, 
                                  evtRecv_r, initialState_r, finalState_r, 
                                  currentState_r, newState_r, noChannel_r, 
                                  evtRecv_re, initialState_re, finalState_re, 
                                  currentState_re, newState_re, noChannel_re, 
                                  evtRecv, initialState, finalState, 
                                  currentState, newState, noChannel >>

R2(self) == /\ pc[self] = "R2"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState_[self], "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "entry_ClosedSystemEnvironment"]
            /\ UNCHANGED << initialState_, finalState_, currentState_, 
                            newState_, noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, currentState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, currentState_re, newState_re, 
                            noChannel_re, evtRecv, initialState, finalState, 
                            currentState, newState, noChannel >>

entry_ClosedSystemEnvironment(self) == /\ pc[self] = "entry_ClosedSystemEnvironment"
                                       /\ TRUE
                                       /\ currentState_' = [currentState_ EXCEPT ![self] = newState_[self]]
                                       /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                                       /\ pc' = [pc EXCEPT ![self] = "body_ClosedSystemEnvironment"]
                                       /\ UNCHANGED << channels, evtRecv_, 
                                                       initialState_, 
                                                       finalState_, newState_, 
                                                       evtRecv_r, 
                                                       initialState_r, 
                                                       finalState_r, 
                                                       currentState_r, 
                                                       newState_r, noChannel_r, 
                                                       evtRecv_re, 
                                                       initialState_re, 
                                                       finalState_re, 
                                                       currentState_re, 
                                                       newState_re, 
                                                       noChannel_re, evtRecv, 
                                                       initialState, 
                                                       finalState, 
                                                       currentState, newState, 
                                                       noChannel >>

body_ClosedSystemEnvironment(self) == /\ pc[self] = "body_ClosedSystemEnvironment"
                                      /\ TRUE
                                      /\ IF noChannel_[self] = FALSE
                                            THEN /\ pc' = [pc EXCEPT ![self] = "R3"]
                                                 /\ UNCHANGED evtRecv_
                                            ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = idx_event_NullEvent]
                                                 /\ pc' = [pc EXCEPT ![self] = "Done"]
                                      /\ UNCHANGED << channels, initialState_, 
                                                      finalState_, 
                                                      currentState_, newState_, 
                                                      noChannel_, evtRecv_r, 
                                                      initialState_r, 
                                                      finalState_r, 
                                                      currentState_r, 
                                                      newState_r, noChannel_r, 
                                                      evtRecv_re, 
                                                      initialState_re, 
                                                      finalState_re, 
                                                      currentState_re, 
                                                      newState_re, 
                                                      noChannel_re, evtRecv, 
                                                      initialState, finalState, 
                                                      currentState, newState, 
                                                      noChannel >>

R3(self) == /\ pc[self] = "R3"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState_[self], "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "Done"]
            /\ UNCHANGED << initialState_, finalState_, currentState_, 
                            newState_, noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, currentState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, currentState_re, newState_re, 
                            noChannel_re, evtRecv, initialState, finalState, 
                            currentState, newState, noChannel >>

region_r3(self) == proc_body_idx_region_r3(self) \/ entry_Alice(self)
                      \/ body_Alice(self) \/ R1(self) \/ entry_Bob(self)
                      \/ body_Bob(self) \/ R2(self)
                      \/ entry_ClosedSystemEnvironment(self)
                      \/ body_ClosedSystemEnvironment(self) \/ R3(self)

proc_body_idx_region_r20(self) == /\ pc[self] = "proc_body_idx_region_r20"
                                  /\ TRUE
                                  /\ pc' = [pc EXCEPT ![self] = "entry_AIdle"]
                                  /\ UNCHANGED << channels, evtRecv_, 
                                                  initialState_, finalState_, 
                                                  currentState_, newState_, 
                                                  noChannel_, evtRecv_r, 
                                                  initialState_r, finalState_r, 
                                                  currentState_r, newState_r, 
                                                  noChannel_r, evtRecv_re, 
                                                  initialState_re, 
                                                  finalState_re, 
                                                  currentState_re, newState_re, 
                                                  noChannel_re, evtRecv, 
                                                  initialState, finalState, 
                                                  currentState, newState, 
                                                  noChannel >>

entry_AIdle(self) == /\ pc[self] = "entry_AIdle"
                     /\ TRUE
                     /\ currentState_r' = [currentState_r EXCEPT ![self] = newState_r[self]]
                     /\ pc' = [pc EXCEPT ![self] = "body_AIdle"]
                     /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                     finalState_, currentState_, newState_, 
                                     noChannel_, evtRecv_r, initialState_r, 
                                     finalState_r, newState_r, noChannel_r, 
                                     evtRecv_re, initialState_re, 
                                     finalState_re, currentState_re, 
                                     newState_re, noChannel_re, evtRecv, 
                                     initialState, finalState, currentState, 
                                     newState, noChannel >>

body_AIdle(self) == /\ pc[self] = "body_AIdle"
                    /\ TRUE
                    /\ pc' = [pc EXCEPT ![self] = "loop_AIdle"]
                    /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                    finalState_, currentState_, newState_, 
                                    noChannel_, evtRecv_r, initialState_r, 
                                    finalState_r, currentState_r, newState_r, 
                                    noChannel_r, evtRecv_re, initialState_re, 
                                    finalState_re, currentState_re, 
                                    newState_re, noChannel_re, evtRecv, 
                                    initialState, finalState, currentState, 
                                    newState, noChannel >>

loop_AIdle(self) == /\ pc[self] = "loop_AIdle"
                    /\ TRUE
                    /\ IF noChannel_r[self] = FALSE
                          THEN /\ pc' = [pc EXCEPT ![self] = "R4"]
                               /\ UNCHANGED evtRecv_r
                          ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                               /\ pc' = [pc EXCEPT ![self] = "T5"]
                    /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                    finalState_, currentState_, newState_, 
                                    noChannel_, initialState_r, finalState_r, 
                                    currentState_r, newState_r, noChannel_r, 
                                    evtRecv_re, initialState_re, finalState_re, 
                                    currentState_re, newState_re, noChannel_re, 
                                    evtRecv, initialState, finalState, 
                                    currentState, newState, noChannel >>

R4(self) == /\ pc[self] = "R4"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState_r[self], "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "T5"]
            /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, 
                            initialState_r, finalState_r, currentState_r, 
                            newState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, currentState_re, 
                            newState_re, noChannel_re, evtRecv, initialState, 
                            finalState, currentState, newState, noChannel >>

T5(self) == /\ pc[self] = "T5"
            /\ (evtRecv_r[self] = idx_event_Dial)
            /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_AInitiated]
            /\ pc' = [pc EXCEPT ![self] = "entry_AInitiated"]
            /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, currentState_re, newState_re, 
                            noChannel_re, evtRecv, initialState, finalState, 
                            currentState, newState, noChannel >>

entry_AEstablished(self) == /\ pc[self] = "entry_AEstablished"
                            /\ TRUE
                            /\ currentState_r' = [currentState_r EXCEPT ![self] = newState_r[self]]
                            /\ pc' = [pc EXCEPT ![self] = "S6"]
                            /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                            finalState_, currentState_, 
                                            newState_, noChannel_, evtRecv_r, 
                                            initialState_r, finalState_r, 
                                            newState_r, noChannel_r, 
                                            evtRecv_re, initialState_re, 
                                            finalState_re, currentState_re, 
                                            newState_re, noChannel_re, evtRecv, 
                                            initialState, finalState, 
                                            currentState, newState, noChannel >>

S6(self) == /\ pc[self] = "S6"
            /\ PrintT(<<"P:", idx_state_AEstablished, "o->", idx_event_ACK, idx_region_r42, " > P:", idx_state_Bob>>)
            /\ channels' = [channels EXCEPT ![idx_region_r42] = Append(@, idx_event_ACK)]
            /\ pc' = [pc EXCEPT ![self] = "body_AEstablished"]
            /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            newState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, currentState_re, 
                            newState_re, noChannel_re, evtRecv, initialState, 
                            finalState, currentState, newState, noChannel >>

body_AEstablished(self) == /\ pc[self] = "body_AEstablished"
                           /\ TRUE
                           /\ IF noChannel_r[self] = FALSE
                                 THEN /\ pc' = [pc EXCEPT ![self] = "R7"]
                                      /\ UNCHANGED evtRecv_r
                                 ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                      /\ pc' = [pc EXCEPT ![self] = "T8"]
                           /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                           finalState_, currentState_, 
                                           newState_, noChannel_, 
                                           initialState_r, finalState_r, 
                                           currentState_r, newState_r, 
                                           noChannel_r, evtRecv_re, 
                                           initialState_re, finalState_re, 
                                           currentState_re, newState_re, 
                                           noChannel_re, evtRecv, initialState, 
                                           finalState, currentState, newState, 
                                           noChannel >>

R7(self) == /\ pc[self] = "R7"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState_r[self], "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "T8"]
            /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, 
                            initialState_r, finalState_r, currentState_r, 
                            newState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, currentState_re, 
                            newState_re, noChannel_re, evtRecv, initialState, 
                            finalState, currentState, newState, noChannel >>

T8(self) == /\ pc[self] = "T8"
            /\ (evtRecv_r[self] = idx_event_Hangup)
            /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_Aterminated]
            /\ pc' = [pc EXCEPT ![self] = "entry_Aterminated"]
            /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, currentState_re, newState_re, 
                            noChannel_re, evtRecv, initialState, finalState, 
                            currentState, newState, noChannel >>

entry_AInitiated(self) == /\ pc[self] = "entry_AInitiated"
                          /\ TRUE
                          /\ currentState_r' = [currentState_r EXCEPT ![self] = newState_r[self]]
                          /\ pc' = [pc EXCEPT ![self] = "S9"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          currentState_re, newState_re, 
                                          noChannel_re, evtRecv, initialState, 
                                          finalState, currentState, newState, 
                                          noChannel >>

S9(self) == /\ pc[self] = "S9"
            /\ PrintT(<<"P:", idx_state_AInitiated, "o->", idx_event_INVITE, idx_region_r42, " > P:", idx_state_Bob>>)
            /\ channels' = [channels EXCEPT ![idx_region_r42] = Append(@, idx_event_INVITE)]
            /\ pc' = [pc EXCEPT ![self] = "body_AInitiated"]
            /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            newState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, currentState_re, 
                            newState_re, noChannel_re, evtRecv, initialState, 
                            finalState, currentState, newState, noChannel >>

body_AInitiated(self) == /\ pc[self] = "body_AInitiated"
                         /\ TRUE
                         /\ IF noChannel_r[self] = FALSE
                               THEN /\ pc' = [pc EXCEPT ![self] = "R10"]
                                    /\ UNCHANGED evtRecv_r
                               ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                    /\ pc' = [pc EXCEPT ![self] = "T11"]
                         /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                         finalState_, currentState_, newState_, 
                                         noChannel_, initialState_r, 
                                         finalState_r, currentState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         currentState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, currentState, newState, 
                                         noChannel >>

R10(self) == /\ pc[self] = "R10"
             /\ Len(channels[self]) > 0
             /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState_r[self], "<-i", evtRecv_r'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "T11"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, newState, noChannel >>

T11(self) == /\ pc[self] = "T11"
             /\ \/ /\ (evtRecv_r[self] = idx_event_1xx)
                   /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_AInitiated]
                   /\ pc' = [pc EXCEPT ![self] = "body_AInitiated"]
                \/ /\ (evtRecv_r[self] = idx_event_2xx)
                   /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_AEstablished]
                   /\ pc' = [pc EXCEPT ![self] = "entry_AEstablished"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, currentState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             currentState, newState, noChannel >>

entry_Aterminated(self) == /\ pc[self] = "entry_Aterminated"
                           /\ TRUE
                           /\ currentState_r' = [currentState_r EXCEPT ![self] = newState_r[self]]
                           /\ noChannel_r' = [noChannel_r EXCEPT ![self] = TRUE]
                           /\ pc' = [pc EXCEPT ![self] = "S12"]
                           /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                           finalState_, currentState_, 
                                           newState_, noChannel_, evtRecv_r, 
                                           initialState_r, finalState_r, 
                                           newState_r, evtRecv_re, 
                                           initialState_re, finalState_re, 
                                           currentState_re, newState_re, 
                                           noChannel_re, evtRecv, initialState, 
                                           finalState, currentState, newState, 
                                           noChannel >>

S12(self) == /\ pc[self] = "S12"
             /\ PrintT(<<"P:", idx_state_Aterminated, "o->", idx_event_BYE, idx_region_r42, " > P:", idx_state_Bob>>)
             /\ channels' = [channels EXCEPT ![idx_region_r42] = Append(@, idx_event_BYE)]
             /\ pc' = [pc EXCEPT ![self] = "body_Aterminated"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, newState, noChannel >>

body_Aterminated(self) == /\ pc[self] = "body_Aterminated"
                          /\ TRUE
                          /\ pc' = [pc EXCEPT ![self] = "loop_Aterminated"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          currentState_r, newState_r, 
                                          noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          currentState_re, newState_re, 
                                          noChannel_re, evtRecv, initialState, 
                                          finalState, currentState, newState, 
                                          noChannel >>

loop_Aterminated(self) == /\ pc[self] = "loop_Aterminated"
                          /\ TRUE
                          /\ IF noChannel_r[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "end_Aterminated"]
                                     /\ UNCHANGED evtRecv_r
                                ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "Done"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, 
                                          initialState_r, finalState_r, 
                                          currentState_r, newState_r, 
                                          noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          currentState_re, newState_re, 
                                          noChannel_re, evtRecv, initialState, 
                                          finalState, currentState, newState, 
                                          noChannel >>

end_Aterminated(self) == /\ pc[self] = "end_Aterminated"
                         /\ TRUE
                         /\ pc' = [pc EXCEPT ![self] = "R13"]
                         /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                         finalState_, currentState_, newState_, 
                                         noChannel_, evtRecv_r, initialState_r, 
                                         finalState_r, currentState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         currentState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, currentState, newState, 
                                         noChannel >>

R13(self) == /\ pc[self] = "R13"
             /\ Len(channels[self]) > 0
             /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState_r[self], "<-i", evtRecv_r'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "Done"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, newState, noChannel >>

region_r20(self) == proc_body_idx_region_r20(self) \/ entry_AIdle(self)
                       \/ body_AIdle(self) \/ loop_AIdle(self) \/ R4(self)
                       \/ T5(self) \/ entry_AEstablished(self) \/ S6(self)
                       \/ body_AEstablished(self) \/ R7(self) \/ T8(self)
                       \/ entry_AInitiated(self) \/ S9(self)
                       \/ body_AInitiated(self) \/ R10(self) \/ T11(self)
                       \/ entry_Aterminated(self) \/ S12(self)
                       \/ body_Aterminated(self) \/ loop_Aterminated(self)
                       \/ end_Aterminated(self) \/ R13(self)

proc_body_idx_region_r42(self) == /\ pc[self] = "proc_body_idx_region_r42"
                                  /\ TRUE
                                  /\ pc' = [pc EXCEPT ![self] = "entry_BIdle"]
                                  /\ UNCHANGED << channels, evtRecv_, 
                                                  initialState_, finalState_, 
                                                  currentState_, newState_, 
                                                  noChannel_, evtRecv_r, 
                                                  initialState_r, finalState_r, 
                                                  currentState_r, newState_r, 
                                                  noChannel_r, evtRecv_re, 
                                                  initialState_re, 
                                                  finalState_re, 
                                                  currentState_re, newState_re, 
                                                  noChannel_re, evtRecv, 
                                                  initialState, finalState, 
                                                  currentState, newState, 
                                                  noChannel >>

entry_BIdle(self) == /\ pc[self] = "entry_BIdle"
                     /\ TRUE
                     /\ currentState_re' = [currentState_re EXCEPT ![self] = newState_re[self]]
                     /\ pc' = [pc EXCEPT ![self] = "body_BIdle"]
                     /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                     finalState_, currentState_, newState_, 
                                     noChannel_, evtRecv_r, initialState_r, 
                                     finalState_r, currentState_r, newState_r, 
                                     noChannel_r, evtRecv_re, initialState_re, 
                                     finalState_re, newState_re, noChannel_re, 
                                     evtRecv, initialState, finalState, 
                                     currentState, newState, noChannel >>

body_BIdle(self) == /\ pc[self] = "body_BIdle"
                    /\ TRUE
                    /\ pc' = [pc EXCEPT ![self] = "loop_BIdle"]
                    /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                    finalState_, currentState_, newState_, 
                                    noChannel_, evtRecv_r, initialState_r, 
                                    finalState_r, currentState_r, newState_r, 
                                    noChannel_r, evtRecv_re, initialState_re, 
                                    finalState_re, currentState_re, 
                                    newState_re, noChannel_re, evtRecv, 
                                    initialState, finalState, currentState, 
                                    newState, noChannel >>

loop_BIdle(self) == /\ pc[self] = "loop_BIdle"
                    /\ TRUE
                    /\ IF noChannel_re[self] = FALSE
                          THEN /\ pc' = [pc EXCEPT ![self] = "R14"]
                               /\ UNCHANGED evtRecv_re
                          ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                               /\ pc' = [pc EXCEPT ![self] = "T15"]
                    /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                    finalState_, currentState_, newState_, 
                                    noChannel_, evtRecv_r, initialState_r, 
                                    finalState_r, currentState_r, newState_r, 
                                    noChannel_r, initialState_re, 
                                    finalState_re, currentState_re, 
                                    newState_re, noChannel_re, evtRecv, 
                                    initialState, finalState, currentState, 
                                    newState, noChannel >>

R14(self) == /\ pc[self] = "R14"
             /\ Len(channels[self]) > 0
             /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState_re[self], "<-i", evtRecv_re'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "T15"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, initialState_re, 
                             finalState_re, currentState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             currentState, newState, noChannel >>

T15(self) == /\ pc[self] = "T15"
             /\ (evtRecv_re[self] = idx_event_INVITE)
             /\ newState_re' = [newState_re EXCEPT ![self] = idx_state_BInitiated]
             /\ pc' = [pc EXCEPT ![self] = "entry_BInitiated"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             currentState, newState, noChannel >>

entry_BEstablished(self) == /\ pc[self] = "entry_BEstablished"
                            /\ TRUE
                            /\ currentState_re' = [currentState_re EXCEPT ![self] = newState_re[self]]
                            /\ pc' = [pc EXCEPT ![self] = "S16"]
                            /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                            finalState_, currentState_, 
                                            newState_, noChannel_, evtRecv_r, 
                                            initialState_r, finalState_r, 
                                            currentState_r, newState_r, 
                                            noChannel_r, evtRecv_re, 
                                            initialState_re, finalState_re, 
                                            newState_re, noChannel_re, evtRecv, 
                                            initialState, finalState, 
                                            currentState, newState, noChannel >>

S16(self) == /\ pc[self] = "S16"
             /\ PrintT(<<"P:", idx_state_BEstablished, "o->", idx_event_2xx, idx_region_r20, " > P:", idx_state_Alice>>)
             /\ channels' = [channels EXCEPT ![idx_region_r20] = Append(@, idx_event_2xx)]
             /\ pc' = [pc EXCEPT ![self] = "body_BEstablished"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, newState, noChannel >>

body_BEstablished(self) == /\ pc[self] = "body_BEstablished"
                           /\ TRUE
                           /\ IF noChannel_re[self] = FALSE
                                 THEN /\ pc' = [pc EXCEPT ![self] = "R17"]
                                      /\ UNCHANGED evtRecv_re
                                 ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                                      /\ pc' = [pc EXCEPT ![self] = "T18"]
                           /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                           finalState_, currentState_, 
                                           newState_, noChannel_, evtRecv_r, 
                                           initialState_r, finalState_r, 
                                           currentState_r, newState_r, 
                                           noChannel_r, initialState_re, 
                                           finalState_re, currentState_re, 
                                           newState_re, noChannel_re, evtRecv, 
                                           initialState, finalState, 
                                           currentState, newState, noChannel >>

R17(self) == /\ pc[self] = "R17"
             /\ Len(channels[self]) > 0
             /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState_re[self], "<-i", evtRecv_re'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "T18"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, initialState_re, 
                             finalState_re, currentState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             currentState, newState, noChannel >>

T18(self) == /\ pc[self] = "T18"
             /\ \/ /\ (evtRecv_re[self] = idx_event_ACK)
                   /\ newState_re' = [newState_re EXCEPT ![self] = idx_state_BEstablished]
                   /\ pc' = [pc EXCEPT ![self] = "body_BEstablished"]
                \/ /\ (evtRecv_re[self] = idx_event_BYE)
                   /\ newState_re' = [newState_re EXCEPT ![self] = idx_state_Bterminated]
                   /\ pc' = [pc EXCEPT ![self] = "entry_Bterminated"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             currentState, newState, noChannel >>

entry_BInitiated(self) == /\ pc[self] = "entry_BInitiated"
                          /\ TRUE
                          /\ currentState_re' = [currentState_re EXCEPT ![self] = newState_re[self]]
                          /\ pc' = [pc EXCEPT ![self] = "S19"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          currentState_r, newState_r, 
                                          noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, 
                                          currentState, newState, noChannel >>

S19(self) == /\ pc[self] = "S19"
             /\ PrintT(<<"P:", idx_state_BInitiated, "o->", idx_event_1xx, idx_region_r20, " > P:", idx_state_Alice>>)
             /\ channels' = [channels EXCEPT ![idx_region_r20] = Append(@, idx_event_1xx)]
             /\ pc' = [pc EXCEPT ![self] = "body_BInitiated"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, newState, noChannel >>

body_BInitiated(self) == /\ pc[self] = "body_BInitiated"
                         /\ TRUE
                         /\ IF noChannel_re[self] = FALSE
                               THEN /\ pc' = [pc EXCEPT ![self] = "R20"]
                                    /\ UNCHANGED evtRecv_re
                               ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                                    /\ pc' = [pc EXCEPT ![self] = "T21"]
                         /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                         finalState_, currentState_, newState_, 
                                         noChannel_, evtRecv_r, initialState_r, 
                                         finalState_r, currentState_r, 
                                         newState_r, noChannel_r, 
                                         initialState_re, finalState_re, 
                                         currentState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, currentState, newState, 
                                         noChannel >>

R20(self) == /\ pc[self] = "R20"
             /\ Len(channels[self]) > 0
             /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState_re[self], "<-i", evtRecv_re'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "T21"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, initialState_re, 
                             finalState_re, currentState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             currentState, newState, noChannel >>

T21(self) == /\ pc[self] = "T21"
             /\ (evtRecv_re[self] = idx_event_Pickup)
             /\ newState_re' = [newState_re EXCEPT ![self] = idx_state_BEstablished]
             /\ pc' = [pc EXCEPT ![self] = "entry_BEstablished"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             currentState, newState, noChannel >>

entry_Bterminated(self) == /\ pc[self] = "entry_Bterminated"
                           /\ TRUE
                           /\ currentState_re' = [currentState_re EXCEPT ![self] = newState_re[self]]
                           /\ noChannel_re' = [noChannel_re EXCEPT ![self] = TRUE]
                           /\ pc' = [pc EXCEPT ![self] = "body_Bterminated"]
                           /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                           finalState_, currentState_, 
                                           newState_, noChannel_, evtRecv_r, 
                                           initialState_r, finalState_r, 
                                           currentState_r, newState_r, 
                                           noChannel_r, evtRecv_re, 
                                           initialState_re, finalState_re, 
                                           newState_re, evtRecv, initialState, 
                                           finalState, currentState, newState, 
                                           noChannel >>

body_Bterminated(self) == /\ pc[self] = "body_Bterminated"
                          /\ TRUE
                          /\ pc' = [pc EXCEPT ![self] = "loop_Bterminated"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          currentState_r, newState_r, 
                                          noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          currentState_re, newState_re, 
                                          noChannel_re, evtRecv, initialState, 
                                          finalState, currentState, newState, 
                                          noChannel >>

loop_Bterminated(self) == /\ pc[self] = "loop_Bterminated"
                          /\ TRUE
                          /\ IF noChannel_re[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "end_Bterminated"]
                                     /\ UNCHANGED evtRecv_re
                                ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "Done"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          currentState_r, newState_r, 
                                          noChannel_r, initialState_re, 
                                          finalState_re, currentState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, 
                                          currentState, newState, noChannel >>

end_Bterminated(self) == /\ pc[self] = "end_Bterminated"
                         /\ TRUE
                         /\ pc' = [pc EXCEPT ![self] = "R22"]
                         /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                         finalState_, currentState_, newState_, 
                                         noChannel_, evtRecv_r, initialState_r, 
                                         finalState_r, currentState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         currentState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, currentState, newState, 
                                         noChannel >>

R22(self) == /\ pc[self] = "R22"
             /\ Len(channels[self]) > 0
             /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState_re[self], "<-i", evtRecv_re'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "Done"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, initialState_re, 
                             finalState_re, currentState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             currentState, newState, noChannel >>

region_r42(self) == proc_body_idx_region_r42(self) \/ entry_BIdle(self)
                       \/ body_BIdle(self) \/ loop_BIdle(self) \/ R14(self)
                       \/ T15(self) \/ entry_BEstablished(self)
                       \/ S16(self) \/ body_BEstablished(self) \/ R17(self)
                       \/ T18(self) \/ entry_BInitiated(self) \/ S19(self)
                       \/ body_BInitiated(self) \/ R20(self) \/ T21(self)
                       \/ entry_Bterminated(self) \/ body_Bterminated(self)
                       \/ loop_Bterminated(self) \/ end_Bterminated(self)
                       \/ R22(self)

proc_body_idx_region_r4(self) == /\ pc[self] = "proc_body_idx_region_r4"
                                 /\ TRUE
                                 /\ pc' = [pc EXCEPT ![self] = "entry_AliceDial"]
                                 /\ UNCHANGED << channels, evtRecv_, 
                                                 initialState_, finalState_, 
                                                 currentState_, newState_, 
                                                 noChannel_, evtRecv_r, 
                                                 initialState_r, finalState_r, 
                                                 currentState_r, newState_r, 
                                                 noChannel_r, evtRecv_re, 
                                                 initialState_re, 
                                                 finalState_re, 
                                                 currentState_re, newState_re, 
                                                 noChannel_re, evtRecv, 
                                                 initialState, finalState, 
                                                 currentState, newState, 
                                                 noChannel >>

entry_AliceDial(self) == /\ pc[self] = "entry_AliceDial"
                         /\ TRUE
                         /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                         /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                         /\ pc' = [pc EXCEPT ![self] = "body_AliceDial"]
                         /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                         finalState_, currentState_, newState_, 
                                         noChannel_, evtRecv_r, initialState_r, 
                                         finalState_r, currentState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         currentState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, newState >>

body_AliceDial(self) == /\ pc[self] = "body_AliceDial"
                        /\ TRUE
                        /\ pc' = [pc EXCEPT ![self] = "loop_AliceDial"]
                        /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                        finalState_, currentState_, newState_, 
                                        noChannel_, evtRecv_r, initialState_r, 
                                        finalState_r, currentState_r, 
                                        newState_r, noChannel_r, evtRecv_re, 
                                        initialState_re, finalState_re, 
                                        currentState_re, newState_re, 
                                        noChannel_re, evtRecv, initialState, 
                                        finalState, currentState, newState, 
                                        noChannel >>

loop_AliceDial(self) == /\ pc[self] = "loop_AliceDial"
                        /\ TRUE
                        /\ IF noChannel[self] = FALSE
                              THEN /\ pc' = [pc EXCEPT ![self] = "R23"]
                                   /\ UNCHANGED evtRecv
                              ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                   /\ pc' = [pc EXCEPT ![self] = "T24"]
                        /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                        finalState_, currentState_, newState_, 
                                        noChannel_, evtRecv_r, initialState_r, 
                                        finalState_r, currentState_r, 
                                        newState_r, noChannel_r, evtRecv_re, 
                                        initialState_re, finalState_re, 
                                        currentState_re, newState_re, 
                                        noChannel_re, initialState, finalState, 
                                        currentState, newState, noChannel >>

R23(self) == /\ pc[self] = "R23"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState[self], "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "T24"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, initialState, 
                             finalState, currentState, newState, noChannel >>

T24(self) == /\ pc[self] = "T24"
             /\ (evtRecv[self] = idx_event_NullEvent /\ currentState[self] =idx_state_AIdle)
             /\ pc' = [pc EXCEPT ![self] = "S25"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, newState, noChannel >>

S25(self) == /\ pc[self] = "S25"
             /\ PrintT(<<"P:", idx_state_AliceDial, "o->", idx_event_Dial, idx_region_r20, " > P:", idx_state_Alice>>)
             /\ channels' = [channels EXCEPT ![idx_region_r20] = Append(@, idx_event_Dial)]
             /\ newState' = [newState EXCEPT ![self] = idx_state_BobPickup]
             /\ pc' = [pc EXCEPT ![self] = "entry_BobPickup"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, noChannel >>

entry_AliceHangup(self) == /\ pc[self] = "entry_AliceHangup"
                           /\ TRUE
                           /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                           /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                           /\ pc' = [pc EXCEPT ![self] = "body_AliceHangup"]
                           /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                           finalState_, currentState_, 
                                           newState_, noChannel_, evtRecv_r, 
                                           initialState_r, finalState_r, 
                                           currentState_r, newState_r, 
                                           noChannel_r, evtRecv_re, 
                                           initialState_re, finalState_re, 
                                           currentState_re, newState_re, 
                                           noChannel_re, evtRecv, initialState, 
                                           finalState, newState >>

body_AliceHangup(self) == /\ pc[self] = "body_AliceHangup"
                          /\ TRUE
                          /\ IF noChannel[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "R26"]
                                     /\ UNCHANGED evtRecv
                                ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "T27"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          currentState_r, newState_r, 
                                          noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          currentState_re, newState_re, 
                                          noChannel_re, initialState, 
                                          finalState, currentState, newState, 
                                          noChannel >>

R26(self) == /\ pc[self] = "R26"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState[self], "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "T27"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, initialState, 
                             finalState, currentState, newState, noChannel >>

T27(self) == /\ pc[self] = "T27"
             /\ (evtRecv[self] = idx_event_NullEvent /\ currentState[self] =idx_state_AEstablished)
             /\ pc' = [pc EXCEPT ![self] = "S28"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, newState, noChannel >>

S28(self) == /\ pc[self] = "S28"
             /\ PrintT(<<"P:", idx_state_AliceHangup, "o->", idx_event_Hangup, idx_region_r20, " > P:", idx_state_Alice>>)
             /\ channels' = [channels EXCEPT ![idx_region_r20] = Append(@, idx_event_Hangup)]
             /\ newState' = [newState EXCEPT ![self] = idx_state_CallEnded]
             /\ pc' = [pc EXCEPT ![self] = "entry_CallEnded"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, noChannel >>

entry_BobPickup(self) == /\ pc[self] = "entry_BobPickup"
                         /\ TRUE
                         /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                         /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                         /\ pc' = [pc EXCEPT ![self] = "body_BobPickup"]
                         /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                         finalState_, currentState_, newState_, 
                                         noChannel_, evtRecv_r, initialState_r, 
                                         finalState_r, currentState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         currentState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, newState >>

body_BobPickup(self) == /\ pc[self] = "body_BobPickup"
                        /\ TRUE
                        /\ IF noChannel[self] = FALSE
                              THEN /\ pc' = [pc EXCEPT ![self] = "R29"]
                                   /\ UNCHANGED evtRecv
                              ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                   /\ pc' = [pc EXCEPT ![self] = "T30"]
                        /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                        finalState_, currentState_, newState_, 
                                        noChannel_, evtRecv_r, initialState_r, 
                                        finalState_r, currentState_r, 
                                        newState_r, noChannel_r, evtRecv_re, 
                                        initialState_re, finalState_re, 
                                        currentState_re, newState_re, 
                                        noChannel_re, initialState, finalState, 
                                        currentState, newState, noChannel >>

R29(self) == /\ pc[self] = "R29"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState[self], "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "T30"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, initialState, 
                             finalState, currentState, newState, noChannel >>

T30(self) == /\ pc[self] = "T30"
             /\ (evtRecv[self] = idx_event_NullEvent /\ currentState[self] =idx_state_BInitiated)
             /\ pc' = [pc EXCEPT ![self] = "S31"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, newState, noChannel >>

S31(self) == /\ pc[self] = "S31"
             /\ PrintT(<<"P:", idx_state_BobPickup, "o->", idx_event_Pickup, idx_region_r42, " > P:", idx_state_Bob>>)
             /\ channels' = [channels EXCEPT ![idx_region_r42] = Append(@, idx_event_Pickup)]
             /\ newState' = [newState EXCEPT ![self] = idx_state_AliceHangup]
             /\ pc' = [pc EXCEPT ![self] = "entry_AliceHangup"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, evtRecv, initialState, 
                             finalState, currentState, noChannel >>

entry_CallEnded(self) == /\ pc[self] = "entry_CallEnded"
                         /\ TRUE
                         /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                         /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                         /\ pc' = [pc EXCEPT ![self] = "body_CallEnded"]
                         /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                         finalState_, currentState_, newState_, 
                                         noChannel_, evtRecv_r, initialState_r, 
                                         finalState_r, currentState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         currentState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, newState >>

body_CallEnded(self) == /\ pc[self] = "body_CallEnded"
                        /\ TRUE
                        /\ pc' = [pc EXCEPT ![self] = "loop_CallEnded"]
                        /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                        finalState_, currentState_, newState_, 
                                        noChannel_, evtRecv_r, initialState_r, 
                                        finalState_r, currentState_r, 
                                        newState_r, noChannel_r, evtRecv_re, 
                                        initialState_re, finalState_re, 
                                        currentState_re, newState_re, 
                                        noChannel_re, evtRecv, initialState, 
                                        finalState, currentState, newState, 
                                        noChannel >>

loop_CallEnded(self) == /\ pc[self] = "loop_CallEnded"
                        /\ TRUE
                        /\ IF noChannel[self] = FALSE
                              THEN /\ pc' = [pc EXCEPT ![self] = "end_CallEnded"]
                                   /\ UNCHANGED evtRecv
                              ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                   /\ pc' = [pc EXCEPT ![self] = "Done"]
                        /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                        finalState_, currentState_, newState_, 
                                        noChannel_, evtRecv_r, initialState_r, 
                                        finalState_r, currentState_r, 
                                        newState_r, noChannel_r, evtRecv_re, 
                                        initialState_re, finalState_re, 
                                        currentState_re, newState_re, 
                                        noChannel_re, initialState, finalState, 
                                        currentState, newState, noChannel >>

end_CallEnded(self) == /\ pc[self] = "end_CallEnded"
                       /\ TRUE
                       /\ pc' = [pc EXCEPT ![self] = "R32"]
                       /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                       finalState_, currentState_, newState_, 
                                       noChannel_, evtRecv_r, initialState_r, 
                                       finalState_r, currentState_r, 
                                       newState_r, noChannel_r, evtRecv_re, 
                                       initialState_re, finalState_re, 
                                       currentState_re, newState_re, 
                                       noChannel_re, evtRecv, initialState, 
                                       finalState, currentState, newState, 
                                       noChannel >>

R32(self) == /\ pc[self] = "R32"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState[self], "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "Done"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, currentState_re, 
                             newState_re, noChannel_re, initialState, 
                             finalState, currentState, newState, noChannel >>

region_r4(self) == proc_body_idx_region_r4(self) \/ entry_AliceDial(self)
                      \/ body_AliceDial(self) \/ loop_AliceDial(self)
                      \/ R23(self) \/ T24(self) \/ S25(self)
                      \/ entry_AliceHangup(self) \/ body_AliceHangup(self)
                      \/ R26(self) \/ T27(self) \/ S28(self)
                      \/ entry_BobPickup(self) \/ body_BobPickup(self)
                      \/ R29(self) \/ T30(self) \/ S31(self)
                      \/ entry_CallEnded(self) \/ body_CallEnded(self)
                      \/ loop_CallEnded(self) \/ end_CallEnded(self)
                      \/ R32(self)

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == (\E self \in {idx_region_r3}: region_r3(self))
           \/ (\E self \in {idx_region_r20}: region_r20(self))
           \/ (\E self \in {idx_region_r42}: region_r42(self))
           \/ (\E self \in {idx_region_r4}: region_r4(self))
           \/ Terminating

Spec == /\ Init /\ [][Next]_vars
        /\ \A self \in {idx_region_r3} : SF_vars(region_r3(self))
        /\ \A self \in {idx_region_r20} : SF_vars(region_r20(self))
        /\ \A self \in {idx_region_r42} : SF_vars(region_r42(self))
        /\ \A self \in {idx_region_r4} : SF_vars(region_r4(self))

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION 



=======================================================================
