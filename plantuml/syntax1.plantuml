

@startuml

//
// Test we can parse all kinds of constructs
// 

//----------------------------------------------
// stufffor the skipper

// one line comment
/*
 multi line
 omment
 */

hide empty description

// unsupported:
//state "long state name" as ignored
//state "Idle mode" as Idle <<Warning>>

//state ignoredAgain as "long name" 

note left of active : this is a note
note left of active
  line
  line
end note

note as N1
  plantuml limitations:
  - state names must be unique
  - no explicit on entry/exit notation
  - cannot draw sending events between 
    states in different regions
end note

skinparam backgroundColor LightYellow

// unsupported: 
/*
skinparam state {
  StartColor MediumBlue
  EndColor Red
  BackgroundColor Peru
  BackgroundColor<<Warning>> Olive
  BorderColor Gray
  FontName Impact
}
*/

<style>
stateDiagram {
  BackgroundColor Peru
  'LineColor Gray
  FontName Impact
  FontColor Red
  arrow {
    FontSize 13
    LineColor Blue
  }
}
</style>

// unsupported:
///*
//json jsonJ {
//   "fruit":"Apple",
//   "size":"Large",
//   "color": ["Red", "Green"]
//}
//*/

//----------------------------------------------
// stuff for the state machine

Deploy -1down-> Operation : Event1 [((x==y) && (z!=1 || z!=2))] / Effect;
Deploy --> Operation  

state Operation #lightblue {

[*] -2down-> Operation_Launch

Operation_Launch -2down-> Operation_Auto_Monitor : EvtLaunch
--
[*] -3down-> Operation_BizData_Collection

Operation_BizData_Collection -3down-> Operation_BizData_Anylasis
||
[*] -4down-> Operation_Next_Preparation

  //state SubOperation {
  state "Some Long Stuff" as SubOperation #lightblue {
    [*] --> SubLaunch
    SubLaunch --> SubLaunchAutoMonitor : EvtSubLaunch
    SubLaunch: entry: send event:INVITE to state:Bob;
    SubLaunch: exit: send event:INVITE to state:Bob;
    SubLaunch: timeout: send event:INVITE to state:Bob;
    SubLaunch: precondition: ((x==y) && (z!=1 || z!=2));
    SubLaunch: postcondition: ((x==y) && (z!=1 || z!=2));
    SubLaunch: invariant: ((x==y) && (z!=1 || z!=2));
  }

}

Operation -5down-> [*]


state Switch {

Switch:localvar: bool _bummy = true;
Switch:globalvar: std::string _s;
globalvar: std::string _s;

[*] --> BothOff
BothOff: config: progressTag;
BothOff --> WallOff : LampSwitch [true]/ _bummy = false\; _dummy = 1\; trace foo bar baz\; ;
WallOff --> BothOff : LampSwitch

BothOff --> LampOff : WallSwitch
LampOff --> BothOff : WallSwitch

WallOff: config: progressTag;
WallOff --> On : WallSwitch
On --> WallOff : LampSwitch

LampOff: config: progressTag;
LampOff --> On : LampSwitch

On: config: progressTag;
On --> LampOff : WallSwitch

}

state HumanFlipSwitch {
HumanFlipSwitch: ltl: ltlLight {<>[](state:Switch:currentState == state:BothOff && lightOn == false) -> (state:Switch:currentState == state:On && lightOn == true) -> (state:Switch:currentState == state:BothOff && lightOn == false && state:Human:currentState == state:Done)};
HumanFlipSwitch: chanltl: qid!ack(S1,_)\; qid?nak(S2,1)\; ;

[*] --> Flip
Flip: config: noInboundEvents;
Flip --> Flip : NullEvent /send event:LampSwitch to state:Switch\; _dummy = 1\; ;
Flip --> Flip : NullEvent /send event:WallSwitch to state:Switch;
Flip: entry: send event:INVITE to state:Bob\; _dummy = 1\; ;

}

@enduml

