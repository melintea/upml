/*
./upml --in ../plantuml/hsm/hsm2.plantuml --backend tla --out ../plantuml/hsm/hsm2.tla 
*/
/*
   Generated by UPML v0.05
   Wed Dec 11 10:13:27 2024


    (F:'';L:1;C:1)
    machine hsm2 {
        (F:'';L:10;C:1)
        -- r10 {
            (F:'';L:10;C:1)
            state SuperSuper final:0;initial:1 {
                (F:'';L:12;C:3)
                -- r12 {
                    (F:'';L:12;C:3)
                    state Super1 final:0;initial:1 {
                        (F:'';L:33;C:3) Super1 --> Super2 T1[g,(,),]/trace,t1, (t33)
                        (F:'';L:13;C:7)
                        -- r13 {
                            (F:'';L:0;C:0)
                            state S11 final:0;initial:1 {
                                (F:'';L:17;C:7) S11:entry: trace,S11_entry, (a17)
                                (F:'';L:18;C:7) S11:exit: trace,S11_exit, (a18)
                            }
                            (F:'';L:0;C:0)
                            state Super1 final:0;initial:0 {
                                (F:'';L:14;C:7) Super1:entry: trace,Super1_entry, (a14)
                                (F:'';L:15;C:7) Super1:exit: trace,Super1_exit, (a15)
                            }
                        }
                    }
                    (F:'';L:21;C:3)
                    state Super2 final:0;initial:0 {
                        (F:'';L:22;C:7)
                        -- r22 {
                            (F:'';L:0;C:0)
                            state S21 final:0;initial:1 {
                                (F:'';L:26;C:7) S21:entry: trace,S21_entry, (a26)
                                (F:'';L:27;C:7) S21:exit: trace,S21_exit, (a27)
                            }
                            (F:'';L:0;C:0)
                            state Super2 final:0;initial:0 {
                                (F:'';L:23;C:7) Super2:entry: trace,Super2_entry, (a23)
                                (F:'';L:24;C:7) Super2:exit: trace,Super2_exit, (a24)
                            }
                        }
                    }
                    (F:'';L:0;C:0)
                    state SuperSuper final:0;initial:0 {
                        (F:'';L:31;C:3) SuperSuper:entry: trace,SuperSuper, (a31)
                    }
                }
            }
        }
    } hsm2

*/

---- MODULE hsm2 ----------------------------------------------------

EXTENDS TLC, Integers, Sequences

idx_Unknown == -1

idx_state_S11 == 1
idx_state_S21 == 2
idx_state_Super1 == 3
idx_state_Super2 == 4
idx_state_SuperSuper == 5

idx_region_r10 == 1
idx_region_r12 == 2
idx_region_r13 == 3
idx_region_r22 == 4

idx_event_NullEvent == 4
idx_event_SuperSuper == 9
idx_event_T1 == 10
idx_event_entry == 7
idx_event_exit == 8

(**********************************************************************

--algorithm hsm2 {

variables

    procs = { idx_region_r10, idx_region_r12, idx_region_r13, idx_region_r22 };
    channels = [p \in procs |-> <<>>];
    currentState = [p \in procs |-> idx_Unknown];
    stateTransitions = { "t33" };
    visitedTransitions = [t \in stateTransitions |-> FALSE];
    maxUmlEvents = -20;  \* limit the number of UML events in the run

\* Add to the Properties box of the model
define {
    \* Limit the number of UML events to maxUmlEvents; if reached this will show as a model run error
    MaxEventsReached == 
        /\ [](maxUmlEvents < 0)
    \* Flag dead transitions as errors
    AllTransitionsVisited == 
        /\ <>(\A t \in DOMAIN visitedTransitions : visitedTransitions[t] = TRUE)
    \* As extracted from the plantuml spec:
    UmlInvariants == 
        /\ [](TRUE) \* ensure not empty
    }; 


macro send_event(channel, evtId, fromState, toState) {
    print <<"P:", fromState, "o->", evtId, channel, " > P:", toState>>;
    channels[channel] := Append(@, evtId);
    maxUmlEvents := maxUmlEvents + 1;
}
macro recv_event(evtId, channel, inState) {
    await Len(channels[channel]) > 0;
    evtId := Head(channels[channel]);
    print <<"P:", channel, inState, "<-i", evtId>>;
    channels[channel] := Tail(@);
}

    

fair+ process (region_r10 \in {idx_region_r10}) \* hsm2
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_SuperSuper; 
    finalState = idx_Unknown; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body_idx_region_r10: currentState[self] := initialState;

\* state idx_state_SuperSuper[

entry_SuperSuper: skip;
    currentState[self] := newState;
    noChannel := TRUE;


body_SuperSuper: skip;
loop_SuperSuper: skip;
    if ( noChannel = FALSE ) {
        L1:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_SuperSuper

} \* region_r10 hsm2


fair+ process (region_r12 \in {idx_region_r12}) \* SuperSuper
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_Super1; 
    finalState = idx_Unknown; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body_idx_region_r12: currentState[self] := initialState;

\* state idx_state_Super1[

entry_Super1: skip;
    currentState[self] := newState;


body_Super1: skip;
loop_Super1: skip;
    if ( noChannel = FALSE ) {
        L2:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


    \* transitions idx_state_Super1[ 
    L3:
    \* either {

        \*     (F:'';L:33;C:3) Super1 --> Super2 T1[g,(,),]/trace,t1, (t33)
        await (evtRecv = idx_event_T1 /\ g());print <<"t1 ", "\n">>; 

        visitedTransitions["t33"] := TRUE;

        newState := idx_state_Super2; 
        goto entry_Super2;

    \* }; \* either
    \*]transitions idx_state_Super1

\*]state idx_state_Super1


\* state idx_state_Super2[

entry_Super2: skip;
    currentState[self] := newState;
    noChannel := TRUE;


body_Super2: skip;
    if ( noChannel = FALSE ) {
        L4:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_Super2


\* state idx_state_SuperSuper[

entry_SuperSuper: skip;
    currentState[self] := newState;
    noChannel := TRUE;

    \*     (F:'';L:31;C:3) SuperSuper:entry: trace,SuperSuper, (a31)
    print <<"SuperSuper ", "\n">>; 


body_SuperSuper: skip;
    if ( noChannel = FALSE ) {
        L5:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_SuperSuper

} \* region_r12 SuperSuper


fair+ process (region_r13 \in {idx_region_r13}) \* Super1
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_S11; 
    finalState = idx_Unknown; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body_idx_region_r13: currentState[self] := initialState;

\* state idx_state_S11[

entry_S11: skip;
    currentState[self] := newState;
    noChannel := TRUE;

    \*     (F:'';L:17;C:7) S11:entry: trace,S11_entry, (a17)
    print <<"S11_entry ", "\n">>; 


body_S11: skip;
loop_S11: skip;
    if ( noChannel = FALSE ) {
        L6:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_S11


\* state idx_state_Super1[

entry_Super1: skip;
    currentState[self] := newState;
    noChannel := TRUE;

    \*     (F:'';L:14;C:7) Super1:entry: trace,Super1_entry, (a14)
    print <<"Super1_entry ", "\n">>; 


body_Super1: skip;
    if ( noChannel = FALSE ) {
        L7:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_Super1

} \* region_r13 Super1


fair+ process (region_r22 \in {idx_region_r22}) \* Super2
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_S21; 
    finalState = idx_Unknown; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body_idx_region_r22: currentState[self] := initialState;

\* state idx_state_S21[

entry_S21: skip;
    currentState[self] := newState;
    noChannel := TRUE;

    \*     (F:'';L:26;C:7) S21:entry: trace,S21_entry, (a26)
    print <<"S21_entry ", "\n">>; 


body_S21: skip;
loop_S21: skip;
    if ( noChannel = FALSE ) {
        L8:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_S21


\* state idx_state_Super2[

entry_Super2: skip;
    currentState[self] := newState;
    noChannel := TRUE;

    \*     (F:'';L:23;C:7) Super2:entry: trace,Super2_entry, (a23)
    print <<"Super2_entry ", "\n">>; 


body_Super2: skip;
    if ( noChannel = FALSE ) {
        L9:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };


\*]state idx_state_Super2

} \* region_r22 Super2


} \* algorithm hsm2

**********************************************************************)
\* BEGIN TRANSLATION (chksum(pcal) = "98d4e714" /\ chksum(tla) = "291fcd32")
\* Label entry_SuperSuper of process region_r10 at line 137 col 19 changed to entry_SuperSuper_
\* Label body_SuperSuper of process region_r10 at line 142 col 18 changed to body_SuperSuper_
\* Label entry_Super1 of process region_r12 at line 168 col 15 changed to entry_Super1_
\* Label body_Super1 of process region_r12 at line 172 col 14 changed to body_Super1_
\* Label entry_Super2 of process region_r12 at line 201 col 15 changed to entry_Super2_
\* Label body_Super2 of process region_r12 at line 206 col 14 changed to body_Super2_
\* Process variable evtRecv of process region_r10 at line 127 col 5 changed to evtRecv_
\* Process variable initialState of process region_r10 at line 128 col 5 changed to initialState_
\* Process variable finalState of process region_r10 at line 129 col 5 changed to finalState_
\* Process variable newState of process region_r10 at line 130 col 5 changed to newState_
\* Process variable noChannel of process region_r10 at line 131 col 5 changed to noChannel_
\* Process variable evtRecv of process region_r12 at line 158 col 5 changed to evtRecv_r
\* Process variable initialState of process region_r12 at line 159 col 5 changed to initialState_r
\* Process variable finalState of process region_r12 at line 160 col 5 changed to finalState_r
\* Process variable newState of process region_r12 at line 161 col 5 changed to newState_r
\* Process variable noChannel of process region_r12 at line 162 col 5 changed to noChannel_r
\* Process variable evtRecv of process region_r13 at line 242 col 5 changed to evtRecv_re
\* Process variable initialState of process region_r13 at line 243 col 5 changed to initialState_re
\* Process variable finalState of process region_r13 at line 244 col 5 changed to finalState_re
\* Process variable newState of process region_r13 at line 245 col 5 changed to newState_re
\* Process variable noChannel of process region_r13 at line 246 col 5 changed to noChannel_re
VARIABLES procs, channels, currentState, stateTransitions, visitedTransitions, 
          maxUmlEvents, pc

(* define statement *)
MaxEventsReached ==
    /\ [](maxUmlEvents < 0)

AllTransitionsVisited ==
    /\ <>(\A t \in DOMAIN visitedTransitions : visitedTransitions[t] = TRUE)

UmlInvariants ==
    /\ [](TRUE)

VARIABLES evtRecv_, initialState_, finalState_, newState_, noChannel_, 
          evtRecv_r, initialState_r, finalState_r, newState_r, noChannel_r, 
          evtRecv_re, initialState_re, finalState_re, newState_re, 
          noChannel_re, evtRecv, initialState, finalState, newState, 
          noChannel

vars == << procs, channels, currentState, stateTransitions, 
           visitedTransitions, maxUmlEvents, pc, evtRecv_, initialState_, 
           finalState_, newState_, noChannel_, evtRecv_r, initialState_r, 
           finalState_r, newState_r, noChannel_r, evtRecv_re, initialState_re, 
           finalState_re, newState_re, noChannel_re, evtRecv, initialState, 
           finalState, newState, noChannel >>

ProcSet == ({idx_region_r10}) \cup ({idx_region_r12}) \cup ({idx_region_r13}) \cup ({idx_region_r22})

Init == (* Global variables *)
        /\ procs = { idx_region_r10, idx_region_r12, idx_region_r13, idx_region_r22 }
        /\ channels = [p \in procs |-> <<>>]
        /\ currentState = [p \in procs |-> idx_Unknown]
        /\ stateTransitions = { "t33" }
        /\ visitedTransitions = [t \in stateTransitions |-> FALSE]
        /\ maxUmlEvents = -20
        (* Process region_r10 *)
        /\ evtRecv_ = [self \in {idx_region_r10} |-> idx_Unknown]
        /\ initialState_ = [self \in {idx_region_r10} |-> idx_state_SuperSuper]
        /\ finalState_ = [self \in {idx_region_r10} |-> idx_Unknown]
        /\ newState_ = [self \in {idx_region_r10} |-> initialState_[self]]
        /\ noChannel_ = [self \in {idx_region_r10} |-> FALSE]
        (* Process region_r12 *)
        /\ evtRecv_r = [self \in {idx_region_r12} |-> idx_Unknown]
        /\ initialState_r = [self \in {idx_region_r12} |-> idx_state_Super1]
        /\ finalState_r = [self \in {idx_region_r12} |-> idx_Unknown]
        /\ newState_r = [self \in {idx_region_r12} |-> initialState_r[self]]
        /\ noChannel_r = [self \in {idx_region_r12} |-> FALSE]
        (* Process region_r13 *)
        /\ evtRecv_re = [self \in {idx_region_r13} |-> idx_Unknown]
        /\ initialState_re = [self \in {idx_region_r13} |-> idx_state_S11]
        /\ finalState_re = [self \in {idx_region_r13} |-> idx_Unknown]
        /\ newState_re = [self \in {idx_region_r13} |-> initialState_re[self]]
        /\ noChannel_re = [self \in {idx_region_r13} |-> FALSE]
        (* Process region_r22 *)
        /\ evtRecv = [self \in {idx_region_r22} |-> idx_Unknown]
        /\ initialState = [self \in {idx_region_r22} |-> idx_state_S21]
        /\ finalState = [self \in {idx_region_r22} |-> idx_Unknown]
        /\ newState = [self \in {idx_region_r22} |-> initialState[self]]
        /\ noChannel = [self \in {idx_region_r22} |-> FALSE]
        /\ pc = [self \in ProcSet |-> CASE self \in {idx_region_r10} -> "proc_body_idx_region_r10"
                                        [] self \in {idx_region_r12} -> "proc_body_idx_region_r12"
                                        [] self \in {idx_region_r13} -> "proc_body_idx_region_r13"
                                        [] self \in {idx_region_r22} -> "proc_body_idx_region_r22"]

proc_body_idx_region_r10(self) == /\ pc[self] = "proc_body_idx_region_r10"
                                  /\ currentState' = [currentState EXCEPT ![self] = initialState_[self]]
                                  /\ pc' = [pc EXCEPT ![self] = "entry_SuperSuper_"]
                                  /\ UNCHANGED << procs, channels, 
                                                  stateTransitions, 
                                                  visitedTransitions, 
                                                  maxUmlEvents, evtRecv_, 
                                                  initialState_, finalState_, 
                                                  newState_, noChannel_, 
                                                  evtRecv_r, initialState_r, 
                                                  finalState_r, newState_r, 
                                                  noChannel_r, evtRecv_re, 
                                                  initialState_re, 
                                                  finalState_re, newState_re, 
                                                  noChannel_re, evtRecv, 
                                                  initialState, finalState, 
                                                  newState, noChannel >>

entry_SuperSuper_(self) == /\ pc[self] = "entry_SuperSuper_"
                           /\ TRUE
                           /\ currentState' = [currentState EXCEPT ![self] = newState_[self]]
                           /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                           /\ pc' = [pc EXCEPT ![self] = "body_SuperSuper_"]
                           /\ UNCHANGED << procs, channels, stateTransitions, 
                                           visitedTransitions, maxUmlEvents, 
                                           evtRecv_, initialState_, 
                                           finalState_, newState_, evtRecv_r, 
                                           initialState_r, finalState_r, 
                                           newState_r, noChannel_r, evtRecv_re, 
                                           initialState_re, finalState_re, 
                                           newState_re, noChannel_re, evtRecv, 
                                           initialState, finalState, newState, 
                                           noChannel >>

body_SuperSuper_(self) == /\ pc[self] = "body_SuperSuper_"
                          /\ TRUE
                          /\ pc' = [pc EXCEPT ![self] = "loop_SuperSuper"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          stateTransitions, visitedTransitions, 
                                          maxUmlEvents, evtRecv_, 
                                          initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

loop_SuperSuper(self) == /\ pc[self] = "loop_SuperSuper"
                         /\ TRUE
                         /\ IF noChannel_[self] = FALSE
                               THEN /\ pc' = [pc EXCEPT ![self] = "L1"]
                                    /\ UNCHANGED evtRecv_
                               ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = idx_event_NullEvent]
                                    /\ pc' = [pc EXCEPT ![self] = "Done"]
                         /\ UNCHANGED << procs, channels, currentState, 
                                         stateTransitions, visitedTransitions, 
                                         maxUmlEvents, initialState_, 
                                         finalState_, newState_, noChannel_, 
                                         evtRecv_r, initialState_r, 
                                         finalState_r, newState_r, noChannel_r, 
                                         evtRecv_re, initialState_re, 
                                         finalState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, newState, noChannel >>

L1(self) == /\ pc[self] = "L1"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "Done"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, initialState_, 
                            finalState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

region_r10(self) == proc_body_idx_region_r10(self)
                       \/ entry_SuperSuper_(self) \/ body_SuperSuper_(self)
                       \/ loop_SuperSuper(self) \/ L1(self)

proc_body_idx_region_r12(self) == /\ pc[self] = "proc_body_idx_region_r12"
                                  /\ currentState' = [currentState EXCEPT ![self] = initialState_r[self]]
                                  /\ pc' = [pc EXCEPT ![self] = "entry_Super1_"]
                                  /\ UNCHANGED << procs, channels, 
                                                  stateTransitions, 
                                                  visitedTransitions, 
                                                  maxUmlEvents, evtRecv_, 
                                                  initialState_, finalState_, 
                                                  newState_, noChannel_, 
                                                  evtRecv_r, initialState_r, 
                                                  finalState_r, newState_r, 
                                                  noChannel_r, evtRecv_re, 
                                                  initialState_re, 
                                                  finalState_re, newState_re, 
                                                  noChannel_re, evtRecv, 
                                                  initialState, finalState, 
                                                  newState, noChannel >>

entry_Super1_(self) == /\ pc[self] = "entry_Super1_"
                       /\ TRUE
                       /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                       /\ pc' = [pc EXCEPT ![self] = "body_Super1_"]
                       /\ UNCHANGED << procs, channels, stateTransitions, 
                                       visitedTransitions, maxUmlEvents, 
                                       evtRecv_, initialState_, finalState_, 
                                       newState_, noChannel_, evtRecv_r, 
                                       initialState_r, finalState_r, 
                                       newState_r, noChannel_r, evtRecv_re, 
                                       initialState_re, finalState_re, 
                                       newState_re, noChannel_re, evtRecv, 
                                       initialState, finalState, newState, 
                                       noChannel >>

body_Super1_(self) == /\ pc[self] = "body_Super1_"
                      /\ TRUE
                      /\ pc' = [pc EXCEPT ![self] = "loop_Super1"]
                      /\ UNCHANGED << procs, channels, currentState, 
                                      stateTransitions, visitedTransitions, 
                                      maxUmlEvents, evtRecv_, initialState_, 
                                      finalState_, newState_, noChannel_, 
                                      evtRecv_r, initialState_r, finalState_r, 
                                      newState_r, noChannel_r, evtRecv_re, 
                                      initialState_re, finalState_re, 
                                      newState_re, noChannel_re, evtRecv, 
                                      initialState, finalState, newState, 
                                      noChannel >>

loop_Super1(self) == /\ pc[self] = "loop_Super1"
                     /\ TRUE
                     /\ IF noChannel_r[self] = FALSE
                           THEN /\ pc' = [pc EXCEPT ![self] = "L2"]
                                /\ UNCHANGED evtRecv_r
                           ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                /\ pc' = [pc EXCEPT ![self] = "L3"]
                     /\ UNCHANGED << procs, channels, currentState, 
                                     stateTransitions, visitedTransitions, 
                                     maxUmlEvents, evtRecv_, initialState_, 
                                     finalState_, newState_, noChannel_, 
                                     initialState_r, finalState_r, newState_r, 
                                     noChannel_r, evtRecv_re, initialState_re, 
                                     finalState_re, newState_re, noChannel_re, 
                                     evtRecv, initialState, finalState, 
                                     newState, noChannel >>

L2(self) == /\ pc[self] = "L2"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "L3"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

L3(self) == /\ pc[self] = "L3"
            /\ (evtRecv_r[self] = idx_event_T1 /\ g())
            /\ PrintT(<<"t1 ", "\n">>)
            /\ visitedTransitions' = [visitedTransitions EXCEPT !["t33"] = TRUE]
            /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_Super2]
            /\ pc' = [pc EXCEPT ![self] = "entry_Super2_"]
            /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                            maxUmlEvents, evtRecv_, initialState_, finalState_, 
                            newState_, noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, newState_re, 
                            noChannel_re, evtRecv, initialState, finalState, 
                            newState, noChannel >>

entry_Super2_(self) == /\ pc[self] = "entry_Super2_"
                       /\ TRUE
                       /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                       /\ noChannel_r' = [noChannel_r EXCEPT ![self] = TRUE]
                       /\ pc' = [pc EXCEPT ![self] = "body_Super2_"]
                       /\ UNCHANGED << procs, channels, stateTransitions, 
                                       visitedTransitions, maxUmlEvents, 
                                       evtRecv_, initialState_, finalState_, 
                                       newState_, noChannel_, evtRecv_r, 
                                       initialState_r, finalState_r, 
                                       newState_r, evtRecv_re, initialState_re, 
                                       finalState_re, newState_re, 
                                       noChannel_re, evtRecv, initialState, 
                                       finalState, newState, noChannel >>

body_Super2_(self) == /\ pc[self] = "body_Super2_"
                      /\ TRUE
                      /\ IF noChannel_r[self] = FALSE
                            THEN /\ pc' = [pc EXCEPT ![self] = "L4"]
                                 /\ UNCHANGED evtRecv_r
                            ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                 /\ pc' = [pc EXCEPT ![self] = "entry_SuperSuper"]
                      /\ UNCHANGED << procs, channels, currentState, 
                                      stateTransitions, visitedTransitions, 
                                      maxUmlEvents, evtRecv_, initialState_, 
                                      finalState_, newState_, noChannel_, 
                                      initialState_r, finalState_r, newState_r, 
                                      noChannel_r, evtRecv_re, initialState_re, 
                                      finalState_re, newState_re, noChannel_re, 
                                      evtRecv, initialState, finalState, 
                                      newState, noChannel >>

L4(self) == /\ pc[self] = "L4"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "entry_SuperSuper"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

entry_SuperSuper(self) == /\ pc[self] = "entry_SuperSuper"
                          /\ TRUE
                          /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                          /\ noChannel_r' = [noChannel_r EXCEPT ![self] = TRUE]
                          /\ PrintT(<<"SuperSuper ", "\n">>)
                          /\ pc' = [pc EXCEPT ![self] = "body_SuperSuper"]
                          /\ UNCHANGED << procs, channels, stateTransitions, 
                                          visitedTransitions, maxUmlEvents, 
                                          evtRecv_, initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

body_SuperSuper(self) == /\ pc[self] = "body_SuperSuper"
                         /\ TRUE
                         /\ IF noChannel_r[self] = FALSE
                               THEN /\ pc' = [pc EXCEPT ![self] = "L5"]
                                    /\ UNCHANGED evtRecv_r
                               ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                    /\ pc' = [pc EXCEPT ![self] = "Done"]
                         /\ UNCHANGED << procs, channels, currentState, 
                                         stateTransitions, visitedTransitions, 
                                         maxUmlEvents, evtRecv_, initialState_, 
                                         finalState_, newState_, noChannel_, 
                                         initialState_r, finalState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         newState_re, noChannel_re, evtRecv, 
                                         initialState, finalState, newState, 
                                         noChannel >>

L5(self) == /\ pc[self] = "L5"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "Done"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

region_r12(self) == proc_body_idx_region_r12(self) \/ entry_Super1_(self)
                       \/ body_Super1_(self) \/ loop_Super1(self)
                       \/ L2(self) \/ L3(self) \/ entry_Super2_(self)
                       \/ body_Super2_(self) \/ L4(self)
                       \/ entry_SuperSuper(self) \/ body_SuperSuper(self)
                       \/ L5(self)

proc_body_idx_region_r13(self) == /\ pc[self] = "proc_body_idx_region_r13"
                                  /\ currentState' = [currentState EXCEPT ![self] = initialState_re[self]]
                                  /\ pc' = [pc EXCEPT ![self] = "entry_S11"]
                                  /\ UNCHANGED << procs, channels, 
                                                  stateTransitions, 
                                                  visitedTransitions, 
                                                  maxUmlEvents, evtRecv_, 
                                                  initialState_, finalState_, 
                                                  newState_, noChannel_, 
                                                  evtRecv_r, initialState_r, 
                                                  finalState_r, newState_r, 
                                                  noChannel_r, evtRecv_re, 
                                                  initialState_re, 
                                                  finalState_re, newState_re, 
                                                  noChannel_re, evtRecv, 
                                                  initialState, finalState, 
                                                  newState, noChannel >>

entry_S11(self) == /\ pc[self] = "entry_S11"
                   /\ TRUE
                   /\ currentState' = [currentState EXCEPT ![self] = newState_re[self]]
                   /\ noChannel_re' = [noChannel_re EXCEPT ![self] = TRUE]
                   /\ PrintT(<<"S11_entry ", "\n">>)
                   /\ pc' = [pc EXCEPT ![self] = "body_S11"]
                   /\ UNCHANGED << procs, channels, stateTransitions, 
                                   visitedTransitions, maxUmlEvents, evtRecv_, 
                                   initialState_, finalState_, newState_, 
                                   noChannel_, evtRecv_r, initialState_r, 
                                   finalState_r, newState_r, noChannel_r, 
                                   evtRecv_re, initialState_re, finalState_re, 
                                   newState_re, evtRecv, initialState, 
                                   finalState, newState, noChannel >>

body_S11(self) == /\ pc[self] = "body_S11"
                  /\ TRUE
                  /\ pc' = [pc EXCEPT ![self] = "loop_S11"]
                  /\ UNCHANGED << procs, channels, currentState, 
                                  stateTransitions, visitedTransitions, 
                                  maxUmlEvents, evtRecv_, initialState_, 
                                  finalState_, newState_, noChannel_, 
                                  evtRecv_r, initialState_r, finalState_r, 
                                  newState_r, noChannel_r, evtRecv_re, 
                                  initialState_re, finalState_re, newState_re, 
                                  noChannel_re, evtRecv, initialState, 
                                  finalState, newState, noChannel >>

loop_S11(self) == /\ pc[self] = "loop_S11"
                  /\ TRUE
                  /\ IF noChannel_re[self] = FALSE
                        THEN /\ pc' = [pc EXCEPT ![self] = "L6"]
                             /\ UNCHANGED evtRecv_re
                        ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                             /\ pc' = [pc EXCEPT ![self] = "entry_Super1"]
                  /\ UNCHANGED << procs, channels, currentState, 
                                  stateTransitions, visitedTransitions, 
                                  maxUmlEvents, evtRecv_, initialState_, 
                                  finalState_, newState_, noChannel_, 
                                  evtRecv_r, initialState_r, finalState_r, 
                                  newState_r, noChannel_r, initialState_re, 
                                  finalState_re, newState_re, noChannel_re, 
                                  evtRecv, initialState, finalState, newState, 
                                  noChannel >>

L6(self) == /\ pc[self] = "L6"
            /\ Len(channels[self]) > 0
            /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_re'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "entry_Super1"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            evtRecv_r, initialState_r, finalState_r, 
                            newState_r, noChannel_r, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

entry_Super1(self) == /\ pc[self] = "entry_Super1"
                      /\ TRUE
                      /\ currentState' = [currentState EXCEPT ![self] = newState_re[self]]
                      /\ noChannel_re' = [noChannel_re EXCEPT ![self] = TRUE]
                      /\ PrintT(<<"Super1_entry ", "\n">>)
                      /\ pc' = [pc EXCEPT ![self] = "body_Super1"]
                      /\ UNCHANGED << procs, channels, stateTransitions, 
                                      visitedTransitions, maxUmlEvents, 
                                      evtRecv_, initialState_, finalState_, 
                                      newState_, noChannel_, evtRecv_r, 
                                      initialState_r, finalState_r, newState_r, 
                                      noChannel_r, evtRecv_re, initialState_re, 
                                      finalState_re, newState_re, evtRecv, 
                                      initialState, finalState, newState, 
                                      noChannel >>

body_Super1(self) == /\ pc[self] = "body_Super1"
                     /\ TRUE
                     /\ IF noChannel_re[self] = FALSE
                           THEN /\ pc' = [pc EXCEPT ![self] = "L7"]
                                /\ UNCHANGED evtRecv_re
                           ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                                /\ pc' = [pc EXCEPT ![self] = "Done"]
                     /\ UNCHANGED << procs, channels, currentState, 
                                     stateTransitions, visitedTransitions, 
                                     maxUmlEvents, evtRecv_, initialState_, 
                                     finalState_, newState_, noChannel_, 
                                     evtRecv_r, initialState_r, finalState_r, 
                                     newState_r, noChannel_r, initialState_re, 
                                     finalState_re, newState_re, noChannel_re, 
                                     evtRecv, initialState, finalState, 
                                     newState, noChannel >>

L7(self) == /\ pc[self] = "L7"
            /\ Len(channels[self]) > 0
            /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_re'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "Done"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            evtRecv_r, initialState_r, finalState_r, 
                            newState_r, noChannel_r, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

region_r13(self) == proc_body_idx_region_r13(self) \/ entry_S11(self)
                       \/ body_S11(self) \/ loop_S11(self) \/ L6(self)
                       \/ entry_Super1(self) \/ body_Super1(self)
                       \/ L7(self)

proc_body_idx_region_r22(self) == /\ pc[self] = "proc_body_idx_region_r22"
                                  /\ currentState' = [currentState EXCEPT ![self] = initialState[self]]
                                  /\ pc' = [pc EXCEPT ![self] = "entry_S21"]
                                  /\ UNCHANGED << procs, channels, 
                                                  stateTransitions, 
                                                  visitedTransitions, 
                                                  maxUmlEvents, evtRecv_, 
                                                  initialState_, finalState_, 
                                                  newState_, noChannel_, 
                                                  evtRecv_r, initialState_r, 
                                                  finalState_r, newState_r, 
                                                  noChannel_r, evtRecv_re, 
                                                  initialState_re, 
                                                  finalState_re, newState_re, 
                                                  noChannel_re, evtRecv, 
                                                  initialState, finalState, 
                                                  newState, noChannel >>

entry_S21(self) == /\ pc[self] = "entry_S21"
                   /\ TRUE
                   /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                   /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                   /\ PrintT(<<"S21_entry ", "\n">>)
                   /\ pc' = [pc EXCEPT ![self] = "body_S21"]
                   /\ UNCHANGED << procs, channels, stateTransitions, 
                                   visitedTransitions, maxUmlEvents, evtRecv_, 
                                   initialState_, finalState_, newState_, 
                                   noChannel_, evtRecv_r, initialState_r, 
                                   finalState_r, newState_r, noChannel_r, 
                                   evtRecv_re, initialState_re, finalState_re, 
                                   newState_re, noChannel_re, evtRecv, 
                                   initialState, finalState, newState >>

body_S21(self) == /\ pc[self] = "body_S21"
                  /\ TRUE
                  /\ pc' = [pc EXCEPT ![self] = "loop_S21"]
                  /\ UNCHANGED << procs, channels, currentState, 
                                  stateTransitions, visitedTransitions, 
                                  maxUmlEvents, evtRecv_, initialState_, 
                                  finalState_, newState_, noChannel_, 
                                  evtRecv_r, initialState_r, finalState_r, 
                                  newState_r, noChannel_r, evtRecv_re, 
                                  initialState_re, finalState_re, newState_re, 
                                  noChannel_re, evtRecv, initialState, 
                                  finalState, newState, noChannel >>

loop_S21(self) == /\ pc[self] = "loop_S21"
                  /\ TRUE
                  /\ IF noChannel[self] = FALSE
                        THEN /\ pc' = [pc EXCEPT ![self] = "L8"]
                             /\ UNCHANGED evtRecv
                        ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                             /\ pc' = [pc EXCEPT ![self] = "entry_Super2"]
                  /\ UNCHANGED << procs, channels, currentState, 
                                  stateTransitions, visitedTransitions, 
                                  maxUmlEvents, evtRecv_, initialState_, 
                                  finalState_, newState_, noChannel_, 
                                  evtRecv_r, initialState_r, finalState_r, 
                                  newState_r, noChannel_r, evtRecv_re, 
                                  initialState_re, finalState_re, newState_re, 
                                  noChannel_re, initialState, finalState, 
                                  newState, noChannel >>

L8(self) == /\ pc[self] = "L8"
            /\ Len(channels[self]) > 0
            /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "entry_Super2"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            evtRecv_r, initialState_r, finalState_r, 
                            newState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, newState_re, 
                            noChannel_re, initialState, finalState, newState, 
                            noChannel >>

entry_Super2(self) == /\ pc[self] = "entry_Super2"
                      /\ TRUE
                      /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                      /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                      /\ PrintT(<<"Super2_entry ", "\n">>)
                      /\ pc' = [pc EXCEPT ![self] = "body_Super2"]
                      /\ UNCHANGED << procs, channels, stateTransitions, 
                                      visitedTransitions, maxUmlEvents, 
                                      evtRecv_, initialState_, finalState_, 
                                      newState_, noChannel_, evtRecv_r, 
                                      initialState_r, finalState_r, newState_r, 
                                      noChannel_r, evtRecv_re, initialState_re, 
                                      finalState_re, newState_re, noChannel_re, 
                                      evtRecv, initialState, finalState, 
                                      newState >>

body_Super2(self) == /\ pc[self] = "body_Super2"
                     /\ TRUE
                     /\ IF noChannel[self] = FALSE
                           THEN /\ pc' = [pc EXCEPT ![self] = "L9"]
                                /\ UNCHANGED evtRecv
                           ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                /\ pc' = [pc EXCEPT ![self] = "Done"]
                     /\ UNCHANGED << procs, channels, currentState, 
                                     stateTransitions, visitedTransitions, 
                                     maxUmlEvents, evtRecv_, initialState_, 
                                     finalState_, newState_, noChannel_, 
                                     evtRecv_r, initialState_r, finalState_r, 
                                     newState_r, noChannel_r, evtRecv_re, 
                                     initialState_re, finalState_re, 
                                     newState_re, noChannel_re, initialState, 
                                     finalState, newState, noChannel >>

L9(self) == /\ pc[self] = "L9"
            /\ Len(channels[self]) > 0
            /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "Done"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            evtRecv_r, initialState_r, finalState_r, 
                            newState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, newState_re, 
                            noChannel_re, initialState, finalState, newState, 
                            noChannel >>

region_r22(self) == proc_body_idx_region_r22(self) \/ entry_S21(self)
                       \/ body_S21(self) \/ loop_S21(self) \/ L8(self)
                       \/ entry_Super2(self) \/ body_Super2(self)
                       \/ L9(self)

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == (\E self \in {idx_region_r10}: region_r10(self))
           \/ (\E self \in {idx_region_r12}: region_r12(self))
           \/ (\E self \in {idx_region_r13}: region_r13(self))
           \/ (\E self \in {idx_region_r22}: region_r22(self))
           \/ Terminating

Spec == /\ Init /\ [][Next]_vars
        /\ \A self \in {idx_region_r10} : SF_vars(region_r10(self))
        /\ \A self \in {idx_region_r12} : SF_vars(region_r12(self))
        /\ \A self \in {idx_region_r13} : SF_vars(region_r13(self))
        /\ \A self \in {idx_region_r22} : SF_vars(region_r22(self))

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION 



=======================================================================
