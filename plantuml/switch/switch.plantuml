@startuml

note as N1
  A lamp controlled by a wall switch
  and a lamp switch. Both must be on
  for the lamp to be on.

  plantuml limitations:
  - state names must be unique
  - no explicit on entry/exit notation
  - cannot draw sending events between 
    states in different regions
end note



state Human {

[*] --> TurnLightOn
TurnLightOn: config: noInboundEvents;
TurnLightOn --> TurnLightOff : NullEvent /send event:LampSwitch to state:Switch\; send event:WallSwitch to state:Switch\; ;
TurnLightOn --> TurnLightOff : NullEvent /send event:WallSwitch to state:Switch\; send event:LampSwitch to state:Switch\; ;

TurnLightOff: config: noInboundEvents;
TurnLightOff --> Done : NullEvent /send event:LampSwitch to state:Switch\; send event:WallSwitch to state:Switch\; ;
TurnLightOff --> Done : NullEvent /send event:WallSwitch to state:Switch\; send event:LampSwitch to state:Switch\; ;

Done --> [*]

Human: ltl: ltlLight {<>[](state:Switch:currentState == state:BothOff && lightOn == false) -> (state:Switch:currentState == state:On && lightOn == true) -> (state:Switch:currentState == state:BothOff && lightOn == false && state:Human:currentState == state:Done)};
}



state Switch {

Switch: globalvar: bool lightOn = false;

[*] --> BothOff
BothOff: config: progressTag;
BothOff --> WallOff : LampSwitch
BothOff --> LampOff : WallSwitch
BothOff --> [*]

WallOff: config: progressTag;
WallOff --> On : WallSwitch
WallOff --> BothOff : LampSwitch

LampOff --> BothOff : WallSwitch
LampOff --> On : LampSwitch
LampOff: config: progressTag;

On --> WallOff : WallSwitch
On --> LampOff : LampSwitch
On: config: progressTag;
On:entry: lightOn = true;
On:exit: lightOn = false;

}

@enduml

