/*
/home/amelinte/work/github/upml/src/upml --in /home/amelinte/work/github/upml/plantuml/switch/switch.plantuml --backend tla --out ../plantuml/switch/switch.tla 
*/
/*
   Generated by UPML v0.07
   Sat Apr  5 07:42:59 2025


    (F:'';L:1;C:1)
    machine switch {
        (F:'';L:17;C:1)
        -- r17 _ownedByState:m1 {
            (F:'';L:17;C:1)
            state Human final:0;initial:0;_superState:m1;_ownedByRegion:r17 {
                (F:'';L:30;C:1) Human:ltl: ltlLight,{,<>,[],(,state:Switch:currentState,==,state:BothOff,&&,lightOn,==,false,),->,(,state:Switch:currentState,==,state:On,&&,lightOn,==,true,),->,(,state:Switch:currentState,==,state:BothOff,&&,lightOn,==,false,&&,state:Human:currentState,==,state:Done,),}, (a30)
                (F:'';L:19;C:1)
                -- r19 _ownedByState:Human {
                    (F:'';L:0;C:0)
                    state Done final:1;initial:0;_superState:Human;_ownedByRegion:r19 {
                    } Done
                    (F:'';L:0;C:0)
                    state TurnLightOff final:0;initial:0;_superState:Human;_ownedByRegion:r19 {
                        (F:'';L:25;C:1) TurnLightOff --> Done NullEvent[]/send,event:LampSwitch,to,state:Switch,;,send,event:WallSwitch,to,state:Switch,;, (t25)
                        (F:'';L:26;C:1) TurnLightOff --> Done NullEvent[]/send,event:WallSwitch,to,state:Switch,;,send,event:LampSwitch,to,state:Switch,;, (t26)
                        noInboundEvents,
                    } TurnLightOff
                    (F:'';L:0;C:0)
                    state TurnLightOn final:0;initial:1;_superState:Human;_ownedByRegion:r19 {
                        (F:'';L:21;C:1) TurnLightOn --> TurnLightOff NullEvent[]/send,event:LampSwitch,to,state:Switch,;,send,event:WallSwitch,to,state:Switch,;, (t21)
                        (F:'';L:22;C:1) TurnLightOn --> TurnLightOff NullEvent[]/send,event:WallSwitch,to,state:Switch,;,send,event:LampSwitch,to,state:Switch,;, (t22)
                        noInboundEvents,
                    } TurnLightOn
                } r19
            } Human
            (F:'';L:35;C:1)
            state Switch final:0;initial:0;_superState:m1;_ownedByRegion:r17 {
                (F:'';L:37;C:1) Switch:globalvar: bool,lightOn,=,false, (a37)
                (F:'';L:37;C:1)
                -- r37 _ownedByState:Switch {
                    (F:'';L:0;C:0)
                    state BothOff final:1;initial:1;_superState:Switch;_ownedByRegion:r37 {
                        (F:'';L:41;C:1) BothOff --> WallOff LampSwitch[]/ (t41)
                        (F:'';L:42;C:1) BothOff --> LampOff WallSwitch[]/ (t42)
                        progressTag,
                    } BothOff
                    (F:'';L:0;C:0)
                    state LampOff final:0;initial:0;_superState:Switch;_ownedByRegion:r37 {
                        (F:'';L:49;C:1) LampOff --> BothOff WallSwitch[]/ (t49)
                        (F:'';L:50;C:1) LampOff --> On LampSwitch[]/ (t50)
                        progressTag,
                    } LampOff
                    (F:'';L:0;C:0)
                    state On final:0;initial:0;_superState:Switch;_ownedByRegion:r37 {
                        (F:'';L:53;C:1) On --> WallOff WallSwitch[]/ (t53)
                        (F:'';L:54;C:1) On --> LampOff LampSwitch[]/ (t54)
                        (F:'';L:56;C:1) On:entry: lightOn,=,true, (a56)
                        (F:'';L:57;C:1) On:exit: lightOn,=,false, (a57)
                        progressTag,
                    } On
                    (F:'';L:0;C:0)
                    state WallOff final:0;initial:0;_superState:Switch;_ownedByRegion:r37 {
                        (F:'';L:46;C:1) WallOff --> On WallSwitch[]/ (t46)
                        (F:'';L:47;C:1) WallOff --> BothOff LampSwitch[]/ (t47)
                        progressTag,
                    } WallOff
                } r37
            } Switch
        } r17
    } switch
    
*/

---- MODULE switch ----------------------------------------------------

EXTENDS TLC, Integers, Sequences

idx_Unknown == -1

idx_state_BothOff == 1
idx_state_Done == 2
idx_state_Human == 3
idx_state_LampOff == 4
idx_state_On == 5
idx_state_Switch == 6
idx_state_TurnLightOff == 7
idx_state_TurnLightOn == 8
idx_state_WallOff == 9

idx_region_r17 == 1
idx_region_r19 == 2
idx_region_r37 == 3

idx_event_EnterState == 1
idx_event_ExitState == 2
idx_event_LampSwitch == 3
idx_event_NullEvent == 4
idx_event_WallSwitch == 5

(**********************************************************************

--algorithm switch {

variables
    
    procs = { idx_region_r17, idx_region_r19, idx_region_r37 };
    channels = [p \in procs |-> <<>>];
    currentState = [p \in procs |-> idx_Unknown]; 
    
    \*     (F:'';L:37;C:1) Switch:globalvar: bool,lightOn,=,false, (a37)
    lightOn=FALSE;
    
    stateTransitions = { "t25", "t26", "t21", "t22", "t41", "t42", "t49", "t50", "t53", "t54", "t46", "t47" };
    visitedTransitions = [t \in stateTransitions |-> FALSE];
    maxUmlEvents = -20;  \* limit the number of UML events in the run

\* Add to the Properties box of the model
define {
    \* Limit the number of UML events to maxUmlEvents; if reached this will show as a model run error
    MaxEventsReached == 
        /\ [](maxUmlEvents < 0)
    \* Flag dead transitions as errors
    AllTransitionsVisited == 
        /\ <>(\A t \in DOMAIN visitedTransitions : visitedTransitions[t] = TRUE)
    \* As extracted from the plantuml spec:
    UmlInvariants == 
        /\ [](TRUE) \* ensure not empty
        
}; \* define 


macro send_event(channel, evtId, fromState, toState) {
    print <<"P:", fromState, "o->", evtId, channel, " > P:", toState>>;
    channels[channel] := Append(@, evtId);
    maxUmlEvents := maxUmlEvents + 1;
}
macro recv_event(evtId, channel, inState) {
    await Len(channels[channel]) > 0;
    evtId := Head(channels[channel]);
    print <<"P:", channel, inState, "<-i", evtId>>;
    channels[channel] := Tail(@);
}

    

fair+ process (region_r17 \in {idx_region_r17}) \* switch
variables
    evtRecv = idx_Unknown; 
    initialState = idx_Unknown; 
    finalState = idx_Unknown; 
    newState = initialState; 
    noChannel = FALSE; 
    
{
proc_body_idx_region_r17: currentState[self] := initialState;

\* state idx_state_Human[

entry_Human: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_Human: skip;    
    if ( noChannel = FALSE ) { 
        L1:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
\*]state idx_state_Human


\* state idx_state_Switch[

entry_Switch: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_Switch: skip;    
    if ( noChannel = FALSE ) { 
        L2:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
\*]state idx_state_Switch

} \* region_r17 switch


fair+ process (region_r19 \in {idx_region_r19}) \* Human
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_TurnLightOn; 
    finalState = idx_state_Done; 
    newState = initialState; 
    noChannel = FALSE; 
    
{
proc_body_idx_region_r19: currentState[self] := initialState;

\* state idx_state_TurnLightOn[

entry_TurnLightOn: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_TurnLightOn: skip;
loop_TurnLightOn: skip;    
    if ( noChannel = FALSE ) { 
        L3:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_TurnLightOn[ 
    L4:
    either {    
        
        \*     (F:'';L:21;C:1) TurnLightOn --> TurnLightOff NullEvent[]/send,event:LampSwitch,to,state:Switch,;,send,event:WallSwitch,to,state:Switch,;, (t21)
        await (evtRecv = idx_event_NullEvent);
        \*     (F:'';L:0;C:0) idx_state_TurnLightOn:send: send,event:LampSwitch,to,state:Switch,;,send,event:WallSwitch,to,state:Switch,;, (a21)
        L5:send_event(idx_region_r37, idx_event_LampSwitch, idx_state_TurnLightOn, idx_state_Switch); 
        L6:send_event(idx_region_r37, idx_event_WallSwitch, idx_state_TurnLightOn, idx_state_Switch); 
        
        visitedTransitions["t21"] := TRUE;
        
        newState := idx_state_TurnLightOff; 
        goto entry_TurnLightOff;
        
    } or {    
        
        \*     (F:'';L:22;C:1) TurnLightOn --> TurnLightOff NullEvent[]/send,event:WallSwitch,to,state:Switch,;,send,event:LampSwitch,to,state:Switch,;, (t22)
        await (evtRecv = idx_event_NullEvent);
        \*     (F:'';L:0;C:0) idx_state_TurnLightOn:send: send,event:WallSwitch,to,state:Switch,;,send,event:LampSwitch,to,state:Switch,;, (a22)
        L7:send_event(idx_region_r37, idx_event_WallSwitch, idx_state_TurnLightOn, idx_state_Switch); 
        L8:send_event(idx_region_r37, idx_event_LampSwitch, idx_state_TurnLightOn, idx_state_Switch); 
        
        visitedTransitions["t22"] := TRUE;
        
        newState := idx_state_TurnLightOff; 
        goto entry_TurnLightOff;
        
    }; \* either
    \*]transitions idx_state_TurnLightOn
    
\*]state idx_state_TurnLightOn


\* state idx_state_TurnLightOff[

entry_TurnLightOff: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_TurnLightOff: skip;    
    if ( noChannel = FALSE ) { 
        L9:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_TurnLightOff[ 
    L10:
    either {    
        
        \*     (F:'';L:25;C:1) TurnLightOff --> Done NullEvent[]/send,event:LampSwitch,to,state:Switch,;,send,event:WallSwitch,to,state:Switch,;, (t25)
        await (evtRecv = idx_event_NullEvent);
        \*     (F:'';L:0;C:0) idx_state_TurnLightOff:send: send,event:LampSwitch,to,state:Switch,;,send,event:WallSwitch,to,state:Switch,;, (a25)
        L11:send_event(idx_region_r37, idx_event_LampSwitch, idx_state_TurnLightOff, idx_state_Switch); 
        L12:send_event(idx_region_r37, idx_event_WallSwitch, idx_state_TurnLightOff, idx_state_Switch); 
        
        visitedTransitions["t25"] := TRUE;
        
        newState := idx_state_Done; 
        goto entry_Done;
        
    } or {    
        
        \*     (F:'';L:26;C:1) TurnLightOff --> Done NullEvent[]/send,event:WallSwitch,to,state:Switch,;,send,event:LampSwitch,to,state:Switch,;, (t26)
        await (evtRecv = idx_event_NullEvent);
        \*     (F:'';L:0;C:0) idx_state_TurnLightOff:send: send,event:WallSwitch,to,state:Switch,;,send,event:LampSwitch,to,state:Switch,;, (a26)
        L13:send_event(idx_region_r37, idx_event_WallSwitch, idx_state_TurnLightOff, idx_state_Switch); 
        L14:send_event(idx_region_r37, idx_event_LampSwitch, idx_state_TurnLightOff, idx_state_Switch); 
        
        visitedTransitions["t26"] := TRUE;
        
        newState := idx_state_Done; 
        goto entry_Done;
        
    }; \* either
    \*]transitions idx_state_TurnLightOff
    
\*]state idx_state_TurnLightOff


\* state idx_state_Done[

entry_Done: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_Done: skip;
loop_Done: skip;    
    if ( noChannel = FALSE ) { end_Done: skip;
        L15:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
\*]state idx_state_Done

} \* region_r19 Human


fair+ process (region_r37 \in {idx_region_r37}) \* Switch
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_BothOff; 
    finalState = idx_state_BothOff; 
    newState = initialState; 
    noChannel = FALSE; 
    
{
proc_body_idx_region_r37: currentState[self] := initialState;

\* state idx_state_BothOff[

entry_BothOff: skip;    
    currentState[self] := newState;
    

body_BothOff: skip;
loop_BothOff: skip;
progress_BothOff: skip;    
    if ( noChannel = FALSE ) { end_BothOff: skip;
        L16:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_BothOff[ 
    L17:
    either {    
        
        \*     (F:'';L:41;C:1) BothOff --> WallOff LampSwitch[]/ (t41)
        await (evtRecv = idx_event_LampSwitch);
        visitedTransitions["t41"] := TRUE;
        
        newState := idx_state_WallOff; 
        goto entry_WallOff;
        
    } or {    
        
        \*     (F:'';L:42;C:1) BothOff --> LampOff WallSwitch[]/ (t42)
        await (evtRecv = idx_event_WallSwitch);
        visitedTransitions["t42"] := TRUE;
        
        newState := idx_state_LampOff; 
        goto entry_LampOff;
        
    }; \* either
    \*]transitions idx_state_BothOff
    
\*]state idx_state_BothOff


\* state idx_state_LampOff[

entry_LampOff: skip;    
    currentState[self] := newState;
    

body_LampOff: skip;
progress_LampOff: skip;    
    if ( noChannel = FALSE ) { 
        L18:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_LampOff[ 
    L19:
    either {    
        
        \*     (F:'';L:49;C:1) LampOff --> BothOff WallSwitch[]/ (t49)
        await (evtRecv = idx_event_WallSwitch);
        visitedTransitions["t49"] := TRUE;
        
        newState := idx_state_BothOff; 
        goto entry_BothOff;
        
    } or {    
        
        \*     (F:'';L:50;C:1) LampOff --> On LampSwitch[]/ (t50)
        await (evtRecv = idx_event_LampSwitch);
        visitedTransitions["t50"] := TRUE;
        
        newState := idx_state_On; 
        goto entry_On;
        
    }; \* either
    \*]transitions idx_state_LampOff
    
\*]state idx_state_LampOff


\* state idx_state_On[

entry_On: skip;    
    currentState[self] := newState;
    
    \*     (F:'';L:56;C:1) On:entry: lightOn,=,true, (a56)
    lightOn := TRUE ;
    

body_On: skip;
progress_On: skip;    
    if ( noChannel = FALSE ) { 
        L20:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_On[ 
    L21:
    either {    
        
        \*     (F:'';L:53;C:1) On --> WallOff WallSwitch[]/ (t53)
        await (evtRecv = idx_event_WallSwitch);
        visitedTransitions["t53"] := TRUE;
        
        \*     (F:'';L:57;C:1) On:exit: lightOn,=,false, (a57)
        lightOn := FALSE ;
        
        newState := idx_state_WallOff; 
        goto entry_WallOff;
        
    } or {    
        
        \*     (F:'';L:54;C:1) On --> LampOff LampSwitch[]/ (t54)
        await (evtRecv = idx_event_LampSwitch);
        visitedTransitions["t54"] := TRUE;
        
        \*     (F:'';L:57;C:1) On:exit: lightOn,=,false, (a57)
        lightOn := FALSE ;
        
        newState := idx_state_LampOff; 
        goto entry_LampOff;
        
    }; \* either
    \*]transitions idx_state_On
    
\*]state idx_state_On


\* state idx_state_WallOff[

entry_WallOff: skip;    
    currentState[self] := newState;
    

body_WallOff: skip;
progress_WallOff: skip;    
    if ( noChannel = FALSE ) { 
        L22:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_WallOff[ 
    L23:
    either {    
        
        \*     (F:'';L:46;C:1) WallOff --> On WallSwitch[]/ (t46)
        await (evtRecv = idx_event_WallSwitch);
        visitedTransitions["t46"] := TRUE;
        
        newState := idx_state_On; 
        goto entry_On;
        
    } or {    
        
        \*     (F:'';L:47;C:1) WallOff --> BothOff LampSwitch[]/ (t47)
        await (evtRecv = idx_event_LampSwitch);
        visitedTransitions["t47"] := TRUE;
        
        newState := idx_state_BothOff; 
        goto entry_BothOff;
        
    }; \* either
    \*]transitions idx_state_WallOff
    
\*]state idx_state_WallOff

} \* region_r37 Switch


} \* algorithm switch

**********************************************************************)
\* BEGIN TRANSLATION (chksum(pcal) = "bb2f37ee" /\ chksum(tla) = "7cb4710a")
\* Process variable evtRecv of process region_r17 at line 147 col 5 changed to evtRecv_
\* Process variable initialState of process region_r17 at line 148 col 5 changed to initialState_
\* Process variable finalState of process region_r17 at line 149 col 5 changed to finalState_
\* Process variable newState of process region_r17 at line 150 col 5 changed to newState_
\* Process variable noChannel of process region_r17 at line 151 col 5 changed to noChannel_
\* Process variable evtRecv of process region_r19 at line 196 col 5 changed to evtRecv_r
\* Process variable initialState of process region_r19 at line 197 col 5 changed to initialState_r
\* Process variable finalState of process region_r19 at line 198 col 5 changed to finalState_r
\* Process variable newState of process region_r19 at line 199 col 5 changed to newState_r
\* Process variable noChannel of process region_r19 at line 200 col 5 changed to noChannel_r
VARIABLES procs, channels, currentState, lightOn, stateTransitions, 
          visitedTransitions, maxUmlEvents, pc

(* define statement *)
MaxEventsReached ==
    /\ [](maxUmlEvents < 0)

AllTransitionsVisited ==
    /\ <>(\A t \in DOMAIN visitedTransitions : visitedTransitions[t] = TRUE)

UmlInvariants ==
    /\ [](TRUE)

VARIABLES evtRecv_, initialState_, finalState_, newState_, noChannel_, 
          evtRecv_r, initialState_r, finalState_r, newState_r, noChannel_r, 
          evtRecv, initialState, finalState, newState, noChannel

vars == << procs, channels, currentState, lightOn, stateTransitions, 
           visitedTransitions, maxUmlEvents, pc, evtRecv_, initialState_, 
           finalState_, newState_, noChannel_, evtRecv_r, initialState_r, 
           finalState_r, newState_r, noChannel_r, evtRecv, initialState, 
           finalState, newState, noChannel >>

ProcSet == ({idx_region_r17}) \cup ({idx_region_r19}) \cup ({idx_region_r37})

Init == (* Global variables *)
        /\ procs = { idx_region_r17, idx_region_r19, idx_region_r37 }
        /\ channels = [p \in procs |-> <<>>]
        /\ currentState = [p \in procs |-> idx_Unknown]
        /\ lightOn = FALSE
        /\ stateTransitions = { "t25", "t26", "t21", "t22", "t41", "t42", "t49", "t50", "t53", "t54", "t46", "t47" }
        /\ visitedTransitions = [t \in stateTransitions |-> FALSE]
        /\ maxUmlEvents = -20
        (* Process region_r17 *)
        /\ evtRecv_ = [self \in {idx_region_r17} |-> idx_Unknown]
        /\ initialState_ = [self \in {idx_region_r17} |-> idx_Unknown]
        /\ finalState_ = [self \in {idx_region_r17} |-> idx_Unknown]
        /\ newState_ = [self \in {idx_region_r17} |-> initialState_[self]]
        /\ noChannel_ = [self \in {idx_region_r17} |-> FALSE]
        (* Process region_r19 *)
        /\ evtRecv_r = [self \in {idx_region_r19} |-> idx_Unknown]
        /\ initialState_r = [self \in {idx_region_r19} |-> idx_state_TurnLightOn]
        /\ finalState_r = [self \in {idx_region_r19} |-> idx_state_Done]
        /\ newState_r = [self \in {idx_region_r19} |-> initialState_r[self]]
        /\ noChannel_r = [self \in {idx_region_r19} |-> FALSE]
        (* Process region_r37 *)
        /\ evtRecv = [self \in {idx_region_r37} |-> idx_Unknown]
        /\ initialState = [self \in {idx_region_r37} |-> idx_state_BothOff]
        /\ finalState = [self \in {idx_region_r37} |-> idx_state_BothOff]
        /\ newState = [self \in {idx_region_r37} |-> initialState[self]]
        /\ noChannel = [self \in {idx_region_r37} |-> FALSE]
        /\ pc = [self \in ProcSet |-> CASE self \in {idx_region_r17} -> "proc_body_idx_region_r17"
                                        [] self \in {idx_region_r19} -> "proc_body_idx_region_r19"
                                        [] self \in {idx_region_r37} -> "proc_body_idx_region_r37"]

proc_body_idx_region_r17(self) == /\ pc[self] = "proc_body_idx_region_r17"
                                  /\ currentState' = [currentState EXCEPT ![self] = initialState_[self]]
                                  /\ pc' = [pc EXCEPT ![self] = "entry_Human"]
                                  /\ UNCHANGED << procs, channels, lightOn, 
                                                  stateTransitions, 
                                                  visitedTransitions, 
                                                  maxUmlEvents, evtRecv_, 
                                                  initialState_, finalState_, 
                                                  newState_, noChannel_, 
                                                  evtRecv_r, initialState_r, 
                                                  finalState_r, newState_r, 
                                                  noChannel_r, evtRecv, 
                                                  initialState, finalState, 
                                                  newState, noChannel >>

entry_Human(self) == /\ pc[self] = "entry_Human"
                     /\ TRUE
                     /\ currentState' = [currentState EXCEPT ![self] = newState_[self]]
                     /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                     /\ pc' = [pc EXCEPT ![self] = "body_Human"]
                     /\ UNCHANGED << procs, channels, lightOn, 
                                     stateTransitions, visitedTransitions, 
                                     maxUmlEvents, evtRecv_, initialState_, 
                                     finalState_, newState_, evtRecv_r, 
                                     initialState_r, finalState_r, newState_r, 
                                     noChannel_r, evtRecv, initialState, 
                                     finalState, newState, noChannel >>

body_Human(self) == /\ pc[self] = "body_Human"
                    /\ TRUE
                    /\ IF noChannel_[self] = FALSE
                          THEN /\ pc' = [pc EXCEPT ![self] = "L1"]
                               /\ UNCHANGED evtRecv_
                          ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = idx_event_NullEvent]
                               /\ pc' = [pc EXCEPT ![self] = "entry_Switch"]
                    /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                    stateTransitions, visitedTransitions, 
                                    maxUmlEvents, initialState_, finalState_, 
                                    newState_, noChannel_, evtRecv_r, 
                                    initialState_r, finalState_r, newState_r, 
                                    noChannel_r, evtRecv, initialState, 
                                    finalState, newState, noChannel >>

L1(self) == /\ pc[self] = "L1"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "entry_Switch"]
            /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                            visitedTransitions, maxUmlEvents, initialState_, 
                            finalState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            newState, noChannel >>

entry_Switch(self) == /\ pc[self] = "entry_Switch"
                      /\ TRUE
                      /\ currentState' = [currentState EXCEPT ![self] = newState_[self]]
                      /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                      /\ pc' = [pc EXCEPT ![self] = "body_Switch"]
                      /\ UNCHANGED << procs, channels, lightOn, 
                                      stateTransitions, visitedTransitions, 
                                      maxUmlEvents, evtRecv_, initialState_, 
                                      finalState_, newState_, evtRecv_r, 
                                      initialState_r, finalState_r, newState_r, 
                                      noChannel_r, evtRecv, initialState, 
                                      finalState, newState, noChannel >>

body_Switch(self) == /\ pc[self] = "body_Switch"
                     /\ TRUE
                     /\ IF noChannel_[self] = FALSE
                           THEN /\ pc' = [pc EXCEPT ![self] = "L2"]
                                /\ UNCHANGED evtRecv_
                           ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = idx_event_NullEvent]
                                /\ pc' = [pc EXCEPT ![self] = "Done"]
                     /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                     stateTransitions, visitedTransitions, 
                                     maxUmlEvents, initialState_, finalState_, 
                                     newState_, noChannel_, evtRecv_r, 
                                     initialState_r, finalState_r, newState_r, 
                                     noChannel_r, evtRecv, initialState, 
                                     finalState, newState, noChannel >>

L2(self) == /\ pc[self] = "L2"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "Done"]
            /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                            visitedTransitions, maxUmlEvents, initialState_, 
                            finalState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            newState, noChannel >>

region_r17(self) == proc_body_idx_region_r17(self) \/ entry_Human(self)
                       \/ body_Human(self) \/ L1(self)
                       \/ entry_Switch(self) \/ body_Switch(self)
                       \/ L2(self)

proc_body_idx_region_r19(self) == /\ pc[self] = "proc_body_idx_region_r19"
                                  /\ currentState' = [currentState EXCEPT ![self] = initialState_r[self]]
                                  /\ pc' = [pc EXCEPT ![self] = "entry_TurnLightOn"]
                                  /\ UNCHANGED << procs, channels, lightOn, 
                                                  stateTransitions, 
                                                  visitedTransitions, 
                                                  maxUmlEvents, evtRecv_, 
                                                  initialState_, finalState_, 
                                                  newState_, noChannel_, 
                                                  evtRecv_r, initialState_r, 
                                                  finalState_r, newState_r, 
                                                  noChannel_r, evtRecv, 
                                                  initialState, finalState, 
                                                  newState, noChannel >>

entry_TurnLightOn(self) == /\ pc[self] = "entry_TurnLightOn"
                           /\ TRUE
                           /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                           /\ noChannel_r' = [noChannel_r EXCEPT ![self] = TRUE]
                           /\ pc' = [pc EXCEPT ![self] = "body_TurnLightOn"]
                           /\ UNCHANGED << procs, channels, lightOn, 
                                           stateTransitions, 
                                           visitedTransitions, maxUmlEvents, 
                                           evtRecv_, initialState_, 
                                           finalState_, newState_, noChannel_, 
                                           evtRecv_r, initialState_r, 
                                           finalState_r, newState_r, evtRecv, 
                                           initialState, finalState, newState, 
                                           noChannel >>

body_TurnLightOn(self) == /\ pc[self] = "body_TurnLightOn"
                          /\ TRUE
                          /\ pc' = [pc EXCEPT ![self] = "loop_TurnLightOn"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          lightOn, stateTransitions, 
                                          visitedTransitions, maxUmlEvents, 
                                          evtRecv_, initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

loop_TurnLightOn(self) == /\ pc[self] = "loop_TurnLightOn"
                          /\ TRUE
                          /\ IF noChannel_r[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "L3"]
                                     /\ UNCHANGED evtRecv_r
                                ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "L4"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          lightOn, stateTransitions, 
                                          visitedTransitions, maxUmlEvents, 
                                          evtRecv_, initialState_, finalState_, 
                                          newState_, noChannel_, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

L3(self) == /\ pc[self] = "L3"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "L4"]
            /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            newState, noChannel >>

L4(self) == /\ pc[self] = "L4"
            /\ \/ /\ (evtRecv_r[self] = idx_event_NullEvent)
                  /\ pc' = [pc EXCEPT ![self] = "L5"]
               \/ /\ (evtRecv_r[self] = idx_event_NullEvent)
                  /\ pc' = [pc EXCEPT ![self] = "L7"]
            /\ UNCHANGED << procs, channels, currentState, lightOn, 
                            stateTransitions, visitedTransitions, maxUmlEvents, 
                            evtRecv_, initialState_, finalState_, newState_, 
                            noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, newState_r, noChannel_r, evtRecv, 
                            initialState, finalState, newState, noChannel >>

L5(self) == /\ pc[self] = "L5"
            /\ PrintT(<<"P:", idx_state_TurnLightOn, "o->", idx_event_LampSwitch, idx_region_r37, " > P:", idx_state_Switch>>)
            /\ channels' = [channels EXCEPT ![idx_region_r37] = Append(@, idx_event_LampSwitch)]
            /\ maxUmlEvents' = maxUmlEvents + 1
            /\ pc' = [pc EXCEPT ![self] = "L6"]
            /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                            visitedTransitions, evtRecv_, initialState_, 
                            finalState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            newState, noChannel >>

L6(self) == /\ pc[self] = "L6"
            /\ PrintT(<<"P:", idx_state_TurnLightOn, "o->", idx_event_WallSwitch, idx_region_r37, " > P:", idx_state_Switch>>)
            /\ channels' = [channels EXCEPT ![idx_region_r37] = Append(@, idx_event_WallSwitch)]
            /\ maxUmlEvents' = maxUmlEvents + 1
            /\ visitedTransitions' = [visitedTransitions EXCEPT !["t21"] = TRUE]
            /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_TurnLightOff]
            /\ pc' = [pc EXCEPT ![self] = "entry_TurnLightOff"]
            /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                            evtRecv_, initialState_, finalState_, newState_, 
                            noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, noChannel_r, evtRecv, initialState, 
                            finalState, newState, noChannel >>

L7(self) == /\ pc[self] = "L7"
            /\ PrintT(<<"P:", idx_state_TurnLightOn, "o->", idx_event_WallSwitch, idx_region_r37, " > P:", idx_state_Switch>>)
            /\ channels' = [channels EXCEPT ![idx_region_r37] = Append(@, idx_event_WallSwitch)]
            /\ maxUmlEvents' = maxUmlEvents + 1
            /\ pc' = [pc EXCEPT ![self] = "L8"]
            /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                            visitedTransitions, evtRecv_, initialState_, 
                            finalState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            newState, noChannel >>

L8(self) == /\ pc[self] = "L8"
            /\ PrintT(<<"P:", idx_state_TurnLightOn, "o->", idx_event_LampSwitch, idx_region_r37, " > P:", idx_state_Switch>>)
            /\ channels' = [channels EXCEPT ![idx_region_r37] = Append(@, idx_event_LampSwitch)]
            /\ maxUmlEvents' = maxUmlEvents + 1
            /\ visitedTransitions' = [visitedTransitions EXCEPT !["t22"] = TRUE]
            /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_TurnLightOff]
            /\ pc' = [pc EXCEPT ![self] = "entry_TurnLightOff"]
            /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                            evtRecv_, initialState_, finalState_, newState_, 
                            noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, noChannel_r, evtRecv, initialState, 
                            finalState, newState, noChannel >>

entry_TurnLightOff(self) == /\ pc[self] = "entry_TurnLightOff"
                            /\ TRUE
                            /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                            /\ noChannel_r' = [noChannel_r EXCEPT ![self] = TRUE]
                            /\ pc' = [pc EXCEPT ![self] = "body_TurnLightOff"]
                            /\ UNCHANGED << procs, channels, lightOn, 
                                            stateTransitions, 
                                            visitedTransitions, maxUmlEvents, 
                                            evtRecv_, initialState_, 
                                            finalState_, newState_, noChannel_, 
                                            evtRecv_r, initialState_r, 
                                            finalState_r, newState_r, evtRecv, 
                                            initialState, finalState, newState, 
                                            noChannel >>

body_TurnLightOff(self) == /\ pc[self] = "body_TurnLightOff"
                           /\ TRUE
                           /\ IF noChannel_r[self] = FALSE
                                 THEN /\ pc' = [pc EXCEPT ![self] = "L9"]
                                      /\ UNCHANGED evtRecv_r
                                 ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                      /\ pc' = [pc EXCEPT ![self] = "L10"]
                           /\ UNCHANGED << procs, channels, currentState, 
                                           lightOn, stateTransitions, 
                                           visitedTransitions, maxUmlEvents, 
                                           evtRecv_, initialState_, 
                                           finalState_, newState_, noChannel_, 
                                           initialState_r, finalState_r, 
                                           newState_r, noChannel_r, evtRecv, 
                                           initialState, finalState, newState, 
                                           noChannel >>

L9(self) == /\ pc[self] = "L9"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "L10"]
            /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            newState, noChannel >>

L10(self) == /\ pc[self] = "L10"
             /\ \/ /\ (evtRecv_r[self] = idx_event_NullEvent)
                   /\ pc' = [pc EXCEPT ![self] = "L11"]
                \/ /\ (evtRecv_r[self] = idx_event_NullEvent)
                   /\ pc' = [pc EXCEPT ![self] = "L13"]
             /\ UNCHANGED << procs, channels, currentState, lightOn, 
                             stateTransitions, visitedTransitions, 
                             maxUmlEvents, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv, initialState, finalState, 
                             newState, noChannel >>

L11(self) == /\ pc[self] = "L11"
             /\ PrintT(<<"P:", idx_state_TurnLightOff, "o->", idx_event_LampSwitch, idx_region_r37, " > P:", idx_state_Switch>>)
             /\ channels' = [channels EXCEPT ![idx_region_r37] = Append(@, idx_event_LampSwitch)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ pc' = [pc EXCEPT ![self] = "L12"]
             /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                             visitedTransitions, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv, initialState, finalState, 
                             newState, noChannel >>

L12(self) == /\ pc[self] = "L12"
             /\ PrintT(<<"P:", idx_state_TurnLightOff, "o->", idx_event_WallSwitch, idx_region_r37, " > P:", idx_state_Switch>>)
             /\ channels' = [channels EXCEPT ![idx_region_r37] = Append(@, idx_event_WallSwitch)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ visitedTransitions' = [visitedTransitions EXCEPT !["t25"] = TRUE]
             /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_Done]
             /\ pc' = [pc EXCEPT ![self] = "entry_Done"]
             /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                             evtRecv_, initialState_, finalState_, newState_, 
                             noChannel_, evtRecv_r, initialState_r, 
                             finalState_r, noChannel_r, evtRecv, initialState, 
                             finalState, newState, noChannel >>

L13(self) == /\ pc[self] = "L13"
             /\ PrintT(<<"P:", idx_state_TurnLightOff, "o->", idx_event_WallSwitch, idx_region_r37, " > P:", idx_state_Switch>>)
             /\ channels' = [channels EXCEPT ![idx_region_r37] = Append(@, idx_event_WallSwitch)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ pc' = [pc EXCEPT ![self] = "L14"]
             /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                             visitedTransitions, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv, initialState, finalState, 
                             newState, noChannel >>

L14(self) == /\ pc[self] = "L14"
             /\ PrintT(<<"P:", idx_state_TurnLightOff, "o->", idx_event_LampSwitch, idx_region_r37, " > P:", idx_state_Switch>>)
             /\ channels' = [channels EXCEPT ![idx_region_r37] = Append(@, idx_event_LampSwitch)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ visitedTransitions' = [visitedTransitions EXCEPT !["t26"] = TRUE]
             /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_Done]
             /\ pc' = [pc EXCEPT ![self] = "entry_Done"]
             /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                             evtRecv_, initialState_, finalState_, newState_, 
                             noChannel_, evtRecv_r, initialState_r, 
                             finalState_r, noChannel_r, evtRecv, initialState, 
                             finalState, newState, noChannel >>

entry_Done(self) == /\ pc[self] = "entry_Done"
                    /\ TRUE
                    /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                    /\ noChannel_r' = [noChannel_r EXCEPT ![self] = TRUE]
                    /\ pc' = [pc EXCEPT ![self] = "body_Done"]
                    /\ UNCHANGED << procs, channels, lightOn, stateTransitions, 
                                    visitedTransitions, maxUmlEvents, evtRecv_, 
                                    initialState_, finalState_, newState_, 
                                    noChannel_, evtRecv_r, initialState_r, 
                                    finalState_r, newState_r, evtRecv, 
                                    initialState, finalState, newState, 
                                    noChannel >>

body_Done(self) == /\ pc[self] = "body_Done"
                   /\ TRUE
                   /\ pc' = [pc EXCEPT ![self] = "loop_Done"]
                   /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                   stateTransitions, visitedTransitions, 
                                   maxUmlEvents, evtRecv_, initialState_, 
                                   finalState_, newState_, noChannel_, 
                                   evtRecv_r, initialState_r, finalState_r, 
                                   newState_r, noChannel_r, evtRecv, 
                                   initialState, finalState, newState, 
                                   noChannel >>

loop_Done(self) == /\ pc[self] = "loop_Done"
                   /\ TRUE
                   /\ IF noChannel_r[self] = FALSE
                         THEN /\ pc' = [pc EXCEPT ![self] = "end_Done"]
                              /\ UNCHANGED evtRecv_r
                         ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                              /\ pc' = [pc EXCEPT ![self] = "Done"]
                   /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                   stateTransitions, visitedTransitions, 
                                   maxUmlEvents, evtRecv_, initialState_, 
                                   finalState_, newState_, noChannel_, 
                                   initialState_r, finalState_r, newState_r, 
                                   noChannel_r, evtRecv, initialState, 
                                   finalState, newState, noChannel >>

end_Done(self) == /\ pc[self] = "end_Done"
                  /\ TRUE
                  /\ pc' = [pc EXCEPT ![self] = "L15"]
                  /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                  stateTransitions, visitedTransitions, 
                                  maxUmlEvents, evtRecv_, initialState_, 
                                  finalState_, newState_, noChannel_, 
                                  evtRecv_r, initialState_r, finalState_r, 
                                  newState_r, noChannel_r, evtRecv, 
                                  initialState, finalState, newState, 
                                  noChannel >>

L15(self) == /\ pc[self] = "L15"
             /\ Len(channels[self]) > 0
             /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "Done"]
             /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv, initialState, finalState, 
                             newState, noChannel >>

region_r19(self) == proc_body_idx_region_r19(self)
                       \/ entry_TurnLightOn(self) \/ body_TurnLightOn(self)
                       \/ loop_TurnLightOn(self) \/ L3(self) \/ L4(self)
                       \/ L5(self) \/ L6(self) \/ L7(self) \/ L8(self)
                       \/ entry_TurnLightOff(self)
                       \/ body_TurnLightOff(self) \/ L9(self) \/ L10(self)
                       \/ L11(self) \/ L12(self) \/ L13(self) \/ L14(self)
                       \/ entry_Done(self) \/ body_Done(self)
                       \/ loop_Done(self) \/ end_Done(self) \/ L15(self)

proc_body_idx_region_r37(self) == /\ pc[self] = "proc_body_idx_region_r37"
                                  /\ currentState' = [currentState EXCEPT ![self] = initialState[self]]
                                  /\ pc' = [pc EXCEPT ![self] = "entry_BothOff"]
                                  /\ UNCHANGED << procs, channels, lightOn, 
                                                  stateTransitions, 
                                                  visitedTransitions, 
                                                  maxUmlEvents, evtRecv_, 
                                                  initialState_, finalState_, 
                                                  newState_, noChannel_, 
                                                  evtRecv_r, initialState_r, 
                                                  finalState_r, newState_r, 
                                                  noChannel_r, evtRecv, 
                                                  initialState, finalState, 
                                                  newState, noChannel >>

entry_BothOff(self) == /\ pc[self] = "entry_BothOff"
                       /\ TRUE
                       /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                       /\ pc' = [pc EXCEPT ![self] = "body_BothOff"]
                       /\ UNCHANGED << procs, channels, lightOn, 
                                       stateTransitions, visitedTransitions, 
                                       maxUmlEvents, evtRecv_, initialState_, 
                                       finalState_, newState_, noChannel_, 
                                       evtRecv_r, initialState_r, finalState_r, 
                                       newState_r, noChannel_r, evtRecv, 
                                       initialState, finalState, newState, 
                                       noChannel >>

body_BothOff(self) == /\ pc[self] = "body_BothOff"
                      /\ TRUE
                      /\ pc' = [pc EXCEPT ![self] = "loop_BothOff"]
                      /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                      stateTransitions, visitedTransitions, 
                                      maxUmlEvents, evtRecv_, initialState_, 
                                      finalState_, newState_, noChannel_, 
                                      evtRecv_r, initialState_r, finalState_r, 
                                      newState_r, noChannel_r, evtRecv, 
                                      initialState, finalState, newState, 
                                      noChannel >>

loop_BothOff(self) == /\ pc[self] = "loop_BothOff"
                      /\ TRUE
                      /\ pc' = [pc EXCEPT ![self] = "progress_BothOff"]
                      /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                      stateTransitions, visitedTransitions, 
                                      maxUmlEvents, evtRecv_, initialState_, 
                                      finalState_, newState_, noChannel_, 
                                      evtRecv_r, initialState_r, finalState_r, 
                                      newState_r, noChannel_r, evtRecv, 
                                      initialState, finalState, newState, 
                                      noChannel >>

progress_BothOff(self) == /\ pc[self] = "progress_BothOff"
                          /\ TRUE
                          /\ IF noChannel[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "end_BothOff"]
                                     /\ UNCHANGED evtRecv
                                ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "L17"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          lightOn, stateTransitions, 
                                          visitedTransitions, maxUmlEvents, 
                                          evtRecv_, initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, 
                                          initialState, finalState, newState, 
                                          noChannel >>

end_BothOff(self) == /\ pc[self] = "end_BothOff"
                     /\ TRUE
                     /\ pc' = [pc EXCEPT ![self] = "L16"]
                     /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                     stateTransitions, visitedTransitions, 
                                     maxUmlEvents, evtRecv_, initialState_, 
                                     finalState_, newState_, noChannel_, 
                                     evtRecv_r, initialState_r, finalState_r, 
                                     newState_r, noChannel_r, evtRecv, 
                                     initialState, finalState, newState, 
                                     noChannel >>

L16(self) == /\ pc[self] = "L16"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L17"]
             /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, initialState, finalState, 
                             newState, noChannel >>

L17(self) == /\ pc[self] = "L17"
             /\ \/ /\ (evtRecv[self] = idx_event_LampSwitch)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t41"] = TRUE]
                   /\ newState' = [newState EXCEPT ![self] = idx_state_WallOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_WallOff"]
                \/ /\ (evtRecv[self] = idx_event_WallSwitch)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t42"] = TRUE]
                   /\ newState' = [newState EXCEPT ![self] = idx_state_LampOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_LampOff"]
             /\ UNCHANGED << procs, channels, currentState, lightOn, 
                             stateTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv, initialState, 
                             finalState, noChannel >>

entry_LampOff(self) == /\ pc[self] = "entry_LampOff"
                       /\ TRUE
                       /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                       /\ pc' = [pc EXCEPT ![self] = "body_LampOff"]
                       /\ UNCHANGED << procs, channels, lightOn, 
                                       stateTransitions, visitedTransitions, 
                                       maxUmlEvents, evtRecv_, initialState_, 
                                       finalState_, newState_, noChannel_, 
                                       evtRecv_r, initialState_r, finalState_r, 
                                       newState_r, noChannel_r, evtRecv, 
                                       initialState, finalState, newState, 
                                       noChannel >>

body_LampOff(self) == /\ pc[self] = "body_LampOff"
                      /\ TRUE
                      /\ pc' = [pc EXCEPT ![self] = "progress_LampOff"]
                      /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                      stateTransitions, visitedTransitions, 
                                      maxUmlEvents, evtRecv_, initialState_, 
                                      finalState_, newState_, noChannel_, 
                                      evtRecv_r, initialState_r, finalState_r, 
                                      newState_r, noChannel_r, evtRecv, 
                                      initialState, finalState, newState, 
                                      noChannel >>

progress_LampOff(self) == /\ pc[self] = "progress_LampOff"
                          /\ TRUE
                          /\ IF noChannel[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "L18"]
                                     /\ UNCHANGED evtRecv
                                ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "L19"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          lightOn, stateTransitions, 
                                          visitedTransitions, maxUmlEvents, 
                                          evtRecv_, initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, 
                                          initialState, finalState, newState, 
                                          noChannel >>

L18(self) == /\ pc[self] = "L18"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L19"]
             /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, initialState, finalState, 
                             newState, noChannel >>

L19(self) == /\ pc[self] = "L19"
             /\ \/ /\ (evtRecv[self] = idx_event_WallSwitch)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t49"] = TRUE]
                   /\ newState' = [newState EXCEPT ![self] = idx_state_BothOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_BothOff"]
                \/ /\ (evtRecv[self] = idx_event_LampSwitch)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t50"] = TRUE]
                   /\ newState' = [newState EXCEPT ![self] = idx_state_On]
                   /\ pc' = [pc EXCEPT ![self] = "entry_On"]
             /\ UNCHANGED << procs, channels, currentState, lightOn, 
                             stateTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv, initialState, 
                             finalState, noChannel >>

entry_On(self) == /\ pc[self] = "entry_On"
                  /\ TRUE
                  /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                  /\ lightOn' = TRUE
                  /\ pc' = [pc EXCEPT ![self] = "body_On"]
                  /\ UNCHANGED << procs, channels, stateTransitions, 
                                  visitedTransitions, maxUmlEvents, evtRecv_, 
                                  initialState_, finalState_, newState_, 
                                  noChannel_, evtRecv_r, initialState_r, 
                                  finalState_r, newState_r, noChannel_r, 
                                  evtRecv, initialState, finalState, newState, 
                                  noChannel >>

body_On(self) == /\ pc[self] = "body_On"
                 /\ TRUE
                 /\ pc' = [pc EXCEPT ![self] = "progress_On"]
                 /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                 stateTransitions, visitedTransitions, 
                                 maxUmlEvents, evtRecv_, initialState_, 
                                 finalState_, newState_, noChannel_, evtRecv_r, 
                                 initialState_r, finalState_r, newState_r, 
                                 noChannel_r, evtRecv, initialState, 
                                 finalState, newState, noChannel >>

progress_On(self) == /\ pc[self] = "progress_On"
                     /\ TRUE
                     /\ IF noChannel[self] = FALSE
                           THEN /\ pc' = [pc EXCEPT ![self] = "L20"]
                                /\ UNCHANGED evtRecv
                           ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                /\ pc' = [pc EXCEPT ![self] = "L21"]
                     /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                     stateTransitions, visitedTransitions, 
                                     maxUmlEvents, evtRecv_, initialState_, 
                                     finalState_, newState_, noChannel_, 
                                     evtRecv_r, initialState_r, finalState_r, 
                                     newState_r, noChannel_r, initialState, 
                                     finalState, newState, noChannel >>

L20(self) == /\ pc[self] = "L20"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L21"]
             /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, initialState, finalState, 
                             newState, noChannel >>

L21(self) == /\ pc[self] = "L21"
             /\ \/ /\ (evtRecv[self] = idx_event_WallSwitch)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t53"] = TRUE]
                   /\ lightOn' = FALSE
                   /\ newState' = [newState EXCEPT ![self] = idx_state_WallOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_WallOff"]
                \/ /\ (evtRecv[self] = idx_event_LampSwitch)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t54"] = TRUE]
                   /\ lightOn' = FALSE
                   /\ newState' = [newState EXCEPT ![self] = idx_state_LampOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_LampOff"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             maxUmlEvents, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv, initialState, finalState, 
                             noChannel >>

entry_WallOff(self) == /\ pc[self] = "entry_WallOff"
                       /\ TRUE
                       /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                       /\ pc' = [pc EXCEPT ![self] = "body_WallOff"]
                       /\ UNCHANGED << procs, channels, lightOn, 
                                       stateTransitions, visitedTransitions, 
                                       maxUmlEvents, evtRecv_, initialState_, 
                                       finalState_, newState_, noChannel_, 
                                       evtRecv_r, initialState_r, finalState_r, 
                                       newState_r, noChannel_r, evtRecv, 
                                       initialState, finalState, newState, 
                                       noChannel >>

body_WallOff(self) == /\ pc[self] = "body_WallOff"
                      /\ TRUE
                      /\ pc' = [pc EXCEPT ![self] = "progress_WallOff"]
                      /\ UNCHANGED << procs, channels, currentState, lightOn, 
                                      stateTransitions, visitedTransitions, 
                                      maxUmlEvents, evtRecv_, initialState_, 
                                      finalState_, newState_, noChannel_, 
                                      evtRecv_r, initialState_r, finalState_r, 
                                      newState_r, noChannel_r, evtRecv, 
                                      initialState, finalState, newState, 
                                      noChannel >>

progress_WallOff(self) == /\ pc[self] = "progress_WallOff"
                          /\ TRUE
                          /\ IF noChannel[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "L22"]
                                     /\ UNCHANGED evtRecv
                                ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "L23"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          lightOn, stateTransitions, 
                                          visitedTransitions, maxUmlEvents, 
                                          evtRecv_, initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, 
                                          initialState, finalState, newState, 
                                          noChannel >>

L22(self) == /\ pc[self] = "L22"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L23"]
             /\ UNCHANGED << procs, currentState, lightOn, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, initialState, finalState, 
                             newState, noChannel >>

L23(self) == /\ pc[self] = "L23"
             /\ \/ /\ (evtRecv[self] = idx_event_WallSwitch)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t46"] = TRUE]
                   /\ newState' = [newState EXCEPT ![self] = idx_state_On]
                   /\ pc' = [pc EXCEPT ![self] = "entry_On"]
                \/ /\ (evtRecv[self] = idx_event_LampSwitch)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t47"] = TRUE]
                   /\ newState' = [newState EXCEPT ![self] = idx_state_BothOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_BothOff"]
             /\ UNCHANGED << procs, channels, currentState, lightOn, 
                             stateTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv, initialState, 
                             finalState, noChannel >>

region_r37(self) == proc_body_idx_region_r37(self) \/ entry_BothOff(self)
                       \/ body_BothOff(self) \/ loop_BothOff(self)
                       \/ progress_BothOff(self) \/ end_BothOff(self)
                       \/ L16(self) \/ L17(self) \/ entry_LampOff(self)
                       \/ body_LampOff(self) \/ progress_LampOff(self)
                       \/ L18(self) \/ L19(self) \/ entry_On(self)
                       \/ body_On(self) \/ progress_On(self) \/ L20(self)
                       \/ L21(self) \/ entry_WallOff(self)
                       \/ body_WallOff(self) \/ progress_WallOff(self)
                       \/ L22(self) \/ L23(self)

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == (\E self \in {idx_region_r17}: region_r17(self))
           \/ (\E self \in {idx_region_r19}: region_r19(self))
           \/ (\E self \in {idx_region_r37}: region_r37(self))
           \/ Terminating

Spec == /\ Init /\ [][Next]_vars
        /\ \A self \in {idx_region_r17} : SF_vars(region_r17(self))
        /\ \A self \in {idx_region_r19} : SF_vars(region_r19(self))
        /\ \A self \in {idx_region_r37} : SF_vars(region_r37(self))

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION 

\*     (F:'';L:30;C:1) Human:ltl: ltlLight,{,<>,[],(,state:Switch:currentState,==,state:BothOff,&&,lightOn,==,false,),->,(,state:Switch:currentState,==,state:On,&&,lightOn,==,true,),->,(,state:Switch:currentState,==,state:BothOff,&&,lightOn,==,false,&&,state:Human:currentState,==,state:Done,),}, (a30)
ltlLight == <> [] ( currentState[idx_region_r37]  = idx_state_BothOff /\ lightOn = FALSE ) -> ( currentState[idx_region_r37]  = idx_state_On /\ lightOn = TRUE ) -> ( currentState[idx_region_r37]  = idx_state_BothOff /\ lightOn = FALSE /\ currentState[idx_region_r19]  = idx_state_Done ) 
 

\* Weakly fair scheduling 
(* PlusCal options (wf) *) 


=======================================================================
