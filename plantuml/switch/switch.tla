/*
./upml --in ../plantuml/switch/switch.plantuml --backend tla --out ../plantuml/switch/switch.tla 
*/
/*
   Generated by UPML v0.03
   Mon Jul  8 19:12:37 2024


    (F:'';L:1;C:1)
    machine switch {
        (F:'';L:17;C:1)
        -- r17 {
            (F:'';L:17;C:1)
            state Human final:0;initial:0 {
                (F:'';L:19;C:1)
                -- r19 {
                    (F:'';L:0;C:0)
                    state Flip final:0;initial:1 {
                        (F:'';L:21;C:1) Flip --> Flip NullEvent[]/send,event:LampSwitch,to,state:Switch, (t21)
                        (F:'';L:22;C:1) Flip --> Flip NullEvent[]/send,event:WallSwitch,to,state:Switch, (t22)
                        noInboundEvents,
                    }
                }
            }
            (F:'';L:28;C:1)
            state Switch final:0;initial:0 {
                (F:'';L:30;C:1)
                -- r30 {
                    (F:'';L:0;C:0)
                    state BothOff final:0;initial:1 {
                        (F:'';L:32;C:1) BothOff --> WallOff LampSwitch[]/ (t32)
                        (F:'';L:35;C:1) BothOff --> LampOff WallSwitch[]/ (t35)
                        progressTag,
                    }
                    (F:'';L:0;C:0)
                    state LampOff final:0;initial:0 {
                        (F:'';L:36;C:1) LampOff --> BothOff WallSwitch[]/ (t36)
                        (F:'';L:43;C:1) LampOff --> On LampSwitch[]/ (t43)
                        progressTag,
                    }
                    (F:'';L:0;C:0)
                    state On final:0;initial:0 {
                        (F:'';L:40;C:1) On --> WallOff LampSwitch[]/ (t40)
                        (F:'';L:46;C:1) On --> LampOff WallSwitch[]/ (t46)
                        progressTag,
                    }
                    (F:'';L:0;C:0)
                    state WallOff final:0;initial:0 {
                        (F:'';L:33;C:1) WallOff --> BothOff LampSwitch[]/ (t33)
                        (F:'';L:39;C:1) WallOff --> On WallSwitch[]/ (t39)
                        progressTag,
                    }
                }
            }
        }
    } switch

*/

---- MODULE switch ----------------------------------------------------

EXTENDS TLC, Integers, Sequences

idx_Unknown == -1

idx_state_BothOff == 1
idx_state_Flip == 2
idx_state_Human == 3
idx_state_LampOff == 4
idx_state_On == 5
idx_state_Switch == 6
idx_state_WallOff == 7

idx_region_r17 == 1
idx_region_r19 == 2
idx_region_r30 == 3

idx_event_LampSwitch == 1
idx_event_NullEvent == 2
idx_event_WallSwitch == 3

(**********************************************************************

--algorithm lamp {

variables

     channels = << <<>>, <<>>, <<>> >>;


macro send_event(channel, evtId, fromState, toState) {
    print <<"P:", fromState, "o->", evtId, channel, " > P:", toState>>;
    channels[channel] := Append(@, evtId);
}
macro recv_event(evtId, channel, inState) {
    await Len(channels[channel]) > 0;
    evtId := Head(channels[channel]);
    print <<"P:", channel, inState, "<-i", evtId>>;
    channels[channel] := Tail(@);
}

    

fair+ process (region_r17 \in {idx_region_r17}) \* switch
variables
    evtRecv = idx_Unknown; 
    initialState = idx_Unknown; 
    finalState = idx_Unknown; 
    currentState = initialState; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body: skip;

\* state idx_state_Human[

entry_Human: skip;
    currentState := newState;
    noChannel := TRUE;

body_Human: skip;
    if ( noChannel = TRUE ) {
        R1:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv.evId := idx_event_NullEvent;
    };


\*]state idx_state_Human


\* state idx_state_Switch[

entry_Switch: skip;
    currentState := newState;
    noChannel := TRUE;

body_Switch: skip;
    if ( noChannel = TRUE ) {
        R2:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv.evId := idx_event_NullEvent;
    };


\*]state idx_state_Switch

} \* region_r17 switch


fair+ process (region_r19 \in {idx_region_r19}) \* Human
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_Flip; 
    finalState = idx_Unknown; 
    currentState = initialState; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body: skip;

\* state idx_state_Flip[

entry_Flip: skip;
    currentState := newState;
    noChannel := TRUE;

body_Flip: skip;
loop_Flip: skip;
    if ( noChannel = TRUE ) {
        R3:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv.evId := idx_event_NullEvent;
    };


    \* transitions idx_state_Flip[ 
    T4:
    either {
            \*     (F:'';L:21;C:1) Flip --> Flip NullEvent[]/send,event:LampSwitch,to,state:Switch, (t21)

            await (evtRecv.evId = idx_event_NullEvent);
            S5:send_event(idx_region_r30, idx_event_LampSwitch, idx_state_Flip, idx_state_Switch); 

            newState := idx_state_Flip; 
            goto body_Flip;

    } or {
            \*     (F:'';L:22;C:1) Flip --> Flip NullEvent[]/send,event:WallSwitch,to,state:Switch, (t22)

            await (evtRecv.evId = idx_event_NullEvent);
            S6:send_event(idx_region_r30, idx_event_WallSwitch, idx_state_Flip, idx_state_Switch); 

            newState := idx_state_Flip; 
            goto body_Flip;

    }; \* either
    \*]transitions idx_state_Flip

\*]state idx_state_Flip

} \* region_r19 Human


fair+ process (region_r30 \in {idx_region_r30}) \* Switch
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_BothOff; 
    finalState = idx_Unknown; 
    currentState = initialState; 
    newState = initialState; 
    noChannel = FALSE; 
{
proc_body: skip;

\* state idx_state_BothOff[

entry_BothOff: skip;
    currentState := newState;

body_BothOff: skip;
loop_BothOff: skip;
progress_BothOff: skip;
    if ( noChannel = TRUE ) {
        R7:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv.evId := idx_event_NullEvent;
    };


    \* transitions idx_state_BothOff[ 
    T8:
    either {
            \*     (F:'';L:32;C:1) BothOff --> WallOff LampSwitch[]/ (t32)

            await (evtRecv.evId = idx_event_LampSwitch);
            
            newState := idx_state_WallOff; 
            goto entry_WallOff;

    } or {
            \*     (F:'';L:35;C:1) BothOff --> LampOff WallSwitch[]/ (t35)

            await (evtRecv.evId = idx_event_WallSwitch);
            
            newState := idx_state_LampOff; 
            goto entry_LampOff;

    }; \* either
    \*]transitions idx_state_BothOff

\*]state idx_state_BothOff


\* state idx_state_LampOff[

entry_LampOff: skip;
    currentState := newState;

body_LampOff: skip;
progress_LampOff: skip;
    if ( noChannel = TRUE ) {
        R9:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv.evId := idx_event_NullEvent;
    };


    \* transitions idx_state_LampOff[ 
    T10:
    either {
            \*     (F:'';L:36;C:1) LampOff --> BothOff WallSwitch[]/ (t36)

            await (evtRecv.evId = idx_event_WallSwitch);
            
            newState := idx_state_BothOff; 
            goto entry_BothOff;

    } or {
            \*     (F:'';L:43;C:1) LampOff --> On LampSwitch[]/ (t43)

            await (evtRecv.evId = idx_event_LampSwitch);
            
            newState := idx_state_On; 
            goto entry_On;

    }; \* either
    \*]transitions idx_state_LampOff

\*]state idx_state_LampOff


\* state idx_state_On[

entry_On: skip;
    currentState := newState;

body_On: skip;
progress_On: skip;
    if ( noChannel = TRUE ) {
        R11:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv.evId := idx_event_NullEvent;
    };


    \* transitions idx_state_On[ 
    T12:
    either {
            \*     (F:'';L:40;C:1) On --> WallOff LampSwitch[]/ (t40)

            await (evtRecv.evId = idx_event_LampSwitch);
            
            newState := idx_state_WallOff; 
            goto entry_WallOff;

    } or {
            \*     (F:'';L:46;C:1) On --> LampOff WallSwitch[]/ (t46)

            await (evtRecv.evId = idx_event_WallSwitch);
            
            newState := idx_state_LampOff; 
            goto entry_LampOff;

    }; \* either
    \*]transitions idx_state_On

\*]state idx_state_On


\* state idx_state_WallOff[

entry_WallOff: skip;
    currentState := newState;

body_WallOff: skip;
progress_WallOff: skip;
    if ( noChannel = TRUE ) {
        R13:recv_event(evtRecv, self, currentState); 
    } else {
        evtRecv.evId := idx_event_NullEvent;
    };


    \* transitions idx_state_WallOff[ 
    T14:
    either {
            \*     (F:'';L:33;C:1) WallOff --> BothOff LampSwitch[]/ (t33)

            await (evtRecv.evId = idx_event_LampSwitch);
            
            newState := idx_state_BothOff; 
            goto entry_BothOff;

    } or {
            \*     (F:'';L:39;C:1) WallOff --> On WallSwitch[]/ (t39)

            await (evtRecv.evId = idx_event_WallSwitch);
            
            newState := idx_state_On; 
            goto entry_On;

    }; \* either
    \*]transitions idx_state_WallOff

\*]state idx_state_WallOff

} \* region_r30 Switch


} \* algorithm lamp

**********************************************************************)
\* BEGIN TRANSLATION (chksum(pcal) = "aae7d820" /\ chksum(tla) = "e3cd997")
\* Label proc_body of process region_r17 at line 113 col 12 changed to proc_body_
\* Label proc_body of process region_r19 at line 160 col 12 changed to proc_body_r
\* Process variable evtRecv of process region_r17 at line 106 col 5 changed to evtRecv_
\* Process variable initialState of process region_r17 at line 107 col 5 changed to initialState_
\* Process variable finalState of process region_r17 at line 108 col 5 changed to finalState_
\* Process variable currentState of process region_r17 at line 109 col 5 changed to currentState_
\* Process variable newState of process region_r17 at line 110 col 5 changed to newState_
\* Process variable noChannel of process region_r17 at line 111 col 5 changed to noChannel_
\* Process variable evtRecv of process region_r19 at line 153 col 5 changed to evtRecv_r
\* Process variable initialState of process region_r19 at line 154 col 5 changed to initialState_r
\* Process variable finalState of process region_r19 at line 155 col 5 changed to finalState_r
\* Process variable currentState of process region_r19 at line 156 col 5 changed to currentState_r
\* Process variable newState of process region_r19 at line 157 col 5 changed to newState_r
\* Process variable noChannel of process region_r19 at line 158 col 5 changed to noChannel_r
VARIABLES channels, pc, evtRecv_, initialState_, finalState_, currentState_, 
          newState_, noChannel_, evtRecv_r, initialState_r, finalState_r, 
          currentState_r, newState_r, noChannel_r, evtRecv, initialState, 
          finalState, currentState, newState, noChannel

vars == << channels, pc, evtRecv_, initialState_, finalState_, currentState_, 
           newState_, noChannel_, evtRecv_r, initialState_r, finalState_r, 
           currentState_r, newState_r, noChannel_r, evtRecv, initialState, 
           finalState, currentState, newState, noChannel >>

ProcSet == ({idx_region_r17}) \cup ({idx_region_r19}) \cup ({idx_region_r30})

Init == (* Global variables *)
        /\ channels = << <<>>, <<>>, <<>> >>
        (* Process region_r17 *)
        /\ evtRecv_ = [self \in {idx_region_r17} |-> idx_Unknown]
        /\ initialState_ = [self \in {idx_region_r17} |-> idx_Unknown]
        /\ finalState_ = [self \in {idx_region_r17} |-> idx_Unknown]
        /\ currentState_ = [self \in {idx_region_r17} |-> initialState_[self]]
        /\ newState_ = [self \in {idx_region_r17} |-> initialState_[self]]
        /\ noChannel_ = [self \in {idx_region_r17} |-> FALSE]
        (* Process region_r19 *)
        /\ evtRecv_r = [self \in {idx_region_r19} |-> idx_Unknown]
        /\ initialState_r = [self \in {idx_region_r19} |-> idx_state_Flip]
        /\ finalState_r = [self \in {idx_region_r19} |-> idx_Unknown]
        /\ currentState_r = [self \in {idx_region_r19} |-> initialState_r[self]]
        /\ newState_r = [self \in {idx_region_r19} |-> initialState_r[self]]
        /\ noChannel_r = [self \in {idx_region_r19} |-> FALSE]
        (* Process region_r30 *)
        /\ evtRecv = [self \in {idx_region_r30} |-> idx_Unknown]
        /\ initialState = [self \in {idx_region_r30} |-> idx_state_BothOff]
        /\ finalState = [self \in {idx_region_r30} |-> idx_Unknown]
        /\ currentState = [self \in {idx_region_r30} |-> initialState[self]]
        /\ newState = [self \in {idx_region_r30} |-> initialState[self]]
        /\ noChannel = [self \in {idx_region_r30} |-> FALSE]
        /\ pc = [self \in ProcSet |-> CASE self \in {idx_region_r17} -> "proc_body_"
                                        [] self \in {idx_region_r19} -> "proc_body_r"
                                        [] self \in {idx_region_r30} -> "proc_body"]

proc_body_(self) == /\ pc[self] = "proc_body_"
                    /\ TRUE
                    /\ pc' = [pc EXCEPT ![self] = "entry_Human"]
                    /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                    finalState_, currentState_, newState_, 
                                    noChannel_, evtRecv_r, initialState_r, 
                                    finalState_r, currentState_r, newState_r, 
                                    noChannel_r, evtRecv, initialState, 
                                    finalState, currentState, newState, 
                                    noChannel >>

entry_Human(self) == /\ pc[self] = "entry_Human"
                     /\ TRUE
                     /\ currentState_' = [currentState_ EXCEPT ![self] = newState_[self]]
                     /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                     /\ pc' = [pc EXCEPT ![self] = "body_Human"]
                     /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                     finalState_, newState_, evtRecv_r, 
                                     initialState_r, finalState_r, 
                                     currentState_r, newState_r, noChannel_r, 
                                     evtRecv, initialState, finalState, 
                                     currentState, newState, noChannel >>

body_Human(self) == /\ pc[self] = "body_Human"
                    /\ TRUE
                    /\ IF noChannel_[self] = TRUE
                          THEN /\ pc' = [pc EXCEPT ![self] = "R1"]
                               /\ UNCHANGED evtRecv_
                          ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self].evId = idx_event_NullEvent]
                               /\ pc' = [pc EXCEPT ![self] = "entry_Switch"]
                    /\ UNCHANGED << channels, initialState_, finalState_, 
                                    currentState_, newState_, noChannel_, 
                                    evtRecv_r, initialState_r, finalState_r, 
                                    currentState_r, newState_r, noChannel_r, 
                                    evtRecv, initialState, finalState, 
                                    currentState, newState, noChannel >>

R1(self) == /\ pc[self] = "R1"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState_[self], "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "entry_Switch"]
            /\ UNCHANGED << initialState_, finalState_, currentState_, 
                            newState_, noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, currentState_r, newState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            currentState, newState, noChannel >>

entry_Switch(self) == /\ pc[self] = "entry_Switch"
                      /\ TRUE
                      /\ currentState_' = [currentState_ EXCEPT ![self] = newState_[self]]
                      /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                      /\ pc' = [pc EXCEPT ![self] = "body_Switch"]
                      /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                      finalState_, newState_, evtRecv_r, 
                                      initialState_r, finalState_r, 
                                      currentState_r, newState_r, noChannel_r, 
                                      evtRecv, initialState, finalState, 
                                      currentState, newState, noChannel >>

body_Switch(self) == /\ pc[self] = "body_Switch"
                     /\ TRUE
                     /\ IF noChannel_[self] = TRUE
                           THEN /\ pc' = [pc EXCEPT ![self] = "R2"]
                                /\ UNCHANGED evtRecv_
                           ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self].evId = idx_event_NullEvent]
                                /\ pc' = [pc EXCEPT ![self] = "Done"]
                     /\ UNCHANGED << channels, initialState_, finalState_, 
                                     currentState_, newState_, noChannel_, 
                                     evtRecv_r, initialState_r, finalState_r, 
                                     currentState_r, newState_r, noChannel_r, 
                                     evtRecv, initialState, finalState, 
                                     currentState, newState, noChannel >>

R2(self) == /\ pc[self] = "R2"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState_[self], "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "Done"]
            /\ UNCHANGED << initialState_, finalState_, currentState_, 
                            newState_, noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, currentState_r, newState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            currentState, newState, noChannel >>

region_r17(self) == proc_body_(self) \/ entry_Human(self)
                       \/ body_Human(self) \/ R1(self)
                       \/ entry_Switch(self) \/ body_Switch(self)
                       \/ R2(self)

proc_body_r(self) == /\ pc[self] = "proc_body_r"
                     /\ TRUE
                     /\ pc' = [pc EXCEPT ![self] = "entry_Flip"]
                     /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                     finalState_, currentState_, newState_, 
                                     noChannel_, evtRecv_r, initialState_r, 
                                     finalState_r, currentState_r, newState_r, 
                                     noChannel_r, evtRecv, initialState, 
                                     finalState, currentState, newState, 
                                     noChannel >>

entry_Flip(self) == /\ pc[self] = "entry_Flip"
                    /\ TRUE
                    /\ currentState_r' = [currentState_r EXCEPT ![self] = newState_r[self]]
                    /\ noChannel_r' = [noChannel_r EXCEPT ![self] = TRUE]
                    /\ pc' = [pc EXCEPT ![self] = "body_Flip"]
                    /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                    finalState_, currentState_, newState_, 
                                    noChannel_, evtRecv_r, initialState_r, 
                                    finalState_r, newState_r, evtRecv, 
                                    initialState, finalState, currentState, 
                                    newState, noChannel >>

body_Flip(self) == /\ pc[self] = "body_Flip"
                   /\ TRUE
                   /\ pc' = [pc EXCEPT ![self] = "loop_Flip"]
                   /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                   finalState_, currentState_, newState_, 
                                   noChannel_, evtRecv_r, initialState_r, 
                                   finalState_r, currentState_r, newState_r, 
                                   noChannel_r, evtRecv, initialState, 
                                   finalState, currentState, newState, 
                                   noChannel >>

loop_Flip(self) == /\ pc[self] = "loop_Flip"
                   /\ TRUE
                   /\ IF noChannel_r[self] = TRUE
                         THEN /\ pc' = [pc EXCEPT ![self] = "R3"]
                              /\ UNCHANGED evtRecv_r
                         ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self].evId = idx_event_NullEvent]
                              /\ pc' = [pc EXCEPT ![self] = "T4"]
                   /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                   finalState_, currentState_, newState_, 
                                   noChannel_, initialState_r, finalState_r, 
                                   currentState_r, newState_r, noChannel_r, 
                                   evtRecv, initialState, finalState, 
                                   currentState, newState, noChannel >>

R3(self) == /\ pc[self] = "R3"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState_r[self], "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "T4"]
            /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, 
                            initialState_r, finalState_r, currentState_r, 
                            newState_r, noChannel_r, evtRecv, initialState, 
                            finalState, currentState, newState, noChannel >>

T4(self) == /\ pc[self] = "T4"
            /\ \/ /\ (evtRecv_r[self].evId = idx_event_NullEvent)
                  /\ pc' = [pc EXCEPT ![self] = "S5"]
               \/ /\ (evtRecv_r[self].evId = idx_event_NullEvent)
                  /\ pc' = [pc EXCEPT ![self] = "S6"]
            /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            newState_r, noChannel_r, evtRecv, initialState, 
                            finalState, currentState, newState, noChannel >>

S5(self) == /\ pc[self] = "S5"
            /\ PrintT(<<"P:", idx_state_Flip, "o->", idx_event_LampSwitch, idx_region_r30, " > P:", idx_state_Switch>>)
            /\ channels' = [channels EXCEPT ![idx_region_r30] = Append(@, idx_event_LampSwitch)]
            /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_Flip]
            /\ pc' = [pc EXCEPT ![self] = "body_Flip"]
            /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            currentState, newState, noChannel >>

S6(self) == /\ pc[self] = "S6"
            /\ PrintT(<<"P:", idx_state_Flip, "o->", idx_event_WallSwitch, idx_region_r30, " > P:", idx_state_Switch>>)
            /\ channels' = [channels EXCEPT ![idx_region_r30] = Append(@, idx_event_WallSwitch)]
            /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_Flip]
            /\ pc' = [pc EXCEPT ![self] = "body_Flip"]
            /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            noChannel_r, evtRecv, initialState, finalState, 
                            currentState, newState, noChannel >>

region_r19(self) == proc_body_r(self) \/ entry_Flip(self)
                       \/ body_Flip(self) \/ loop_Flip(self) \/ R3(self)
                       \/ T4(self) \/ S5(self) \/ S6(self)

proc_body(self) == /\ pc[self] = "proc_body"
                   /\ TRUE
                   /\ pc' = [pc EXCEPT ![self] = "entry_BothOff"]
                   /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                   finalState_, currentState_, newState_, 
                                   noChannel_, evtRecv_r, initialState_r, 
                                   finalState_r, currentState_r, newState_r, 
                                   noChannel_r, evtRecv, initialState, 
                                   finalState, currentState, newState, 
                                   noChannel >>

entry_BothOff(self) == /\ pc[self] = "entry_BothOff"
                       /\ TRUE
                       /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                       /\ pc' = [pc EXCEPT ![self] = "body_BothOff"]
                       /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                       finalState_, currentState_, newState_, 
                                       noChannel_, evtRecv_r, initialState_r, 
                                       finalState_r, currentState_r, 
                                       newState_r, noChannel_r, evtRecv, 
                                       initialState, finalState, newState, 
                                       noChannel >>

body_BothOff(self) == /\ pc[self] = "body_BothOff"
                      /\ TRUE
                      /\ pc' = [pc EXCEPT ![self] = "loop_BothOff"]
                      /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                      finalState_, currentState_, newState_, 
                                      noChannel_, evtRecv_r, initialState_r, 
                                      finalState_r, currentState_r, newState_r, 
                                      noChannel_r, evtRecv, initialState, 
                                      finalState, currentState, newState, 
                                      noChannel >>

loop_BothOff(self) == /\ pc[self] = "loop_BothOff"
                      /\ TRUE
                      /\ pc' = [pc EXCEPT ![self] = "progress_BothOff"]
                      /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                      finalState_, currentState_, newState_, 
                                      noChannel_, evtRecv_r, initialState_r, 
                                      finalState_r, currentState_r, newState_r, 
                                      noChannel_r, evtRecv, initialState, 
                                      finalState, currentState, newState, 
                                      noChannel >>

progress_BothOff(self) == /\ pc[self] = "progress_BothOff"
                          /\ TRUE
                          /\ IF noChannel[self] = TRUE
                                THEN /\ pc' = [pc EXCEPT ![self] = "R7"]
                                     /\ UNCHANGED evtRecv
                                ELSE /\ evtRecv' = [evtRecv EXCEPT ![self].evId = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "T8"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          currentState_r, newState_r, 
                                          noChannel_r, initialState, 
                                          finalState, currentState, newState, 
                                          noChannel >>

R7(self) == /\ pc[self] = "R7"
            /\ Len(channels[self]) > 0
            /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState[self], "<-i", evtRecv'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "T8"]
            /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            newState_r, noChannel_r, initialState, finalState, 
                            currentState, newState, noChannel >>

T8(self) == /\ pc[self] = "T8"
            /\ \/ /\ (evtRecv[self].evId = idx_event_LampSwitch)
                  /\ newState' = [newState EXCEPT ![self] = idx_state_WallOff]
                  /\ pc' = [pc EXCEPT ![self] = "entry_WallOff"]
               \/ /\ (evtRecv[self].evId = idx_event_WallSwitch)
                  /\ newState' = [newState EXCEPT ![self] = idx_state_LampOff]
                  /\ pc' = [pc EXCEPT ![self] = "entry_LampOff"]
            /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            newState_r, noChannel_r, evtRecv, initialState, 
                            finalState, currentState, noChannel >>

entry_LampOff(self) == /\ pc[self] = "entry_LampOff"
                       /\ TRUE
                       /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                       /\ pc' = [pc EXCEPT ![self] = "body_LampOff"]
                       /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                       finalState_, currentState_, newState_, 
                                       noChannel_, evtRecv_r, initialState_r, 
                                       finalState_r, currentState_r, 
                                       newState_r, noChannel_r, evtRecv, 
                                       initialState, finalState, newState, 
                                       noChannel >>

body_LampOff(self) == /\ pc[self] = "body_LampOff"
                      /\ TRUE
                      /\ pc' = [pc EXCEPT ![self] = "progress_LampOff"]
                      /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                      finalState_, currentState_, newState_, 
                                      noChannel_, evtRecv_r, initialState_r, 
                                      finalState_r, currentState_r, newState_r, 
                                      noChannel_r, evtRecv, initialState, 
                                      finalState, currentState, newState, 
                                      noChannel >>

progress_LampOff(self) == /\ pc[self] = "progress_LampOff"
                          /\ TRUE
                          /\ IF noChannel[self] = TRUE
                                THEN /\ pc' = [pc EXCEPT ![self] = "R9"]
                                     /\ UNCHANGED evtRecv
                                ELSE /\ evtRecv' = [evtRecv EXCEPT ![self].evId = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "T10"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          currentState_r, newState_r, 
                                          noChannel_r, initialState, 
                                          finalState, currentState, newState, 
                                          noChannel >>

R9(self) == /\ pc[self] = "R9"
            /\ Len(channels[self]) > 0
            /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, currentState[self], "<-i", evtRecv'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "T10"]
            /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                            currentState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, currentState_r, 
                            newState_r, noChannel_r, initialState, finalState, 
                            currentState, newState, noChannel >>

T10(self) == /\ pc[self] = "T10"
             /\ \/ /\ (evtRecv[self].evId = idx_event_WallSwitch)
                   /\ newState' = [newState EXCEPT ![self] = idx_state_BothOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_BothOff"]
                \/ /\ (evtRecv[self].evId = idx_event_LampSwitch)
                   /\ newState' = [newState EXCEPT ![self] = idx_state_On]
                   /\ pc' = [pc EXCEPT ![self] = "entry_On"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv, initialState, 
                             finalState, currentState, noChannel >>

entry_On(self) == /\ pc[self] = "entry_On"
                  /\ TRUE
                  /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                  /\ pc' = [pc EXCEPT ![self] = "body_On"]
                  /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                  finalState_, currentState_, newState_, 
                                  noChannel_, evtRecv_r, initialState_r, 
                                  finalState_r, currentState_r, newState_r, 
                                  noChannel_r, evtRecv, initialState, 
                                  finalState, newState, noChannel >>

body_On(self) == /\ pc[self] = "body_On"
                 /\ TRUE
                 /\ pc' = [pc EXCEPT ![self] = "progress_On"]
                 /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                 finalState_, currentState_, newState_, 
                                 noChannel_, evtRecv_r, initialState_r, 
                                 finalState_r, currentState_r, newState_r, 
                                 noChannel_r, evtRecv, initialState, 
                                 finalState, currentState, newState, noChannel >>

progress_On(self) == /\ pc[self] = "progress_On"
                     /\ TRUE
                     /\ IF noChannel[self] = TRUE
                           THEN /\ pc' = [pc EXCEPT ![self] = "R11"]
                                /\ UNCHANGED evtRecv
                           ELSE /\ evtRecv' = [evtRecv EXCEPT ![self].evId = idx_event_NullEvent]
                                /\ pc' = [pc EXCEPT ![self] = "T12"]
                     /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                     finalState_, currentState_, newState_, 
                                     noChannel_, evtRecv_r, initialState_r, 
                                     finalState_r, currentState_r, newState_r, 
                                     noChannel_r, initialState, finalState, 
                                     currentState, newState, noChannel >>

R11(self) == /\ pc[self] = "R11"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState[self], "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "T12"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, initialState, finalState, 
                             currentState, newState, noChannel >>

T12(self) == /\ pc[self] = "T12"
             /\ \/ /\ (evtRecv[self].evId = idx_event_LampSwitch)
                   /\ newState' = [newState EXCEPT ![self] = idx_state_WallOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_WallOff"]
                \/ /\ (evtRecv[self].evId = idx_event_WallSwitch)
                   /\ newState' = [newState EXCEPT ![self] = idx_state_LampOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_LampOff"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv, initialState, 
                             finalState, currentState, noChannel >>

entry_WallOff(self) == /\ pc[self] = "entry_WallOff"
                       /\ TRUE
                       /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                       /\ pc' = [pc EXCEPT ![self] = "body_WallOff"]
                       /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                       finalState_, currentState_, newState_, 
                                       noChannel_, evtRecv_r, initialState_r, 
                                       finalState_r, currentState_r, 
                                       newState_r, noChannel_r, evtRecv, 
                                       initialState, finalState, newState, 
                                       noChannel >>

body_WallOff(self) == /\ pc[self] = "body_WallOff"
                      /\ TRUE
                      /\ pc' = [pc EXCEPT ![self] = "progress_WallOff"]
                      /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                      finalState_, currentState_, newState_, 
                                      noChannel_, evtRecv_r, initialState_r, 
                                      finalState_r, currentState_r, newState_r, 
                                      noChannel_r, evtRecv, initialState, 
                                      finalState, currentState, newState, 
                                      noChannel >>

progress_WallOff(self) == /\ pc[self] = "progress_WallOff"
                          /\ TRUE
                          /\ IF noChannel[self] = TRUE
                                THEN /\ pc' = [pc EXCEPT ![self] = "R13"]
                                     /\ UNCHANGED evtRecv
                                ELSE /\ evtRecv' = [evtRecv EXCEPT ![self].evId = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "T14"]
                          /\ UNCHANGED << channels, evtRecv_, initialState_, 
                                          finalState_, currentState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          currentState_r, newState_r, 
                                          noChannel_r, initialState, 
                                          finalState, currentState, newState, 
                                          noChannel >>

R13(self) == /\ pc[self] = "R13"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, currentState[self], "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "T14"]
             /\ UNCHANGED << evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, initialState, finalState, 
                             currentState, newState, noChannel >>

T14(self) == /\ pc[self] = "T14"
             /\ \/ /\ (evtRecv[self].evId = idx_event_LampSwitch)
                   /\ newState' = [newState EXCEPT ![self] = idx_state_BothOff]
                   /\ pc' = [pc EXCEPT ![self] = "entry_BothOff"]
                \/ /\ (evtRecv[self].evId = idx_event_WallSwitch)
                   /\ newState' = [newState EXCEPT ![self] = idx_state_On]
                   /\ pc' = [pc EXCEPT ![self] = "entry_On"]
             /\ UNCHANGED << channels, evtRecv_, initialState_, finalState_, 
                             currentState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, currentState_r, 
                             newState_r, noChannel_r, evtRecv, initialState, 
                             finalState, currentState, noChannel >>

region_r30(self) == proc_body(self) \/ entry_BothOff(self)
                       \/ body_BothOff(self) \/ loop_BothOff(self)
                       \/ progress_BothOff(self) \/ R7(self) \/ T8(self)
                       \/ entry_LampOff(self) \/ body_LampOff(self)
                       \/ progress_LampOff(self) \/ R9(self) \/ T10(self)
                       \/ entry_On(self) \/ body_On(self)
                       \/ progress_On(self) \/ R11(self) \/ T12(self)
                       \/ entry_WallOff(self) \/ body_WallOff(self)
                       \/ progress_WallOff(self) \/ R13(self) \/ T14(self)

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == (\E self \in {idx_region_r17}: region_r17(self))
           \/ (\E self \in {idx_region_r19}: region_r19(self))
           \/ (\E self \in {idx_region_r30}: region_r30(self))
           \/ Terminating

Spec == /\ Init /\ [][Next]_vars
        /\ \A self \in {idx_region_r17} : SF_vars(region_r17(self))
        /\ \A self \in {idx_region_r19} : SF_vars(region_r19(self))
        /\ \A self \in {idx_region_r30} : SF_vars(region_r30(self))

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION 



=======================================================================
