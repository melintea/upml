/*
/home/amelinte/work/github/upml/src/upml --in /home/amelinte/work/github/upml/plantuml/fsm/sip/sip.plantuml --backend tla-fsm --out ../plantuml/fsm/sip/sip.tla 
*/
/*
   Generated by UPML v0.08
   Wed Jun  4 12:24:55 2025


    (F:'';L:1;C:1)
    machine sip {
        (F:'';L:3;C:1)
        -- m1INr3 _ownedByState:m1 {
            (F:'';L:21;C:1)
            state Alice final:0;initial:0;_superState:m1;_ownedByRegion:m1INr3 {
                (F:'';L:22;C:3)
                -- AliceINr22 _ownedByState:Alice {
                    (F:'';L:0;C:0)
                    state AEstablished final:0;initial:0;_superState:Alice;_ownedByRegion:AliceINr22 {
                        (F:'';L:30;C:3) AEstablished --> Aterminated Hangup[]/ (t30)
                        (F:'';L:29;C:3) AEstablished:entry: send,event:ACK,to,state:Bob, (a29)
                    } AEstablished
                    (F:'';L:0;C:0)
                    state AIdle final:0;initial:1;_superState:Alice;_ownedByRegion:AliceINr22 {
                        (F:'';L:23;C:3) AIdle --> AInitiated Dial[]/ (t23)
                    } AIdle
                    (F:'';L:0;C:0)
                    state AInitiated final:0;initial:0;_superState:Alice;_ownedByRegion:AliceINr22 {
                        (F:'';L:26;C:3) AInitiated --> AInitiated 1xx[]/ (t26)
                        (F:'';L:27;C:3) AInitiated --> AEstablished 2xx[]/ (t27)
                        (F:'';L:25;C:3) AInitiated:entry: send,event:INVITE,to,state:Bob, (a25)
                        (F:'';L:36;C:3) AInitiated:precondition: (,state:Alice:currentState,!=,state:BIdle,), (a36)
                        (F:'';L:37;C:3) AInitiated:postcondition: (,state:Alice:currentState,!=,state:BInitiated,), (a37)
                        (F:'';L:38;C:3) AInitiated:invariant: (,state:Alice:currentState,!=,state:Bterminated,), (a38)
                    } AInitiated
                    (F:'';L:0;C:0)
                    state Aterminated final:1;initial:0;_superState:Alice;_ownedByRegion:AliceINr22 {
                        (F:'';L:32;C:3) Aterminated:entry: send,event:BYE,to,state:Bob, (a32)
                    } Aterminated
                } AliceINr22
            } Alice
            (F:'';L:43;C:1)
            state Bob final:0;initial:0;_superState:m1;_ownedByRegion:m1INr3 {
                (F:'';L:44;C:3)
                -- BobINr44 _ownedByState:Bob {
                    (F:'';L:0;C:0)
                    state BEstablished final:0;initial:0;_superState:Bob;_ownedByRegion:BobINr44 {
                        (F:'';L:51;C:3) BEstablished --> BEstablished ACK[]/ (t51)
                        (F:'';L:52;C:3) BEstablished --> Bterminated BYE[]/ (t52)
                        (F:'';L:50;C:3) BEstablished:entry: send,event:2xx,to,state:Alice, (a50)
                    } BEstablished
                    (F:'';L:0;C:0)
                    state BIdle final:0;initial:1;_superState:Bob;_ownedByRegion:BobINr44 {
                        (F:'';L:45;C:3) BIdle --> BInitiated INVITE[]/ (t45)
                    } BIdle
                    (F:'';L:0;C:0)
                    state BInitiated final:0;initial:0;_superState:Bob;_ownedByRegion:BobINr44 {
                        (F:'';L:48;C:3) BInitiated --> BEstablished Pickup[]/ (t48)
                        (F:'';L:47;C:3) BInitiated:entry: send,event:1xx,to,state:Alice, (a47)
                        (F:'';L:57;C:3) BInitiated:precondition: (,state:Bob:currentState,!=,state:AIdle,), (a57)
                        (F:'';L:58;C:3) BInitiated:postcondition: (,state:Bob:currentState,!=,state:AInitiated,), (a58)
                        (F:'';L:59;C:3) BInitiated:invariant: (,state:Bob:currentState,!=,state:Aterminated,), (a59)
                    } BInitiated
                    (F:'';L:0;C:0)
                    state Bterminated final:1;initial:0;_superState:Bob;_ownedByRegion:BobINr44 {
                    } Bterminated
                } BobINr44
            } Bob
            (F:'';L:3;C:1)
            state ClosedSystemEnvironment final:0;initial:0;_superState:m1;_ownedByRegion:m1INr3 {
                (F:'';L:17;C:1) ClosedSystemEnvironment:ltl: ltlFinalStates,{,<>,[],(,state:ClosedSystemEnvironment:currentState,==,state:CallEnded,&&,state:Alice:currentState,==,state:Aterminated,&&,state:Bob:currentState,==,state:Bterminated,),}, (a17)
                (F:'';L:4;C:1)
                -- ClosedSystemEnvironmentINr4 _ownedByState:ClosedSystemEnvironment {
                    (F:'';L:0;C:0)
                    state AliceDial final:0;initial:1;_superState:ClosedSystemEnvironment;_ownedByRegion:ClosedSystemEnvironmentINr4 {
                        (F:'';L:6;C:1) AliceDial --> BobPickup NullEvent[state:Alice:currentState,==,state:AIdle,]/send,event:Dial,to,state:Alice, (t6)
                        noInboundEvents,
                    } AliceDial
                    (F:'';L:0;C:0)
                    state AliceHangup final:0;initial:0;_superState:ClosedSystemEnvironment;_ownedByRegion:ClosedSystemEnvironmentINr4 {
                        (F:'';L:12;C:1) AliceHangup --> CallEnded NullEvent[state:Alice:currentState,==,state:AEstablished,]/send,event:Hangup,to,state:Alice, (t12)
                        noInboundEvents,
                    } AliceHangup
                    (F:'';L:0;C:0)
                    state BobPickup final:0;initial:0;_superState:ClosedSystemEnvironment;_ownedByRegion:ClosedSystemEnvironmentINr4 {
                        (F:'';L:9;C:1) BobPickup --> AliceHangup NullEvent[state:Bob:currentState,==,state:BInitiated,]/send,event:Pickup,to,state:Bob, (t9)
                        noInboundEvents,
                    } BobPickup
                    (F:'';L:0;C:0)
                    state CallEnded final:1;initial:0;_superState:ClosedSystemEnvironment;_ownedByRegion:ClosedSystemEnvironmentINr4 {
                        noInboundEvents,
                    } CallEnded
                } ClosedSystemEnvironmentINr4
            } ClosedSystemEnvironment
        } m1INr3
    } sip
    
*/

---- MODULE sip ----------------------------------------------------

EXTENDS TLC, Integers, Sequences

idx_Unknown == -1

idx_state_AEstablished == 1
idx_state_AIdle == 2
idx_state_AInitiated == 3
idx_state_Alice == 4
idx_state_AliceDial == 5
idx_state_AliceHangup == 6
idx_state_Aterminated == 7
idx_state_BEstablished == 8
idx_state_BIdle == 9
idx_state_BInitiated == 10
idx_state_Bob == 11
idx_state_BobPickup == 12
idx_state_Bterminated == 13
idx_state_CallEnded == 14
idx_state_ClosedSystemEnvironment == 15

idx_region_AliceINr22 == 1
idx_region_BobINr44 == 2
idx_region_ClosedSystemEnvironmentINr4 == 3
idx_region_m1INr3 == 4

idx_event_1xx == 1
idx_event_2xx == 2
idx_event_ACK == 3
idx_event_BYE == 4
idx_event_Dial == 5
idx_event_EnterState == 6
idx_event_ExitState == 7
idx_event_Hangup == 8
idx_event_INVITE == 9
idx_event_NullEvent == 10
idx_event_Pickup == 11

(**********************************************************************

--algorithm sip {

variables
    
    procs = { idx_region_AliceINr22, idx_region_BobINr44, idx_region_ClosedSystemEnvironmentINr4, idx_region_m1INr3 };
    channels = [p \in procs |-> <<>>];
    currentState = [p \in procs |-> idx_Unknown]; 
    
    stateTransitions = { "t30", "t23", "t26", "t27", "t51", "t52", "t45", "t48", "t6", "t12", "t9" };
    visitedTransitions = [t \in stateTransitions |-> FALSE];
    maxUmlEvents = -20;  \* limit the number of UML events in the run

\* Add to the Properties box of the model
define {
    \* Limit the number of UML events to maxUmlEvents; if reached this will show as a model run error
    MaxEventsReached == 
        /\ [](maxUmlEvents < 0)
    \* Flag dead transitions as errors
    AllTransitionsVisited == 
        /\ <>(\A t \in DOMAIN visitedTransitions : visitedTransitions[t] = TRUE)
    \* As extracted from the plantuml spec:
    UmlInvariants == 
        /\ [](TRUE) \* ensure not empty
            
        \*     (F:'';L:38;C:3) AInitiated:invariant: (,state:Alice:currentState,!=,state:Bterminated,), (a38)
        /\ []((currentState[idx_region_AliceINr22] /=idx_state_Bterminated))
            
        \*     (F:'';L:59;C:3) BInitiated:invariant: (,state:Bob:currentState,!=,state:Aterminated,), (a59)
        /\ []((currentState[idx_region_BobINr44] /=idx_state_Aterminated))
        
}; \* define 


macro send_event(channel, evtId, fromState, toState) {
    print <<"P:", fromState, "o->", evtId, channel, " > P:", toState>>;
    channels[channel] := Append(@, evtId);
    maxUmlEvents := maxUmlEvents + 1;
}
macro recv_event(evtId, channel, inState) {
    await Len(channels[channel]) > 0;
    evtId := Head(channels[channel]);
    print <<"P:", channel, inState, "<-i", evtId>>;
    channels[channel] := Tail(@);
}

    

fair+ process (region_m1INr3 \in {idx_region_m1INr3}) \* sip
variables
    evtRecv = idx_Unknown; 
    initialState = idx_Unknown; 
    finalState = idx_Unknown; 
    newState = initialState; 
    noChannel = FALSE; 
    
{
proc_body_idx_region_m1INr3: currentState[self] := initialState;

\* state idx_state_Alice[

entry_Alice: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_Alice: skip;    
    if ( noChannel = FALSE ) { 
        L1:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
\*]state idx_state_Alice


\* state idx_state_Bob[

entry_Bob: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_Bob: skip;    
    if ( noChannel = FALSE ) { 
        L2:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
\*]state idx_state_Bob


\* state idx_state_ClosedSystemEnvironment[

entry_ClosedSystemEnvironment: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_ClosedSystemEnvironment: skip;    
    if ( noChannel = FALSE ) { 
        L3:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
\*]state idx_state_ClosedSystemEnvironment

} \* region_m1INr3 sip


fair+ process (region_AliceINr22 \in {idx_region_AliceINr22}) \* Alice
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_AIdle; 
    finalState = idx_state_Aterminated; 
    newState = initialState; 
    noChannel = FALSE; 
    
{
proc_body_idx_region_AliceINr22: currentState[self] := initialState;

\* state idx_state_AIdle[

entry_AIdle: skip;    
    currentState[self] := newState;
    

body_AIdle: skip;
loop_AIdle: skip;    
    if ( noChannel = FALSE ) { 
        L4:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_AIdle[ 
    L5:
    \* either {    
        
        \*     (F:'';L:23;C:3) AIdle --> AInitiated Dial[]/ (t23)
        await (evtRecv = idx_event_Dial);
        visitedTransitions["t23"] := TRUE;
        
        newState := idx_state_AInitiated; 
        goto entry_AInitiated;
        
    \* }; \* either
    \*]transitions idx_state_AIdle
    
\*]state idx_state_AIdle


\* state idx_state_AEstablished[

entry_AEstablished: skip;    
    currentState[self] := newState;
    
    \*     (F:'';L:29;C:3) AEstablished:entry: send,event:ACK,to,state:Bob, (a29)
    L6:send_event(idx_region_BobINr44, idx_event_ACK, idx_state_AEstablished, idx_state_Bob); 
    

body_AEstablished: skip;    
    if ( noChannel = FALSE ) { 
        L7:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_AEstablished[ 
    L8:
    \* either {    
        
        \*     (F:'';L:30;C:3) AEstablished --> Aterminated Hangup[]/ (t30)
        await (evtRecv = idx_event_Hangup);
        visitedTransitions["t30"] := TRUE;
        
        newState := idx_state_Aterminated; 
        goto entry_Aterminated;
        
    \* }; \* either
    \*]transitions idx_state_AEstablished
    
\*]state idx_state_AEstablished


\* state idx_state_AInitiated[

entry_AInitiated: skip;    
    currentState[self] := newState;
    
    \*     (F:'';L:36;C:3) AInitiated:precondition: (,state:Alice:currentState,!=,state:BIdle,), (a36)
    L9: assert((currentState[idx_region_AliceINr22] /=idx_state_BIdle));
    
    \*     (F:'';L:25;C:3) AInitiated:entry: send,event:INVITE,to,state:Bob, (a25)
    L10:send_event(idx_region_BobINr44, idx_event_INVITE, idx_state_AInitiated, idx_state_Bob); 
    

body_AInitiated: skip;    
    if ( noChannel = FALSE ) { 
        L11:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_AInitiated[ 
    L12:
    either {    
        
        \*     (F:'';L:26;C:3) AInitiated --> AInitiated 1xx[]/ (t26)
        await (evtRecv = idx_event_1xx);
        visitedTransitions["t26"] := TRUE;
        
        \*     (F:'';L:37;C:3) AInitiated:postcondition: (,state:Alice:currentState,!=,state:BInitiated,), (a37)
        L13: assert((currentState[idx_region_AliceINr22] /=idx_state_BInitiated));
        
        newState := idx_state_AInitiated; 
        goto body_AInitiated;
        
    } or {    
        
        \*     (F:'';L:27;C:3) AInitiated --> AEstablished 2xx[]/ (t27)
        await (evtRecv = idx_event_2xx);
        visitedTransitions["t27"] := TRUE;
        
        \*     (F:'';L:37;C:3) AInitiated:postcondition: (,state:Alice:currentState,!=,state:BInitiated,), (a37)
        L14: assert((currentState[idx_region_AliceINr22] /=idx_state_BInitiated));
        
        newState := idx_state_AEstablished; 
        goto entry_AEstablished;
        
    }; \* either
    \*]transitions idx_state_AInitiated
    
    \*     (F:'';L:37;C:3) AInitiated:postcondition: (,state:Alice:currentState,!=,state:BInitiated,), (a37)
    L15: assert((currentState[idx_region_AliceINr22] /=idx_state_BInitiated));
    
    \*     (F:'';L:37;C:3) AInitiated:postcondition: (,state:Alice:currentState,!=,state:BInitiated,), (a37)
    L16: assert((currentState[idx_region_AliceINr22] /=idx_state_BInitiated));
    
\*]state idx_state_AInitiated


\* state idx_state_Aterminated[

entry_Aterminated: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    
    \*     (F:'';L:32;C:3) Aterminated:entry: send,event:BYE,to,state:Bob, (a32)
    L17:send_event(idx_region_BobINr44, idx_event_BYE, idx_state_Aterminated, idx_state_Bob); 
    

body_Aterminated: skip;
loop_Aterminated: skip;    
    if ( noChannel = FALSE ) { end_Aterminated: skip;
        L18:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
\*]state idx_state_Aterminated

} \* region_AliceINr22 Alice


fair+ process (region_BobINr44 \in {idx_region_BobINr44}) \* Bob
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_BIdle; 
    finalState = idx_state_Bterminated; 
    newState = initialState; 
    noChannel = FALSE; 
    
{
proc_body_idx_region_BobINr44: currentState[self] := initialState;

\* state idx_state_BIdle[

entry_BIdle: skip;    
    currentState[self] := newState;
    

body_BIdle: skip;
loop_BIdle: skip;    
    if ( noChannel = FALSE ) { 
        L19:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_BIdle[ 
    L20:
    \* either {    
        
        \*     (F:'';L:45;C:3) BIdle --> BInitiated INVITE[]/ (t45)
        await (evtRecv = idx_event_INVITE);
        visitedTransitions["t45"] := TRUE;
        
        newState := idx_state_BInitiated; 
        goto entry_BInitiated;
        
    \* }; \* either
    \*]transitions idx_state_BIdle
    
\*]state idx_state_BIdle


\* state idx_state_BEstablished[

entry_BEstablished: skip;    
    currentState[self] := newState;
    
    \*     (F:'';L:50;C:3) BEstablished:entry: send,event:2xx,to,state:Alice, (a50)
    L21:send_event(idx_region_AliceINr22, idx_event_2xx, idx_state_BEstablished, idx_state_Alice); 
    

body_BEstablished: skip;    
    if ( noChannel = FALSE ) { 
        L22:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_BEstablished[ 
    L23:
    either {    
        
        \*     (F:'';L:51;C:3) BEstablished --> BEstablished ACK[]/ (t51)
        await (evtRecv = idx_event_ACK);
        visitedTransitions["t51"] := TRUE;
        
        newState := idx_state_BEstablished; 
        goto body_BEstablished;
        
    } or {    
        
        \*     (F:'';L:52;C:3) BEstablished --> Bterminated BYE[]/ (t52)
        await (evtRecv = idx_event_BYE);
        visitedTransitions["t52"] := TRUE;
        
        newState := idx_state_Bterminated; 
        goto entry_Bterminated;
        
    }; \* either
    \*]transitions idx_state_BEstablished
    
\*]state idx_state_BEstablished


\* state idx_state_BInitiated[

entry_BInitiated: skip;    
    currentState[self] := newState;
    
    \*     (F:'';L:57;C:3) BInitiated:precondition: (,state:Bob:currentState,!=,state:AIdle,), (a57)
    L24: assert((currentState[idx_region_BobINr44] /=idx_state_AIdle));
    
    \*     (F:'';L:47;C:3) BInitiated:entry: send,event:1xx,to,state:Alice, (a47)
    L25:send_event(idx_region_AliceINr22, idx_event_1xx, idx_state_BInitiated, idx_state_Alice); 
    

body_BInitiated: skip;    
    if ( noChannel = FALSE ) { 
        L26:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_BInitiated[ 
    L27:
    \* either {    
        
        \*     (F:'';L:48;C:3) BInitiated --> BEstablished Pickup[]/ (t48)
        await (evtRecv = idx_event_Pickup);
        visitedTransitions["t48"] := TRUE;
        
        \*     (F:'';L:58;C:3) BInitiated:postcondition: (,state:Bob:currentState,!=,state:AInitiated,), (a58)
        L28: assert((currentState[idx_region_BobINr44] /=idx_state_AInitiated));
        
        newState := idx_state_BEstablished; 
        goto entry_BEstablished;
        
    \* }; \* either
    \*]transitions idx_state_BInitiated
    
    \*     (F:'';L:58;C:3) BInitiated:postcondition: (,state:Bob:currentState,!=,state:AInitiated,), (a58)
    L29: assert((currentState[idx_region_BobINr44] /=idx_state_AInitiated));
    
    \*     (F:'';L:58;C:3) BInitiated:postcondition: (,state:Bob:currentState,!=,state:AInitiated,), (a58)
    L30: assert((currentState[idx_region_BobINr44] /=idx_state_AInitiated));
    
\*]state idx_state_BInitiated


\* state idx_state_Bterminated[

entry_Bterminated: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_Bterminated: skip;
loop_Bterminated: skip;    
    if ( noChannel = FALSE ) { end_Bterminated: skip;
        L31:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
\*]state idx_state_Bterminated

} \* region_BobINr44 Bob


fair+ process (region_ClosedSystemEnvironmentINr4 \in {idx_region_ClosedSystemEnvironmentINr4}) \* ClosedSystemEnvironment
variables
    evtRecv = idx_Unknown; 
    initialState = idx_state_AliceDial; 
    finalState = idx_state_CallEnded; 
    newState = initialState; 
    noChannel = FALSE; 
    
{
proc_body_idx_region_ClosedSystemEnvironmentINr4: currentState[self] := initialState;

\* state idx_state_AliceDial[

entry_AliceDial: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_AliceDial: skip;
loop_AliceDial: skip;    
    if ( noChannel = FALSE ) { 
        L32:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_AliceDial[ 
    L33:
    \* either {    
        
        \*     (F:'';L:6;C:1) AliceDial --> BobPickup NullEvent[state:Alice:currentState,==,state:AIdle,]/send,event:Dial,to,state:Alice, (t6)
        await (evtRecv = idx_event_NullEvent /\ currentState[idx_region_AliceINr22] =idx_state_AIdle);
        \*     (F:'';L:0;C:0) idx_state_AliceDial:send: send,event:Dial,to,state:Alice, (a6)
        L34:send_event(idx_region_AliceINr22, idx_event_Dial, idx_state_AliceDial, idx_state_Alice); 
        
        visitedTransitions["t6"] := TRUE;
        
        newState := idx_state_BobPickup; 
        goto entry_BobPickup;
        
    \* }; \* either
    \*]transitions idx_state_AliceDial
    
\*]state idx_state_AliceDial


\* state idx_state_AliceHangup[

entry_AliceHangup: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_AliceHangup: skip;    
    if ( noChannel = FALSE ) { 
        L35:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_AliceHangup[ 
    L36:
    \* either {    
        
        \*     (F:'';L:12;C:1) AliceHangup --> CallEnded NullEvent[state:Alice:currentState,==,state:AEstablished,]/send,event:Hangup,to,state:Alice, (t12)
        await (evtRecv = idx_event_NullEvent /\ currentState[idx_region_AliceINr22] =idx_state_AEstablished);
        \*     (F:'';L:0;C:0) idx_state_AliceHangup:send: send,event:Hangup,to,state:Alice, (a12)
        L37:send_event(idx_region_AliceINr22, idx_event_Hangup, idx_state_AliceHangup, idx_state_Alice); 
        
        visitedTransitions["t12"] := TRUE;
        
        newState := idx_state_CallEnded; 
        goto entry_CallEnded;
        
    \* }; \* either
    \*]transitions idx_state_AliceHangup
    
\*]state idx_state_AliceHangup


\* state idx_state_BobPickup[

entry_BobPickup: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_BobPickup: skip;    
    if ( noChannel = FALSE ) { 
        L38:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
    \* transitions idx_state_BobPickup[ 
    L39:
    \* either {    
        
        \*     (F:'';L:9;C:1) BobPickup --> AliceHangup NullEvent[state:Bob:currentState,==,state:BInitiated,]/send,event:Pickup,to,state:Bob, (t9)
        await (evtRecv = idx_event_NullEvent /\ currentState[idx_region_BobINr44] =idx_state_BInitiated);
        \*     (F:'';L:0;C:0) idx_state_BobPickup:send: send,event:Pickup,to,state:Bob, (a9)
        L40:send_event(idx_region_BobINr44, idx_event_Pickup, idx_state_BobPickup, idx_state_Bob); 
        
        visitedTransitions["t9"] := TRUE;
        
        newState := idx_state_AliceHangup; 
        goto entry_AliceHangup;
        
    \* }; \* either
    \*]transitions idx_state_BobPickup
    
\*]state idx_state_BobPickup


\* state idx_state_CallEnded[

entry_CallEnded: skip;    
    currentState[self] := newState;
    noChannel := TRUE;
    

body_CallEnded: skip;
loop_CallEnded: skip;    
    if ( noChannel = FALSE ) { end_CallEnded: skip;
        L41:recv_event(evtRecv, self, currentState[self]); 
    } else {
        evtRecv := idx_event_NullEvent;
    };
    
    
\*]state idx_state_CallEnded

} \* region_ClosedSystemEnvironmentINr4 ClosedSystemEnvironment


} \* algorithm sip

**********************************************************************)
\* BEGIN TRANSLATION (chksum(pcal) = "3b947cfe" /\ chksum(tla) = "77ddaf3a")
\* Process variable evtRecv of process region_m1INr3 at line 189 col 5 changed to evtRecv_
\* Process variable initialState of process region_m1INr3 at line 190 col 5 changed to initialState_
\* Process variable finalState of process region_m1INr3 at line 191 col 5 changed to finalState_
\* Process variable newState of process region_m1INr3 at line 192 col 5 changed to newState_
\* Process variable noChannel of process region_m1INr3 at line 193 col 5 changed to noChannel_
\* Process variable evtRecv of process region_AliceINr22 at line 256 col 5 changed to evtRecv_r
\* Process variable initialState of process region_AliceINr22 at line 257 col 5 changed to initialState_r
\* Process variable finalState of process region_AliceINr22 at line 258 col 5 changed to finalState_r
\* Process variable newState of process region_AliceINr22 at line 259 col 5 changed to newState_r
\* Process variable noChannel of process region_AliceINr22 at line 260 col 5 changed to noChannel_r
\* Process variable evtRecv of process region_BobINr44 at line 415 col 5 changed to evtRecv_re
\* Process variable initialState of process region_BobINr44 at line 416 col 5 changed to initialState_re
\* Process variable finalState of process region_BobINr44 at line 417 col 5 changed to finalState_re
\* Process variable newState of process region_BobINr44 at line 418 col 5 changed to newState_re
\* Process variable noChannel of process region_BobINr44 at line 419 col 5 changed to noChannel_re
VARIABLES procs, channels, currentState, stateTransitions, visitedTransitions, 
          maxUmlEvents, pc

(* define statement *)
MaxEventsReached ==
    /\ [](maxUmlEvents < 0)

AllTransitionsVisited ==
    /\ <>(\A t \in DOMAIN visitedTransitions : visitedTransitions[t] = TRUE)

UmlInvariants ==
    /\ [](TRUE)


    /\ []((currentState[idx_region_AliceINr22] /=idx_state_Bterminated))


    /\ []((currentState[idx_region_BobINr44] /=idx_state_Aterminated))

VARIABLES evtRecv_, initialState_, finalState_, newState_, noChannel_, 
          evtRecv_r, initialState_r, finalState_r, newState_r, noChannel_r, 
          evtRecv_re, initialState_re, finalState_re, newState_re, 
          noChannel_re, evtRecv, initialState, finalState, newState, 
          noChannel

vars == << procs, channels, currentState, stateTransitions, 
           visitedTransitions, maxUmlEvents, pc, evtRecv_, initialState_, 
           finalState_, newState_, noChannel_, evtRecv_r, initialState_r, 
           finalState_r, newState_r, noChannel_r, evtRecv_re, initialState_re, 
           finalState_re, newState_re, noChannel_re, evtRecv, initialState, 
           finalState, newState, noChannel >>

ProcSet == ({idx_region_m1INr3}) \cup ({idx_region_AliceINr22}) \cup ({idx_region_BobINr44}) \cup ({idx_region_ClosedSystemEnvironmentINr4})

Init == (* Global variables *)
        /\ procs = { idx_region_AliceINr22, idx_region_BobINr44, idx_region_ClosedSystemEnvironmentINr4, idx_region_m1INr3 }
        /\ channels = [p \in procs |-> <<>>]
        /\ currentState = [p \in procs |-> idx_Unknown]
        /\ stateTransitions = { "t30", "t23", "t26", "t27", "t51", "t52", "t45", "t48", "t6", "t12", "t9" }
        /\ visitedTransitions = [t \in stateTransitions |-> FALSE]
        /\ maxUmlEvents = -20
        (* Process region_m1INr3 *)
        /\ evtRecv_ = [self \in {idx_region_m1INr3} |-> idx_Unknown]
        /\ initialState_ = [self \in {idx_region_m1INr3} |-> idx_Unknown]
        /\ finalState_ = [self \in {idx_region_m1INr3} |-> idx_Unknown]
        /\ newState_ = [self \in {idx_region_m1INr3} |-> initialState_[self]]
        /\ noChannel_ = [self \in {idx_region_m1INr3} |-> FALSE]
        (* Process region_AliceINr22 *)
        /\ evtRecv_r = [self \in {idx_region_AliceINr22} |-> idx_Unknown]
        /\ initialState_r = [self \in {idx_region_AliceINr22} |-> idx_state_AIdle]
        /\ finalState_r = [self \in {idx_region_AliceINr22} |-> idx_state_Aterminated]
        /\ newState_r = [self \in {idx_region_AliceINr22} |-> initialState_r[self]]
        /\ noChannel_r = [self \in {idx_region_AliceINr22} |-> FALSE]
        (* Process region_BobINr44 *)
        /\ evtRecv_re = [self \in {idx_region_BobINr44} |-> idx_Unknown]
        /\ initialState_re = [self \in {idx_region_BobINr44} |-> idx_state_BIdle]
        /\ finalState_re = [self \in {idx_region_BobINr44} |-> idx_state_Bterminated]
        /\ newState_re = [self \in {idx_region_BobINr44} |-> initialState_re[self]]
        /\ noChannel_re = [self \in {idx_region_BobINr44} |-> FALSE]
        (* Process region_ClosedSystemEnvironmentINr4 *)
        /\ evtRecv = [self \in {idx_region_ClosedSystemEnvironmentINr4} |-> idx_Unknown]
        /\ initialState = [self \in {idx_region_ClosedSystemEnvironmentINr4} |-> idx_state_AliceDial]
        /\ finalState = [self \in {idx_region_ClosedSystemEnvironmentINr4} |-> idx_state_CallEnded]
        /\ newState = [self \in {idx_region_ClosedSystemEnvironmentINr4} |-> initialState[self]]
        /\ noChannel = [self \in {idx_region_ClosedSystemEnvironmentINr4} |-> FALSE]
        /\ pc = [self \in ProcSet |-> CASE self \in {idx_region_m1INr3} -> "proc_body_idx_region_m1INr3"
                                        [] self \in {idx_region_AliceINr22} -> "proc_body_idx_region_AliceINr22"
                                        [] self \in {idx_region_BobINr44} -> "proc_body_idx_region_BobINr44"
                                        [] self \in {idx_region_ClosedSystemEnvironmentINr4} -> "proc_body_idx_region_ClosedSystemEnvironmentINr4"]

proc_body_idx_region_m1INr3(self) == /\ pc[self] = "proc_body_idx_region_m1INr3"
                                     /\ currentState' = [currentState EXCEPT ![self] = initialState_[self]]
                                     /\ pc' = [pc EXCEPT ![self] = "entry_Alice"]
                                     /\ UNCHANGED << procs, channels, 
                                                     stateTransitions, 
                                                     visitedTransitions, 
                                                     maxUmlEvents, evtRecv_, 
                                                     initialState_, 
                                                     finalState_, newState_, 
                                                     noChannel_, evtRecv_r, 
                                                     initialState_r, 
                                                     finalState_r, newState_r, 
                                                     noChannel_r, evtRecv_re, 
                                                     initialState_re, 
                                                     finalState_re, 
                                                     newState_re, noChannel_re, 
                                                     evtRecv, initialState, 
                                                     finalState, newState, 
                                                     noChannel >>

entry_Alice(self) == /\ pc[self] = "entry_Alice"
                     /\ TRUE
                     /\ currentState' = [currentState EXCEPT ![self] = newState_[self]]
                     /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                     /\ pc' = [pc EXCEPT ![self] = "body_Alice"]
                     /\ UNCHANGED << procs, channels, stateTransitions, 
                                     visitedTransitions, maxUmlEvents, 
                                     evtRecv_, initialState_, finalState_, 
                                     newState_, evtRecv_r, initialState_r, 
                                     finalState_r, newState_r, noChannel_r, 
                                     evtRecv_re, initialState_re, 
                                     finalState_re, newState_re, noChannel_re, 
                                     evtRecv, initialState, finalState, 
                                     newState, noChannel >>

body_Alice(self) == /\ pc[self] = "body_Alice"
                    /\ TRUE
                    /\ IF noChannel_[self] = FALSE
                          THEN /\ pc' = [pc EXCEPT ![self] = "L1"]
                               /\ UNCHANGED evtRecv_
                          ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = idx_event_NullEvent]
                               /\ pc' = [pc EXCEPT ![self] = "entry_Bob"]
                    /\ UNCHANGED << procs, channels, currentState, 
                                    stateTransitions, visitedTransitions, 
                                    maxUmlEvents, initialState_, finalState_, 
                                    newState_, noChannel_, evtRecv_r, 
                                    initialState_r, finalState_r, newState_r, 
                                    noChannel_r, evtRecv_re, initialState_re, 
                                    finalState_re, newState_re, noChannel_re, 
                                    evtRecv, initialState, finalState, 
                                    newState, noChannel >>

L1(self) == /\ pc[self] = "L1"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "entry_Bob"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, initialState_, 
                            finalState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

entry_Bob(self) == /\ pc[self] = "entry_Bob"
                   /\ TRUE
                   /\ currentState' = [currentState EXCEPT ![self] = newState_[self]]
                   /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                   /\ pc' = [pc EXCEPT ![self] = "body_Bob"]
                   /\ UNCHANGED << procs, channels, stateTransitions, 
                                   visitedTransitions, maxUmlEvents, evtRecv_, 
                                   initialState_, finalState_, newState_, 
                                   evtRecv_r, initialState_r, finalState_r, 
                                   newState_r, noChannel_r, evtRecv_re, 
                                   initialState_re, finalState_re, newState_re, 
                                   noChannel_re, evtRecv, initialState, 
                                   finalState, newState, noChannel >>

body_Bob(self) == /\ pc[self] = "body_Bob"
                  /\ TRUE
                  /\ IF noChannel_[self] = FALSE
                        THEN /\ pc' = [pc EXCEPT ![self] = "L2"]
                             /\ UNCHANGED evtRecv_
                        ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = idx_event_NullEvent]
                             /\ pc' = [pc EXCEPT ![self] = "entry_ClosedSystemEnvironment"]
                  /\ UNCHANGED << procs, channels, currentState, 
                                  stateTransitions, visitedTransitions, 
                                  maxUmlEvents, initialState_, finalState_, 
                                  newState_, noChannel_, evtRecv_r, 
                                  initialState_r, finalState_r, newState_r, 
                                  noChannel_r, evtRecv_re, initialState_re, 
                                  finalState_re, newState_re, noChannel_re, 
                                  evtRecv, initialState, finalState, newState, 
                                  noChannel >>

L2(self) == /\ pc[self] = "L2"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "entry_ClosedSystemEnvironment"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, initialState_, 
                            finalState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

entry_ClosedSystemEnvironment(self) == /\ pc[self] = "entry_ClosedSystemEnvironment"
                                       /\ TRUE
                                       /\ currentState' = [currentState EXCEPT ![self] = newState_[self]]
                                       /\ noChannel_' = [noChannel_ EXCEPT ![self] = TRUE]
                                       /\ pc' = [pc EXCEPT ![self] = "body_ClosedSystemEnvironment"]
                                       /\ UNCHANGED << procs, channels, 
                                                       stateTransitions, 
                                                       visitedTransitions, 
                                                       maxUmlEvents, evtRecv_, 
                                                       initialState_, 
                                                       finalState_, newState_, 
                                                       evtRecv_r, 
                                                       initialState_r, 
                                                       finalState_r, 
                                                       newState_r, noChannel_r, 
                                                       evtRecv_re, 
                                                       initialState_re, 
                                                       finalState_re, 
                                                       newState_re, 
                                                       noChannel_re, evtRecv, 
                                                       initialState, 
                                                       finalState, newState, 
                                                       noChannel >>

body_ClosedSystemEnvironment(self) == /\ pc[self] = "body_ClosedSystemEnvironment"
                                      /\ TRUE
                                      /\ IF noChannel_[self] = FALSE
                                            THEN /\ pc' = [pc EXCEPT ![self] = "L3"]
                                                 /\ UNCHANGED evtRecv_
                                            ELSE /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = idx_event_NullEvent]
                                                 /\ pc' = [pc EXCEPT ![self] = "Done"]
                                      /\ UNCHANGED << procs, channels, 
                                                      currentState, 
                                                      stateTransitions, 
                                                      visitedTransitions, 
                                                      maxUmlEvents, 
                                                      initialState_, 
                                                      finalState_, newState_, 
                                                      noChannel_, evtRecv_r, 
                                                      initialState_r, 
                                                      finalState_r, newState_r, 
                                                      noChannel_r, evtRecv_re, 
                                                      initialState_re, 
                                                      finalState_re, 
                                                      newState_re, 
                                                      noChannel_re, evtRecv, 
                                                      initialState, finalState, 
                                                      newState, noChannel >>

L3(self) == /\ pc[self] = "L3"
            /\ Len(channels[self]) > 0
            /\ evtRecv_' = [evtRecv_ EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "Done"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, initialState_, 
                            finalState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

region_m1INr3(self) == proc_body_idx_region_m1INr3(self)
                          \/ entry_Alice(self) \/ body_Alice(self)
                          \/ L1(self) \/ entry_Bob(self) \/ body_Bob(self)
                          \/ L2(self)
                          \/ entry_ClosedSystemEnvironment(self)
                          \/ body_ClosedSystemEnvironment(self) \/ L3(self)

proc_body_idx_region_AliceINr22(self) == /\ pc[self] = "proc_body_idx_region_AliceINr22"
                                         /\ currentState' = [currentState EXCEPT ![self] = initialState_r[self]]
                                         /\ pc' = [pc EXCEPT ![self] = "entry_AIdle"]
                                         /\ UNCHANGED << procs, channels, 
                                                         stateTransitions, 
                                                         visitedTransitions, 
                                                         maxUmlEvents, 
                                                         evtRecv_, 
                                                         initialState_, 
                                                         finalState_, 
                                                         newState_, noChannel_, 
                                                         evtRecv_r, 
                                                         initialState_r, 
                                                         finalState_r, 
                                                         newState_r, 
                                                         noChannel_r, 
                                                         evtRecv_re, 
                                                         initialState_re, 
                                                         finalState_re, 
                                                         newState_re, 
                                                         noChannel_re, evtRecv, 
                                                         initialState, 
                                                         finalState, newState, 
                                                         noChannel >>

entry_AIdle(self) == /\ pc[self] = "entry_AIdle"
                     /\ TRUE
                     /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                     /\ pc' = [pc EXCEPT ![self] = "body_AIdle"]
                     /\ UNCHANGED << procs, channels, stateTransitions, 
                                     visitedTransitions, maxUmlEvents, 
                                     evtRecv_, initialState_, finalState_, 
                                     newState_, noChannel_, evtRecv_r, 
                                     initialState_r, finalState_r, newState_r, 
                                     noChannel_r, evtRecv_re, initialState_re, 
                                     finalState_re, newState_re, noChannel_re, 
                                     evtRecv, initialState, finalState, 
                                     newState, noChannel >>

body_AIdle(self) == /\ pc[self] = "body_AIdle"
                    /\ TRUE
                    /\ pc' = [pc EXCEPT ![self] = "loop_AIdle"]
                    /\ UNCHANGED << procs, channels, currentState, 
                                    stateTransitions, visitedTransitions, 
                                    maxUmlEvents, evtRecv_, initialState_, 
                                    finalState_, newState_, noChannel_, 
                                    evtRecv_r, initialState_r, finalState_r, 
                                    newState_r, noChannel_r, evtRecv_re, 
                                    initialState_re, finalState_re, 
                                    newState_re, noChannel_re, evtRecv, 
                                    initialState, finalState, newState, 
                                    noChannel >>

loop_AIdle(self) == /\ pc[self] = "loop_AIdle"
                    /\ TRUE
                    /\ IF noChannel_r[self] = FALSE
                          THEN /\ pc' = [pc EXCEPT ![self] = "L4"]
                               /\ UNCHANGED evtRecv_r
                          ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                               /\ pc' = [pc EXCEPT ![self] = "L5"]
                    /\ UNCHANGED << procs, channels, currentState, 
                                    stateTransitions, visitedTransitions, 
                                    maxUmlEvents, evtRecv_, initialState_, 
                                    finalState_, newState_, noChannel_, 
                                    initialState_r, finalState_r, newState_r, 
                                    noChannel_r, evtRecv_re, initialState_re, 
                                    finalState_re, newState_re, noChannel_re, 
                                    evtRecv, initialState, finalState, 
                                    newState, noChannel >>

L4(self) == /\ pc[self] = "L4"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "L5"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

L5(self) == /\ pc[self] = "L5"
            /\ (evtRecv_r[self] = idx_event_Dial)
            /\ visitedTransitions' = [visitedTransitions EXCEPT !["t23"] = TRUE]
            /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_AInitiated]
            /\ pc' = [pc EXCEPT ![self] = "entry_AInitiated"]
            /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                            maxUmlEvents, evtRecv_, initialState_, finalState_, 
                            newState_, noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, newState_re, 
                            noChannel_re, evtRecv, initialState, finalState, 
                            newState, noChannel >>

entry_AEstablished(self) == /\ pc[self] = "entry_AEstablished"
                            /\ TRUE
                            /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                            /\ pc' = [pc EXCEPT ![self] = "L6"]
                            /\ UNCHANGED << procs, channels, stateTransitions, 
                                            visitedTransitions, maxUmlEvents, 
                                            evtRecv_, initialState_, 
                                            finalState_, newState_, noChannel_, 
                                            evtRecv_r, initialState_r, 
                                            finalState_r, newState_r, 
                                            noChannel_r, evtRecv_re, 
                                            initialState_re, finalState_re, 
                                            newState_re, noChannel_re, evtRecv, 
                                            initialState, finalState, newState, 
                                            noChannel >>

L6(self) == /\ pc[self] = "L6"
            /\ PrintT(<<"P:", idx_state_AEstablished, "o->", idx_event_ACK, idx_region_BobINr44, " > P:", idx_state_Bob>>)
            /\ channels' = [channels EXCEPT ![idx_region_BobINr44] = Append(@, idx_event_ACK)]
            /\ maxUmlEvents' = maxUmlEvents + 1
            /\ pc' = [pc EXCEPT ![self] = "body_AEstablished"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, evtRecv_, initialState_, 
                            finalState_, newState_, noChannel_, evtRecv_r, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

body_AEstablished(self) == /\ pc[self] = "body_AEstablished"
                           /\ TRUE
                           /\ IF noChannel_r[self] = FALSE
                                 THEN /\ pc' = [pc EXCEPT ![self] = "L7"]
                                      /\ UNCHANGED evtRecv_r
                                 ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                      /\ pc' = [pc EXCEPT ![self] = "L8"]
                           /\ UNCHANGED << procs, channels, currentState, 
                                           stateTransitions, 
                                           visitedTransitions, maxUmlEvents, 
                                           evtRecv_, initialState_, 
                                           finalState_, newState_, noChannel_, 
                                           initialState_r, finalState_r, 
                                           newState_r, noChannel_r, evtRecv_re, 
                                           initialState_re, finalState_re, 
                                           newState_re, noChannel_re, evtRecv, 
                                           initialState, finalState, newState, 
                                           noChannel >>

L7(self) == /\ pc[self] = "L7"
            /\ Len(channels[self]) > 0
            /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
            /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
            /\ channels' = [channels EXCEPT ![self] = Tail(@)]
            /\ pc' = [pc EXCEPT ![self] = "L8"]
            /\ UNCHANGED << procs, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            initialState_r, finalState_r, newState_r, 
                            noChannel_r, evtRecv_re, initialState_re, 
                            finalState_re, newState_re, noChannel_re, evtRecv, 
                            initialState, finalState, newState, noChannel >>

L8(self) == /\ pc[self] = "L8"
            /\ (evtRecv_r[self] = idx_event_Hangup)
            /\ visitedTransitions' = [visitedTransitions EXCEPT !["t30"] = TRUE]
            /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_Aterminated]
            /\ pc' = [pc EXCEPT ![self] = "entry_Aterminated"]
            /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                            maxUmlEvents, evtRecv_, initialState_, finalState_, 
                            newState_, noChannel_, evtRecv_r, initialState_r, 
                            finalState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, newState_re, 
                            noChannel_re, evtRecv, initialState, finalState, 
                            newState, noChannel >>

entry_AInitiated(self) == /\ pc[self] = "entry_AInitiated"
                          /\ TRUE
                          /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                          /\ pc' = [pc EXCEPT ![self] = "L9"]
                          /\ UNCHANGED << procs, channels, stateTransitions, 
                                          visitedTransitions, maxUmlEvents, 
                                          evtRecv_, initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

L9(self) == /\ pc[self] = "L9"
            /\ Assert(((currentState[idx_region_AliceINr22] /=idx_state_BIdle)), 
                      "Failure of assertion at line 337, column 9.")
            /\ pc' = [pc EXCEPT ![self] = "L10"]
            /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                            visitedTransitions, maxUmlEvents, evtRecv_, 
                            initialState_, finalState_, newState_, noChannel_, 
                            evtRecv_r, initialState_r, finalState_r, 
                            newState_r, noChannel_r, evtRecv_re, 
                            initialState_re, finalState_re, newState_re, 
                            noChannel_re, evtRecv, initialState, finalState, 
                            newState, noChannel >>

L10(self) == /\ pc[self] = "L10"
             /\ PrintT(<<"P:", idx_state_AInitiated, "o->", idx_event_INVITE, idx_region_BobINr44, " > P:", idx_state_Bob>>)
             /\ channels' = [channels EXCEPT ![idx_region_BobINr44] = Append(@, idx_event_INVITE)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ pc' = [pc EXCEPT ![self] = "body_AInitiated"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

body_AInitiated(self) == /\ pc[self] = "body_AInitiated"
                         /\ TRUE
                         /\ IF noChannel_r[self] = FALSE
                               THEN /\ pc' = [pc EXCEPT ![self] = "L11"]
                                    /\ UNCHANGED evtRecv_r
                               ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                    /\ pc' = [pc EXCEPT ![self] = "L12"]
                         /\ UNCHANGED << procs, channels, currentState, 
                                         stateTransitions, visitedTransitions, 
                                         maxUmlEvents, evtRecv_, initialState_, 
                                         finalState_, newState_, noChannel_, 
                                         initialState_r, finalState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         newState_re, noChannel_re, evtRecv, 
                                         initialState, finalState, newState, 
                                         noChannel >>

L11(self) == /\ pc[self] = "L11"
             /\ Len(channels[self]) > 0
             /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L12"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

L12(self) == /\ pc[self] = "L12"
             /\ \/ /\ (evtRecv_r[self] = idx_event_1xx)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t26"] = TRUE]
                   /\ pc' = [pc EXCEPT ![self] = "L13"]
                \/ /\ (evtRecv_r[self] = idx_event_2xx)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t27"] = TRUE]
                   /\ pc' = [pc EXCEPT ![self] = "L14"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             maxUmlEvents, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

L13(self) == /\ pc[self] = "L13"
             /\ Assert(((currentState[idx_region_AliceINr22] /=idx_state_BInitiated)), 
                       "Failure of assertion at line 360, column 14.")
             /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_AInitiated]
             /\ pc' = [pc EXCEPT ![self] = "body_AInitiated"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

L14(self) == /\ pc[self] = "L14"
             /\ Assert(((currentState[idx_region_AliceINr22] /=idx_state_BInitiated)), 
                       "Failure of assertion at line 372, column 14.")
             /\ newState_r' = [newState_r EXCEPT ![self] = idx_state_AEstablished]
             /\ pc' = [pc EXCEPT ![self] = "entry_AEstablished"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

L15(self) == /\ pc[self] = "L15"
             /\ Assert(((currentState[idx_region_AliceINr22] /=idx_state_BInitiated)), 
                       "Failure of assertion at line 381, column 10.")
             /\ pc' = [pc EXCEPT ![self] = "L16"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             newState, noChannel >>

L16(self) == /\ pc[self] = "L16"
             /\ Assert(((currentState[idx_region_AliceINr22] /=idx_state_BInitiated)), 
                       "Failure of assertion at line 384, column 10.")
             /\ pc' = [pc EXCEPT ![self] = "entry_Aterminated"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             newState, noChannel >>

entry_Aterminated(self) == /\ pc[self] = "entry_Aterminated"
                           /\ TRUE
                           /\ currentState' = [currentState EXCEPT ![self] = newState_r[self]]
                           /\ noChannel_r' = [noChannel_r EXCEPT ![self] = TRUE]
                           /\ pc' = [pc EXCEPT ![self] = "L17"]
                           /\ UNCHANGED << procs, channels, stateTransitions, 
                                           visitedTransitions, maxUmlEvents, 
                                           evtRecv_, initialState_, 
                                           finalState_, newState_, noChannel_, 
                                           evtRecv_r, initialState_r, 
                                           finalState_r, newState_r, 
                                           evtRecv_re, initialState_re, 
                                           finalState_re, newState_re, 
                                           noChannel_re, evtRecv, initialState, 
                                           finalState, newState, noChannel >>

L17(self) == /\ pc[self] = "L17"
             /\ PrintT(<<"P:", idx_state_Aterminated, "o->", idx_event_BYE, idx_region_BobINr44, " > P:", idx_state_Bob>>)
             /\ channels' = [channels EXCEPT ![idx_region_BobINr44] = Append(@, idx_event_BYE)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ pc' = [pc EXCEPT ![self] = "body_Aterminated"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

body_Aterminated(self) == /\ pc[self] = "body_Aterminated"
                          /\ TRUE
                          /\ pc' = [pc EXCEPT ![self] = "loop_Aterminated"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          stateTransitions, visitedTransitions, 
                                          maxUmlEvents, evtRecv_, 
                                          initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

loop_Aterminated(self) == /\ pc[self] = "loop_Aterminated"
                          /\ TRUE
                          /\ IF noChannel_r[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "end_Aterminated"]
                                     /\ UNCHANGED evtRecv_r
                                ELSE /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "Done"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          stateTransitions, visitedTransitions, 
                                          maxUmlEvents, evtRecv_, 
                                          initialState_, finalState_, 
                                          newState_, noChannel_, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

end_Aterminated(self) == /\ pc[self] = "end_Aterminated"
                         /\ TRUE
                         /\ pc' = [pc EXCEPT ![self] = "L18"]
                         /\ UNCHANGED << procs, channels, currentState, 
                                         stateTransitions, visitedTransitions, 
                                         maxUmlEvents, evtRecv_, initialState_, 
                                         finalState_, newState_, noChannel_, 
                                         evtRecv_r, initialState_r, 
                                         finalState_r, newState_r, noChannel_r, 
                                         evtRecv_re, initialState_re, 
                                         finalState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, newState, noChannel >>

L18(self) == /\ pc[self] = "L18"
             /\ Len(channels[self]) > 0
             /\ evtRecv_r' = [evtRecv_r EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_r'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "Done"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

region_AliceINr22(self) == proc_body_idx_region_AliceINr22(self)
                              \/ entry_AIdle(self) \/ body_AIdle(self)
                              \/ loop_AIdle(self) \/ L4(self) \/ L5(self)
                              \/ entry_AEstablished(self) \/ L6(self)
                              \/ body_AEstablished(self) \/ L7(self)
                              \/ L8(self) \/ entry_AInitiated(self)
                              \/ L9(self) \/ L10(self)
                              \/ body_AInitiated(self) \/ L11(self)
                              \/ L12(self) \/ L13(self) \/ L14(self)
                              \/ L15(self) \/ L16(self)
                              \/ entry_Aterminated(self) \/ L17(self)
                              \/ body_Aterminated(self)
                              \/ loop_Aterminated(self)
                              \/ end_Aterminated(self) \/ L18(self)

proc_body_idx_region_BobINr44(self) == /\ pc[self] = "proc_body_idx_region_BobINr44"
                                       /\ currentState' = [currentState EXCEPT ![self] = initialState_re[self]]
                                       /\ pc' = [pc EXCEPT ![self] = "entry_BIdle"]
                                       /\ UNCHANGED << procs, channels, 
                                                       stateTransitions, 
                                                       visitedTransitions, 
                                                       maxUmlEvents, evtRecv_, 
                                                       initialState_, 
                                                       finalState_, newState_, 
                                                       noChannel_, evtRecv_r, 
                                                       initialState_r, 
                                                       finalState_r, 
                                                       newState_r, noChannel_r, 
                                                       evtRecv_re, 
                                                       initialState_re, 
                                                       finalState_re, 
                                                       newState_re, 
                                                       noChannel_re, evtRecv, 
                                                       initialState, 
                                                       finalState, newState, 
                                                       noChannel >>

entry_BIdle(self) == /\ pc[self] = "entry_BIdle"
                     /\ TRUE
                     /\ currentState' = [currentState EXCEPT ![self] = newState_re[self]]
                     /\ pc' = [pc EXCEPT ![self] = "body_BIdle"]
                     /\ UNCHANGED << procs, channels, stateTransitions, 
                                     visitedTransitions, maxUmlEvents, 
                                     evtRecv_, initialState_, finalState_, 
                                     newState_, noChannel_, evtRecv_r, 
                                     initialState_r, finalState_r, newState_r, 
                                     noChannel_r, evtRecv_re, initialState_re, 
                                     finalState_re, newState_re, noChannel_re, 
                                     evtRecv, initialState, finalState, 
                                     newState, noChannel >>

body_BIdle(self) == /\ pc[self] = "body_BIdle"
                    /\ TRUE
                    /\ pc' = [pc EXCEPT ![self] = "loop_BIdle"]
                    /\ UNCHANGED << procs, channels, currentState, 
                                    stateTransitions, visitedTransitions, 
                                    maxUmlEvents, evtRecv_, initialState_, 
                                    finalState_, newState_, noChannel_, 
                                    evtRecv_r, initialState_r, finalState_r, 
                                    newState_r, noChannel_r, evtRecv_re, 
                                    initialState_re, finalState_re, 
                                    newState_re, noChannel_re, evtRecv, 
                                    initialState, finalState, newState, 
                                    noChannel >>

loop_BIdle(self) == /\ pc[self] = "loop_BIdle"
                    /\ TRUE
                    /\ IF noChannel_re[self] = FALSE
                          THEN /\ pc' = [pc EXCEPT ![self] = "L19"]
                               /\ UNCHANGED evtRecv_re
                          ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                               /\ pc' = [pc EXCEPT ![self] = "L20"]
                    /\ UNCHANGED << procs, channels, currentState, 
                                    stateTransitions, visitedTransitions, 
                                    maxUmlEvents, evtRecv_, initialState_, 
                                    finalState_, newState_, noChannel_, 
                                    evtRecv_r, initialState_r, finalState_r, 
                                    newState_r, noChannel_r, initialState_re, 
                                    finalState_re, newState_re, noChannel_re, 
                                    evtRecv, initialState, finalState, 
                                    newState, noChannel >>

L19(self) == /\ pc[self] = "L19"
             /\ Len(channels[self]) > 0
             /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_re'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L20"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

L20(self) == /\ pc[self] = "L20"
             /\ (evtRecv_re[self] = idx_event_INVITE)
             /\ visitedTransitions' = [visitedTransitions EXCEPT !["t45"] = TRUE]
             /\ newState_re' = [newState_re EXCEPT ![self] = idx_state_BInitiated]
             /\ pc' = [pc EXCEPT ![self] = "entry_BInitiated"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             maxUmlEvents, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

entry_BEstablished(self) == /\ pc[self] = "entry_BEstablished"
                            /\ TRUE
                            /\ currentState' = [currentState EXCEPT ![self] = newState_re[self]]
                            /\ pc' = [pc EXCEPT ![self] = "L21"]
                            /\ UNCHANGED << procs, channels, stateTransitions, 
                                            visitedTransitions, maxUmlEvents, 
                                            evtRecv_, initialState_, 
                                            finalState_, newState_, noChannel_, 
                                            evtRecv_r, initialState_r, 
                                            finalState_r, newState_r, 
                                            noChannel_r, evtRecv_re, 
                                            initialState_re, finalState_re, 
                                            newState_re, noChannel_re, evtRecv, 
                                            initialState, finalState, newState, 
                                            noChannel >>

L21(self) == /\ pc[self] = "L21"
             /\ PrintT(<<"P:", idx_state_BEstablished, "o->", idx_event_2xx, idx_region_AliceINr22, " > P:", idx_state_Alice>>)
             /\ channels' = [channels EXCEPT ![idx_region_AliceINr22] = Append(@, idx_event_2xx)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ pc' = [pc EXCEPT ![self] = "body_BEstablished"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

body_BEstablished(self) == /\ pc[self] = "body_BEstablished"
                           /\ TRUE
                           /\ IF noChannel_re[self] = FALSE
                                 THEN /\ pc' = [pc EXCEPT ![self] = "L22"]
                                      /\ UNCHANGED evtRecv_re
                                 ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                                      /\ pc' = [pc EXCEPT ![self] = "L23"]
                           /\ UNCHANGED << procs, channels, currentState, 
                                           stateTransitions, 
                                           visitedTransitions, maxUmlEvents, 
                                           evtRecv_, initialState_, 
                                           finalState_, newState_, noChannel_, 
                                           evtRecv_r, initialState_r, 
                                           finalState_r, newState_r, 
                                           noChannel_r, initialState_re, 
                                           finalState_re, newState_re, 
                                           noChannel_re, evtRecv, initialState, 
                                           finalState, newState, noChannel >>

L22(self) == /\ pc[self] = "L22"
             /\ Len(channels[self]) > 0
             /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_re'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L23"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

L23(self) == /\ pc[self] = "L23"
             /\ \/ /\ (evtRecv_re[self] = idx_event_ACK)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t51"] = TRUE]
                   /\ newState_re' = [newState_re EXCEPT ![self] = idx_state_BEstablished]
                   /\ pc' = [pc EXCEPT ![self] = "body_BEstablished"]
                \/ /\ (evtRecv_re[self] = idx_event_BYE)
                   /\ visitedTransitions' = [visitedTransitions EXCEPT !["t52"] = TRUE]
                   /\ newState_re' = [newState_re EXCEPT ![self] = idx_state_Bterminated]
                   /\ pc' = [pc EXCEPT ![self] = "entry_Bterminated"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             maxUmlEvents, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

entry_BInitiated(self) == /\ pc[self] = "entry_BInitiated"
                          /\ TRUE
                          /\ currentState' = [currentState EXCEPT ![self] = newState_re[self]]
                          /\ pc' = [pc EXCEPT ![self] = "L24"]
                          /\ UNCHANGED << procs, channels, stateTransitions, 
                                          visitedTransitions, maxUmlEvents, 
                                          evtRecv_, initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

L24(self) == /\ pc[self] = "L24"
             /\ Assert(((currentState[idx_region_BobINr44] /=idx_state_AIdle)), 
                       "Failure of assertion at line 505, column 10.")
             /\ pc' = [pc EXCEPT ![self] = "L25"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             newState, noChannel >>

L25(self) == /\ pc[self] = "L25"
             /\ PrintT(<<"P:", idx_state_BInitiated, "o->", idx_event_1xx, idx_region_AliceINr22, " > P:", idx_state_Alice>>)
             /\ channels' = [channels EXCEPT ![idx_region_AliceINr22] = Append(@, idx_event_1xx)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ pc' = [pc EXCEPT ![self] = "body_BInitiated"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

body_BInitiated(self) == /\ pc[self] = "body_BInitiated"
                         /\ TRUE
                         /\ IF noChannel_re[self] = FALSE
                               THEN /\ pc' = [pc EXCEPT ![self] = "L26"]
                                    /\ UNCHANGED evtRecv_re
                               ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                                    /\ pc' = [pc EXCEPT ![self] = "L27"]
                         /\ UNCHANGED << procs, channels, currentState, 
                                         stateTransitions, visitedTransitions, 
                                         maxUmlEvents, evtRecv_, initialState_, 
                                         finalState_, newState_, noChannel_, 
                                         evtRecv_r, initialState_r, 
                                         finalState_r, newState_r, noChannel_r, 
                                         initialState_re, finalState_re, 
                                         newState_re, noChannel_re, evtRecv, 
                                         initialState, finalState, newState, 
                                         noChannel >>

L26(self) == /\ pc[self] = "L26"
             /\ Len(channels[self]) > 0
             /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_re'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L27"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

L27(self) == /\ pc[self] = "L27"
             /\ (evtRecv_re[self] = idx_event_Pickup)
             /\ visitedTransitions' = [visitedTransitions EXCEPT !["t48"] = TRUE]
             /\ pc' = [pc EXCEPT ![self] = "L28"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             maxUmlEvents, evtRecv_, initialState_, 
                             finalState_, newState_, noChannel_, evtRecv_r, 
                             initialState_r, finalState_r, newState_r, 
                             noChannel_r, evtRecv_re, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

L28(self) == /\ pc[self] = "L28"
             /\ Assert(((currentState[idx_region_BobINr44] /=idx_state_AInitiated)), 
                       "Failure of assertion at line 528, column 14.")
             /\ newState_re' = [newState_re EXCEPT ![self] = idx_state_BEstablished]
             /\ pc' = [pc EXCEPT ![self] = "entry_BEstablished"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, noChannel_re, 
                             evtRecv, initialState, finalState, newState, 
                             noChannel >>

L29(self) == /\ pc[self] = "L29"
             /\ Assert(((currentState[idx_region_BobINr44] /=idx_state_AInitiated)), 
                       "Failure of assertion at line 537, column 10.")
             /\ pc' = [pc EXCEPT ![self] = "L30"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             newState, noChannel >>

L30(self) == /\ pc[self] = "L30"
             /\ Assert(((currentState[idx_region_BobINr44] /=idx_state_AInitiated)), 
                       "Failure of assertion at line 540, column 10.")
             /\ pc' = [pc EXCEPT ![self] = "entry_Bterminated"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             newState, noChannel >>

entry_Bterminated(self) == /\ pc[self] = "entry_Bterminated"
                           /\ TRUE
                           /\ currentState' = [currentState EXCEPT ![self] = newState_re[self]]
                           /\ noChannel_re' = [noChannel_re EXCEPT ![self] = TRUE]
                           /\ pc' = [pc EXCEPT ![self] = "body_Bterminated"]
                           /\ UNCHANGED << procs, channels, stateTransitions, 
                                           visitedTransitions, maxUmlEvents, 
                                           evtRecv_, initialState_, 
                                           finalState_, newState_, noChannel_, 
                                           evtRecv_r, initialState_r, 
                                           finalState_r, newState_r, 
                                           noChannel_r, evtRecv_re, 
                                           initialState_re, finalState_re, 
                                           newState_re, evtRecv, initialState, 
                                           finalState, newState, noChannel >>

body_Bterminated(self) == /\ pc[self] = "body_Bterminated"
                          /\ TRUE
                          /\ pc' = [pc EXCEPT ![self] = "loop_Bterminated"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          stateTransitions, visitedTransitions, 
                                          maxUmlEvents, evtRecv_, 
                                          initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

loop_Bterminated(self) == /\ pc[self] = "loop_Bterminated"
                          /\ TRUE
                          /\ IF noChannel_re[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "end_Bterminated"]
                                     /\ UNCHANGED evtRecv_re
                                ELSE /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "Done"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          stateTransitions, visitedTransitions, 
                                          maxUmlEvents, evtRecv_, 
                                          initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, evtRecv, 
                                          initialState, finalState, newState, 
                                          noChannel >>

end_Bterminated(self) == /\ pc[self] = "end_Bterminated"
                         /\ TRUE
                         /\ pc' = [pc EXCEPT ![self] = "L31"]
                         /\ UNCHANGED << procs, channels, currentState, 
                                         stateTransitions, visitedTransitions, 
                                         maxUmlEvents, evtRecv_, initialState_, 
                                         finalState_, newState_, noChannel_, 
                                         evtRecv_r, initialState_r, 
                                         finalState_r, newState_r, noChannel_r, 
                                         evtRecv_re, initialState_re, 
                                         finalState_re, newState_re, 
                                         noChannel_re, evtRecv, initialState, 
                                         finalState, newState, noChannel >>

L31(self) == /\ pc[self] = "L31"
             /\ Len(channels[self]) > 0
             /\ evtRecv_re' = [evtRecv_re EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv_re'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "Done"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, initialState_re, 
                             finalState_re, newState_re, noChannel_re, evtRecv, 
                             initialState, finalState, newState, noChannel >>

region_BobINr44(self) == proc_body_idx_region_BobINr44(self)
                            \/ entry_BIdle(self) \/ body_BIdle(self)
                            \/ loop_BIdle(self) \/ L19(self) \/ L20(self)
                            \/ entry_BEstablished(self) \/ L21(self)
                            \/ body_BEstablished(self) \/ L22(self)
                            \/ L23(self) \/ entry_BInitiated(self)
                            \/ L24(self) \/ L25(self)
                            \/ body_BInitiated(self) \/ L26(self)
                            \/ L27(self) \/ L28(self) \/ L29(self)
                            \/ L30(self) \/ entry_Bterminated(self)
                            \/ body_Bterminated(self)
                            \/ loop_Bterminated(self)
                            \/ end_Bterminated(self) \/ L31(self)

proc_body_idx_region_ClosedSystemEnvironmentINr4(self) == /\ pc[self] = "proc_body_idx_region_ClosedSystemEnvironmentINr4"
                                                          /\ currentState' = [currentState EXCEPT ![self] = initialState[self]]
                                                          /\ pc' = [pc EXCEPT ![self] = "entry_AliceDial"]
                                                          /\ UNCHANGED << procs, 
                                                                          channels, 
                                                                          stateTransitions, 
                                                                          visitedTransitions, 
                                                                          maxUmlEvents, 
                                                                          evtRecv_, 
                                                                          initialState_, 
                                                                          finalState_, 
                                                                          newState_, 
                                                                          noChannel_, 
                                                                          evtRecv_r, 
                                                                          initialState_r, 
                                                                          finalState_r, 
                                                                          newState_r, 
                                                                          noChannel_r, 
                                                                          evtRecv_re, 
                                                                          initialState_re, 
                                                                          finalState_re, 
                                                                          newState_re, 
                                                                          noChannel_re, 
                                                                          evtRecv, 
                                                                          initialState, 
                                                                          finalState, 
                                                                          newState, 
                                                                          noChannel >>

entry_AliceDial(self) == /\ pc[self] = "entry_AliceDial"
                         /\ TRUE
                         /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                         /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                         /\ pc' = [pc EXCEPT ![self] = "body_AliceDial"]
                         /\ UNCHANGED << procs, channels, stateTransitions, 
                                         visitedTransitions, maxUmlEvents, 
                                         evtRecv_, initialState_, finalState_, 
                                         newState_, noChannel_, evtRecv_r, 
                                         initialState_r, finalState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         newState_re, noChannel_re, evtRecv, 
                                         initialState, finalState, newState >>

body_AliceDial(self) == /\ pc[self] = "body_AliceDial"
                        /\ TRUE
                        /\ pc' = [pc EXCEPT ![self] = "loop_AliceDial"]
                        /\ UNCHANGED << procs, channels, currentState, 
                                        stateTransitions, visitedTransitions, 
                                        maxUmlEvents, evtRecv_, initialState_, 
                                        finalState_, newState_, noChannel_, 
                                        evtRecv_r, initialState_r, 
                                        finalState_r, newState_r, noChannel_r, 
                                        evtRecv_re, initialState_re, 
                                        finalState_re, newState_re, 
                                        noChannel_re, evtRecv, initialState, 
                                        finalState, newState, noChannel >>

loop_AliceDial(self) == /\ pc[self] = "loop_AliceDial"
                        /\ TRUE
                        /\ IF noChannel[self] = FALSE
                              THEN /\ pc' = [pc EXCEPT ![self] = "L32"]
                                   /\ UNCHANGED evtRecv
                              ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                   /\ pc' = [pc EXCEPT ![self] = "L33"]
                        /\ UNCHANGED << procs, channels, currentState, 
                                        stateTransitions, visitedTransitions, 
                                        maxUmlEvents, evtRecv_, initialState_, 
                                        finalState_, newState_, noChannel_, 
                                        evtRecv_r, initialState_r, 
                                        finalState_r, newState_r, noChannel_r, 
                                        evtRecv_re, initialState_re, 
                                        finalState_re, newState_re, 
                                        noChannel_re, initialState, finalState, 
                                        newState, noChannel >>

L32(self) == /\ pc[self] = "L32"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L33"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, initialState, finalState, newState, 
                             noChannel >>

L33(self) == /\ pc[self] = "L33"
             /\ (evtRecv[self] = idx_event_NullEvent /\ currentState[idx_region_AliceINr22] =idx_state_AIdle)
             /\ pc' = [pc EXCEPT ![self] = "L34"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             newState, noChannel >>

L34(self) == /\ pc[self] = "L34"
             /\ PrintT(<<"P:", idx_state_AliceDial, "o->", idx_event_Dial, idx_region_AliceINr22, " > P:", idx_state_Alice>>)
             /\ channels' = [channels EXCEPT ![idx_region_AliceINr22] = Append(@, idx_event_Dial)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ visitedTransitions' = [visitedTransitions EXCEPT !["t6"] = TRUE]
             /\ newState' = [newState EXCEPT ![self] = idx_state_BobPickup]
             /\ pc' = [pc EXCEPT ![self] = "entry_BobPickup"]
             /\ UNCHANGED << procs, currentState, stateTransitions, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             noChannel >>

entry_AliceHangup(self) == /\ pc[self] = "entry_AliceHangup"
                           /\ TRUE
                           /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                           /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                           /\ pc' = [pc EXCEPT ![self] = "body_AliceHangup"]
                           /\ UNCHANGED << procs, channels, stateTransitions, 
                                           visitedTransitions, maxUmlEvents, 
                                           evtRecv_, initialState_, 
                                           finalState_, newState_, noChannel_, 
                                           evtRecv_r, initialState_r, 
                                           finalState_r, newState_r, 
                                           noChannel_r, evtRecv_re, 
                                           initialState_re, finalState_re, 
                                           newState_re, noChannel_re, evtRecv, 
                                           initialState, finalState, newState >>

body_AliceHangup(self) == /\ pc[self] = "body_AliceHangup"
                          /\ TRUE
                          /\ IF noChannel[self] = FALSE
                                THEN /\ pc' = [pc EXCEPT ![self] = "L35"]
                                     /\ UNCHANGED evtRecv
                                ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                     /\ pc' = [pc EXCEPT ![self] = "L36"]
                          /\ UNCHANGED << procs, channels, currentState, 
                                          stateTransitions, visitedTransitions, 
                                          maxUmlEvents, evtRecv_, 
                                          initialState_, finalState_, 
                                          newState_, noChannel_, evtRecv_r, 
                                          initialState_r, finalState_r, 
                                          newState_r, noChannel_r, evtRecv_re, 
                                          initialState_re, finalState_re, 
                                          newState_re, noChannel_re, 
                                          initialState, finalState, newState, 
                                          noChannel >>

L35(self) == /\ pc[self] = "L35"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L36"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, initialState, finalState, newState, 
                             noChannel >>

L36(self) == /\ pc[self] = "L36"
             /\ (evtRecv[self] = idx_event_NullEvent /\ currentState[idx_region_AliceINr22] =idx_state_AEstablished)
             /\ pc' = [pc EXCEPT ![self] = "L37"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             newState, noChannel >>

L37(self) == /\ pc[self] = "L37"
             /\ PrintT(<<"P:", idx_state_AliceHangup, "o->", idx_event_Hangup, idx_region_AliceINr22, " > P:", idx_state_Alice>>)
             /\ channels' = [channels EXCEPT ![idx_region_AliceINr22] = Append(@, idx_event_Hangup)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ visitedTransitions' = [visitedTransitions EXCEPT !["t12"] = TRUE]
             /\ newState' = [newState EXCEPT ![self] = idx_state_CallEnded]
             /\ pc' = [pc EXCEPT ![self] = "entry_CallEnded"]
             /\ UNCHANGED << procs, currentState, stateTransitions, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             noChannel >>

entry_BobPickup(self) == /\ pc[self] = "entry_BobPickup"
                         /\ TRUE
                         /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                         /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                         /\ pc' = [pc EXCEPT ![self] = "body_BobPickup"]
                         /\ UNCHANGED << procs, channels, stateTransitions, 
                                         visitedTransitions, maxUmlEvents, 
                                         evtRecv_, initialState_, finalState_, 
                                         newState_, noChannel_, evtRecv_r, 
                                         initialState_r, finalState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         newState_re, noChannel_re, evtRecv, 
                                         initialState, finalState, newState >>

body_BobPickup(self) == /\ pc[self] = "body_BobPickup"
                        /\ TRUE
                        /\ IF noChannel[self] = FALSE
                              THEN /\ pc' = [pc EXCEPT ![self] = "L38"]
                                   /\ UNCHANGED evtRecv
                              ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                   /\ pc' = [pc EXCEPT ![self] = "L39"]
                        /\ UNCHANGED << procs, channels, currentState, 
                                        stateTransitions, visitedTransitions, 
                                        maxUmlEvents, evtRecv_, initialState_, 
                                        finalState_, newState_, noChannel_, 
                                        evtRecv_r, initialState_r, 
                                        finalState_r, newState_r, noChannel_r, 
                                        evtRecv_re, initialState_re, 
                                        finalState_re, newState_re, 
                                        noChannel_re, initialState, finalState, 
                                        newState, noChannel >>

L38(self) == /\ pc[self] = "L38"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "L39"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, initialState, finalState, newState, 
                             noChannel >>

L39(self) == /\ pc[self] = "L39"
             /\ (evtRecv[self] = idx_event_NullEvent /\ currentState[idx_region_BobINr44] =idx_state_BInitiated)
             /\ pc' = [pc EXCEPT ![self] = "L40"]
             /\ UNCHANGED << procs, channels, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             newState, noChannel >>

L40(self) == /\ pc[self] = "L40"
             /\ PrintT(<<"P:", idx_state_BobPickup, "o->", idx_event_Pickup, idx_region_BobINr44, " > P:", idx_state_Bob>>)
             /\ channels' = [channels EXCEPT ![idx_region_BobINr44] = Append(@, idx_event_Pickup)]
             /\ maxUmlEvents' = maxUmlEvents + 1
             /\ visitedTransitions' = [visitedTransitions EXCEPT !["t9"] = TRUE]
             /\ newState' = [newState EXCEPT ![self] = idx_state_AliceHangup]
             /\ pc' = [pc EXCEPT ![self] = "entry_AliceHangup"]
             /\ UNCHANGED << procs, currentState, stateTransitions, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, evtRecv, initialState, finalState, 
                             noChannel >>

entry_CallEnded(self) == /\ pc[self] = "entry_CallEnded"
                         /\ TRUE
                         /\ currentState' = [currentState EXCEPT ![self] = newState[self]]
                         /\ noChannel' = [noChannel EXCEPT ![self] = TRUE]
                         /\ pc' = [pc EXCEPT ![self] = "body_CallEnded"]
                         /\ UNCHANGED << procs, channels, stateTransitions, 
                                         visitedTransitions, maxUmlEvents, 
                                         evtRecv_, initialState_, finalState_, 
                                         newState_, noChannel_, evtRecv_r, 
                                         initialState_r, finalState_r, 
                                         newState_r, noChannel_r, evtRecv_re, 
                                         initialState_re, finalState_re, 
                                         newState_re, noChannel_re, evtRecv, 
                                         initialState, finalState, newState >>

body_CallEnded(self) == /\ pc[self] = "body_CallEnded"
                        /\ TRUE
                        /\ pc' = [pc EXCEPT ![self] = "loop_CallEnded"]
                        /\ UNCHANGED << procs, channels, currentState, 
                                        stateTransitions, visitedTransitions, 
                                        maxUmlEvents, evtRecv_, initialState_, 
                                        finalState_, newState_, noChannel_, 
                                        evtRecv_r, initialState_r, 
                                        finalState_r, newState_r, noChannel_r, 
                                        evtRecv_re, initialState_re, 
                                        finalState_re, newState_re, 
                                        noChannel_re, evtRecv, initialState, 
                                        finalState, newState, noChannel >>

loop_CallEnded(self) == /\ pc[self] = "loop_CallEnded"
                        /\ TRUE
                        /\ IF noChannel[self] = FALSE
                              THEN /\ pc' = [pc EXCEPT ![self] = "end_CallEnded"]
                                   /\ UNCHANGED evtRecv
                              ELSE /\ evtRecv' = [evtRecv EXCEPT ![self] = idx_event_NullEvent]
                                   /\ pc' = [pc EXCEPT ![self] = "Done"]
                        /\ UNCHANGED << procs, channels, currentState, 
                                        stateTransitions, visitedTransitions, 
                                        maxUmlEvents, evtRecv_, initialState_, 
                                        finalState_, newState_, noChannel_, 
                                        evtRecv_r, initialState_r, 
                                        finalState_r, newState_r, noChannel_r, 
                                        evtRecv_re, initialState_re, 
                                        finalState_re, newState_re, 
                                        noChannel_re, initialState, finalState, 
                                        newState, noChannel >>

end_CallEnded(self) == /\ pc[self] = "end_CallEnded"
                       /\ TRUE
                       /\ pc' = [pc EXCEPT ![self] = "L41"]
                       /\ UNCHANGED << procs, channels, currentState, 
                                       stateTransitions, visitedTransitions, 
                                       maxUmlEvents, evtRecv_, initialState_, 
                                       finalState_, newState_, noChannel_, 
                                       evtRecv_r, initialState_r, finalState_r, 
                                       newState_r, noChannel_r, evtRecv_re, 
                                       initialState_re, finalState_re, 
                                       newState_re, noChannel_re, evtRecv, 
                                       initialState, finalState, newState, 
                                       noChannel >>

L41(self) == /\ pc[self] = "L41"
             /\ Len(channels[self]) > 0
             /\ evtRecv' = [evtRecv EXCEPT ![self] = Head(channels[self])]
             /\ PrintT(<<"P:", self, (currentState[self]), "<-i", evtRecv'[self]>>)
             /\ channels' = [channels EXCEPT ![self] = Tail(@)]
             /\ pc' = [pc EXCEPT ![self] = "Done"]
             /\ UNCHANGED << procs, currentState, stateTransitions, 
                             visitedTransitions, maxUmlEvents, evtRecv_, 
                             initialState_, finalState_, newState_, noChannel_, 
                             evtRecv_r, initialState_r, finalState_r, 
                             newState_r, noChannel_r, evtRecv_re, 
                             initialState_re, finalState_re, newState_re, 
                             noChannel_re, initialState, finalState, newState, 
                             noChannel >>

region_ClosedSystemEnvironmentINr4(self) == proc_body_idx_region_ClosedSystemEnvironmentINr4(self)
                                               \/ entry_AliceDial(self)
                                               \/ body_AliceDial(self)
                                               \/ loop_AliceDial(self)
                                               \/ L32(self) \/ L33(self)
                                               \/ L34(self)
                                               \/ entry_AliceHangup(self)
                                               \/ body_AliceHangup(self)
                                               \/ L35(self) \/ L36(self)
                                               \/ L37(self)
                                               \/ entry_BobPickup(self)
                                               \/ body_BobPickup(self)
                                               \/ L38(self) \/ L39(self)
                                               \/ L40(self)
                                               \/ entry_CallEnded(self)
                                               \/ body_CallEnded(self)
                                               \/ loop_CallEnded(self)
                                               \/ end_CallEnded(self)
                                               \/ L41(self)

(* Allow infinite stuttering to prevent deadlock on termination. *)
Terminating == /\ \A self \in ProcSet: pc[self] = "Done"
               /\ UNCHANGED vars

Next == (\E self \in {idx_region_m1INr3}: region_m1INr3(self))
           \/ (\E self \in {idx_region_AliceINr22}: region_AliceINr22(self))
           \/ (\E self \in {idx_region_BobINr44}: region_BobINr44(self))
           \/ (\E self \in {idx_region_ClosedSystemEnvironmentINr4}: region_ClosedSystemEnvironmentINr4(self))
           \/ Terminating

Spec == /\ Init /\ [][Next]_vars
        /\ \A self \in {idx_region_m1INr3} : SF_vars(region_m1INr3(self))
        /\ \A self \in {idx_region_AliceINr22} : SF_vars(region_AliceINr22(self))
        /\ \A self \in {idx_region_BobINr44} : SF_vars(region_BobINr44(self))
        /\ \A self \in {idx_region_ClosedSystemEnvironmentINr4} : SF_vars(region_ClosedSystemEnvironmentINr4(self))

Termination == <>(\A self \in ProcSet: pc[self] = "Done")

\* END TRANSLATION 

\*     (F:'';L:17;C:1) ClosedSystemEnvironment:ltl: ltlFinalStates,{,<>,[],(,state:ClosedSystemEnvironment:currentState,==,state:CallEnded,&&,state:Alice:currentState,==,state:Aterminated,&&,state:Bob:currentState,==,state:Bterminated,),}, (a17)
ltlFinalStates == <> [] ( currentState[idx_region_ClosedSystemEnvironmentINr4]  = idx_state_CallEnded /\ currentState[idx_region_AliceINr22]  = idx_state_Aterminated /\ currentState[idx_region_BobINr44]  = idx_state_Bterminated ) 
 

\* Weakly fair scheduling 
(* PlusCal options (wf) *) 


=======================================================================
